module.exports = /******/ (function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {}; // The require function
  /******/
  /******/ /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {},
      /******/
    }); // Execute the module function
    /******/
    /******/ /******/ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    ); // Flag the module as loaded
    /******/
    /******/ /******/ module.l = true; // Return the exports of the module
    /******/
    /******/ /******/ return module.exports;
    /******/
  } // expose the modules object (__webpack_modules__)
  /******/
  /******/
  /******/ /******/ __webpack_require__.m = modules; // expose the module cache
  /******/
  /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
  /******/
  /******/ /******/ __webpack_require__.d = function (exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter,
      });
      /******/
    }
    /******/
  }; // define __esModule on exports
  /******/
  /******/ /******/ __webpack_require__.r = function (exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module",
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
  /******/
  /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function (
    value,
    mode
  ) {
    /******/ if (mode & 1) value = __webpack_require__(value);
    /******/ if (mode & 8) return value;
    /******/ if (
      mode & 4 &&
      typeof value === "object" &&
      value &&
      value.__esModule
    )
      return value;
    /******/ var ns = Object.create(null);
    /******/ __webpack_require__.r(ns);
    /******/ Object.defineProperty(ns, "default", {
      enumerable: true,
      value: value,
    });
    /******/ if (mode & 2 && typeof value != "string")
      for (var key in value)
        __webpack_require__.d(
          ns,
          key,
          function (key) {
            return value[key];
          }.bind(null, key)
        );
    /******/ return ns;
    /******/
  }; // getDefaultExport function for compatibility with non-harmony modules
  /******/
  /******/ /******/ __webpack_require__.n = function (module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  }; // Object.prototype.hasOwnProperty.call
  /******/
  /******/ /******/ __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }; // __webpack_public_path__
  /******/
  /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
  /******/
  /******/
  /******/ /******/ return __webpack_require__(
    (__webpack_require__.s = "fb15")
  );
  /******/
})(
  /************************************************************************/
  /******/ {
    /***/ 0: /***/ function (module, exports) {
      /* (ignored) */
      /***/
    },

    /***/ "0960": /***/ function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("b19a");

      /***/
    },

    /***/ 1: /***/ function (module, exports) {
      /* (ignored) */
      /***/
    },

    /***/ "1020": /***/ function (module, exports) {
      function deepFreeze(obj) {
        if (obj instanceof Map) {
          obj.clear = obj.delete = obj.set = function () {
            throw new Error("map is read-only");
          };
        } else if (obj instanceof Set) {
          obj.add = obj.clear = obj.delete = function () {
            throw new Error("set is read-only");
          };
        }

        // Freeze self
        Object.freeze(obj);

        Object.getOwnPropertyNames(obj).forEach(function (name) {
          var prop = obj[name];

          // Freeze prop if it is an object
          if (typeof prop == "object" && !Object.isFrozen(prop)) {
            deepFreeze(prop);
          }
        });

        return obj;
      }

      var deepFreezeEs6 = deepFreeze;
      var _default = deepFreeze;
      deepFreezeEs6.default = _default;

      /** @implements CallbackResponse */
      class Response {
        /**
         * @param {CompiledMode} mode
         */
        constructor(mode) {
          // eslint-disable-next-line no-undefined
          if (mode.data === undefined) mode.data = {};

          this.data = mode.data;
          this.isMatchIgnored = false;
        }

        ignoreMatch() {
          this.isMatchIgnored = true;
        }
      }

      /**
       * @param {string} value
       * @returns {string}
       */
      function escapeHTML(value) {
        return value
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#x27;");
      }

      /**
       * performs a shallow merge of multiple objects into one
       *
       * @template T
       * @param {T} original
       * @param {Record<string,any>[]} objects
       * @returns {T} a single new object
       */
      function inherit(original, ...objects) {
        /** @type Record<string,any> */
        const result = Object.create(null);

        for (const key in original) {
          result[key] = original[key];
        }
        objects.forEach(function (obj) {
          for (const key in obj) {
            result[key] = obj[key];
          }
        });
        return /** @type {T} */ (result);
      }

      /**
       * @typedef {object} Renderer
       * @property {(text: string) => void} addText
       * @property {(node: Node) => void} openNode
       * @property {(node: Node) => void} closeNode
       * @property {() => string} value
       */

      /** @typedef {{kind?: string, sublanguage?: boolean}} Node */
      /** @typedef {{walk: (r: Renderer) => void}} Tree */
      /** */

      const SPAN_CLOSE = "</span>";

      /**
       * Determines if a node needs to be wrapped in <span>
       *
       * @param {Node} node */
      const emitsWrappingTags = (node) => {
        return !!node.kind;
      };

      /** @type {Renderer} */
      class HTMLRenderer {
        /**
         * Creates a new HTMLRenderer
         *
         * @param {Tree} parseTree - the parse tree (must support `walk` API)
         * @param {{classPrefix: string}} options
         */
        constructor(parseTree, options) {
          this.buffer = "";
          this.classPrefix = options.classPrefix;
          parseTree.walk(this);
        }

        /**
         * Adds texts to the output stream
         *
         * @param {string} text */
        addText(text) {
          this.buffer += escapeHTML(text);
        }

        /**
         * Adds a node open to the output stream (if needed)
         *
         * @param {Node} node */
        openNode(node) {
          if (!emitsWrappingTags(node)) return;

          let className = node.kind;
          if (!node.sublanguage) {
            className = `${this.classPrefix}${className}`;
          }
          this.span(className);
        }

        /**
         * Adds a node close to the output stream (if needed)
         *
         * @param {Node} node */
        closeNode(node) {
          if (!emitsWrappingTags(node)) return;

          this.buffer += SPAN_CLOSE;
        }

        /**
         * returns the accumulated buffer
         */
        value() {
          return this.buffer;
        }

        // helpers

        /**
         * Builds a span element
         *
         * @param {string} className */
        span(className) {
          this.buffer += `<span class="${className}">`;
        }
      }

      /** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */
      /** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */
      /**  */

      class TokenTree {
        constructor() {
          /** @type DataNode */
          this.rootNode = { children: [] };
          this.stack = [this.rootNode];
        }

        get top() {
          return this.stack[this.stack.length - 1];
        }

        get root() {
          return this.rootNode;
        }

        /** @param {Node} node */
        add(node) {
          this.top.children.push(node);
        }

        /** @param {string} kind */
        openNode(kind) {
          /** @type Node */
          const node = { kind, children: [] };
          this.add(node);
          this.stack.push(node);
        }

        closeNode() {
          if (this.stack.length > 1) {
            return this.stack.pop();
          }
          // eslint-disable-next-line no-undefined
          return undefined;
        }

        closeAllNodes() {
          while (this.closeNode());
        }

        toJSON() {
          return JSON.stringify(this.rootNode, null, 4);
        }

        /**
         * @typedef { import("./html_renderer").Renderer } Renderer
         * @param {Renderer} builder
         */
        walk(builder) {
          // this does not
          return this.constructor._walk(builder, this.rootNode);
          // this works
          // return TokenTree._walk(builder, this.rootNode);
        }

        /**
         * @param {Renderer} builder
         * @param {Node} node
         */
        static _walk(builder, node) {
          if (typeof node === "string") {
            builder.addText(node);
          } else if (node.children) {
            builder.openNode(node);
            node.children.forEach((child) => this._walk(builder, child));
            builder.closeNode(node);
          }
          return builder;
        }

        /**
         * @param {Node} node
         */
        static _collapse(node) {
          if (typeof node === "string") return;
          if (!node.children) return;

          if (node.children.every((el) => typeof el === "string")) {
            // node.text = node.children.join("");
            // delete node.children;
            node.children = [node.children.join("")];
          } else {
            node.children.forEach((child) => {
              TokenTree._collapse(child);
            });
          }
        }
      }

      /**
  Currently this is all private API, but this is the minimal API necessary
  that an Emitter must implement to fully support the parser.

  Minimal interface:

  - addKeyword(text, kind)
  - addText(text)
  - addSublanguage(emitter, subLanguageName)
  - finalize()
  - openNode(kind)
  - closeNode()
  - closeAllNodes()
  - toHTML()

*/

      /**
       * @implements {Emitter}
       */
      class TokenTreeEmitter extends TokenTree {
        /**
         * @param {*} options
         */
        constructor(options) {
          super();
          this.options = options;
        }

        /**
         * @param {string} text
         * @param {string} kind
         */
        addKeyword(text, kind) {
          if (text === "") {
            return;
          }

          this.openNode(kind);
          this.addText(text);
          this.closeNode();
        }

        /**
         * @param {string} text
         */
        addText(text) {
          if (text === "") {
            return;
          }

          this.add(text);
        }

        /**
         * @param {Emitter & {root: DataNode}} emitter
         * @param {string} name
         */
        addSublanguage(emitter, name) {
          /** @type DataNode */
          const node = emitter.root;
          node.kind = name;
          node.sublanguage = true;
          this.add(node);
        }

        toHTML() {
          const renderer = new HTMLRenderer(this, this.options);
          return renderer.value();
        }

        finalize() {
          return true;
        }
      }

      /**
       * @param {string} value
       * @returns {RegExp}
       * */
      function escape(value) {
        return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
      }

      /**
       * @param {RegExp | string } re
       * @returns {string}
       */
      function source(re) {
        if (!re) return null;
        if (typeof re === "string") return re;

        return re.source;
      }

      /**
       * @param {...(RegExp | string) } args
       * @returns {string}
       */
      function concat(...args) {
        const joined = args.map((x) => source(x)).join("");
        return joined;
      }

      /**
       * Any of the passed expresssions may match
       *
       * Creates a huge this | this | that | that match
       * @param {(RegExp | string)[] } args
       * @returns {string}
       */
      function either(...args) {
        const joined = "(" + args.map((x) => source(x)).join("|") + ")";
        return joined;
      }

      /**
       * @param {RegExp} re
       * @returns {number}
       */
      function countMatchGroups(re) {
        return new RegExp(re.toString() + "|").exec("").length - 1;
      }

      /**
       * Does lexeme start with a regular expression match at the beginning
       * @param {RegExp} re
       * @param {string} lexeme
       */
      function startsWith(re, lexeme) {
        const match = re && re.exec(lexeme);
        return match && match.index === 0;
      }

      // BACKREF_RE matches an open parenthesis or backreference. To avoid
      // an incorrect parse, it additionally matches the following:
      // - [...] elements, where the meaning of parentheses and escapes change
      // - other escape sequences, so we do not misparse escape sequences as
      //   interesting elements
      // - non-matching or lookahead parentheses, which do not capture. These
      //   follow the '(' with a '?'.
      const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;

      // join logically computes regexps.join(separator), but fixes the
      // backreferences so they continue to match.
      // it also places each individual regular expression into it's own
      // match group, keeping track of the sequencing of those match groups
      // is currently an exercise for the caller. :-)
      /**
       * @param {(string | RegExp)[]} regexps
       * @param {string} separator
       * @returns {string}
       */
      function join(regexps, separator = "|") {
        let numCaptures = 0;

        return regexps
          .map((regex) => {
            numCaptures += 1;
            const offset = numCaptures;
            let re = source(regex);
            let out = "";

            while (re.length > 0) {
              const match = BACKREF_RE.exec(re);
              if (!match) {
                out += re;
                break;
              }
              out += re.substring(0, match.index);
              re = re.substring(match.index + match[0].length);
              if (match[0][0] === "\\" && match[1]) {
                // Adjust the backreference.
                out += "\\" + String(Number(match[1]) + offset);
              } else {
                out += match[0];
                if (match[0] === "(") {
                  numCaptures++;
                }
              }
            }
            return out;
          })
          .map((re) => `(${re})`)
          .join(separator);
      }

      // Common regexps
      const MATCH_NOTHING_RE = /\b\B/;
      const IDENT_RE = "[a-zA-Z]\\w*";
      const UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
      const NUMBER_RE = "\\b\\d+(\\.\\d+)?";
      const C_NUMBER_RE =
        "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)"; // 0x..., 0..., decimal, float
      const BINARY_NUMBER_RE = "\\b(0b[01]+)"; // 0b...
      const RE_STARTERS_RE =
        "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";

      /**
       * @param { Partial<Mode> & {binary?: string | RegExp} } opts
       */
      const SHEBANG = (opts = {}) => {
        const beginShebang = /^#![ ]*\//;
        if (opts.binary) {
          opts.begin = concat(beginShebang, /.*\b/, opts.binary, /\b.*/);
        }
        return inherit(
          {
            className: "meta",
            begin: beginShebang,
            end: /$/,
            relevance: 0,
            /** @type {ModeCallback} */
            "on:begin": (m, resp) => {
              if (m.index !== 0) resp.ignoreMatch();
            },
          },
          opts
        );
      };

      // Common modes
      const BACKSLASH_ESCAPE = {
        begin: "\\\\[\\s\\S]",
        relevance: 0,
      };
      const APOS_STRING_MODE = {
        className: "string",
        begin: "'",
        end: "'",
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE],
      };
      const QUOTE_STRING_MODE = {
        className: "string",
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE],
      };
      const PHRASAL_WORDS_MODE = {
        begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/,
      };
      /**
       * Creates a comment mode
       *
       * @param {string | RegExp} begin
       * @param {string | RegExp} end
       * @param {Mode | {}} [modeOptions]
       * @returns {Partial<Mode>}
       */
      const COMMENT = function (begin, end, modeOptions = {}) {
        const mode = inherit(
          {
            className: "comment",
            begin,
            end,
            contains: [],
          },
          modeOptions
        );
        mode.contains.push(PHRASAL_WORDS_MODE);
        mode.contains.push({
          className: "doctag",
          begin: "(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):",
          relevance: 0,
        });
        return mode;
      };
      const C_LINE_COMMENT_MODE = COMMENT("//", "$");
      const C_BLOCK_COMMENT_MODE = COMMENT("/\\*", "\\*/");
      const HASH_COMMENT_MODE = COMMENT("#", "$");
      const NUMBER_MODE = {
        className: "number",
        begin: NUMBER_RE,
        relevance: 0,
      };
      const C_NUMBER_MODE = {
        className: "number",
        begin: C_NUMBER_RE,
        relevance: 0,
      };
      const BINARY_NUMBER_MODE = {
        className: "number",
        begin: BINARY_NUMBER_RE,
        relevance: 0,
      };
      const CSS_NUMBER_MODE = {
        className: "number",
        begin:
          NUMBER_RE +
          "(" +
          "%|em|ex|ch|rem" +
          "|vw|vh|vmin|vmax" +
          "|cm|mm|in|pt|pc|px" +
          "|deg|grad|rad|turn" +
          "|s|ms" +
          "|Hz|kHz" +
          "|dpi|dpcm|dppx" +
          ")?",
        relevance: 0,
      };
      const REGEXP_MODE = {
        // this outer rule makes sure we actually have a WHOLE regex and not simply
        // an expression such as:
        //
        //     3 / something
        //
        // (which will then blow up when regex's `illegal` sees the newline)
        begin: /(?=\/[^/\n]*\/)/,
        contains: [
          {
            className: "regexp",
            begin: /\//,
            end: /\/[gimuy]*/,
            illegal: /\n/,
            contains: [
              BACKSLASH_ESCAPE,
              {
                begin: /\[/,
                end: /\]/,
                relevance: 0,
                contains: [BACKSLASH_ESCAPE],
              },
            ],
          },
        ],
      };
      const TITLE_MODE = {
        className: "title",
        begin: IDENT_RE,
        relevance: 0,
      };
      const UNDERSCORE_TITLE_MODE = {
        className: "title",
        begin: UNDERSCORE_IDENT_RE,
        relevance: 0,
      };
      const METHOD_GUARD = {
        // excludes method names from keyword processing
        begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
        relevance: 0,
      };

      /**
       * Adds end same as begin mechanics to a mode
       *
       * Your mode must include at least a single () match group as that first match
       * group is what is used for comparison
       * @param {Partial<Mode>} mode
       */
      const END_SAME_AS_BEGIN = function (mode) {
        return Object.assign(mode, {
          /** @type {ModeCallback} */
          "on:begin": (m, resp) => {
            resp.data._beginMatch = m[1];
          },
          /** @type {ModeCallback} */
          "on:end": (m, resp) => {
            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();
          },
        });
      };

      var MODES = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        MATCH_NOTHING_RE: MATCH_NOTHING_RE,
        IDENT_RE: IDENT_RE,
        UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
        NUMBER_RE: NUMBER_RE,
        C_NUMBER_RE: C_NUMBER_RE,
        BINARY_NUMBER_RE: BINARY_NUMBER_RE,
        RE_STARTERS_RE: RE_STARTERS_RE,
        SHEBANG: SHEBANG,
        BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
        APOS_STRING_MODE: APOS_STRING_MODE,
        QUOTE_STRING_MODE: QUOTE_STRING_MODE,
        PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
        COMMENT: COMMENT,
        C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
        C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
        HASH_COMMENT_MODE: HASH_COMMENT_MODE,
        NUMBER_MODE: NUMBER_MODE,
        C_NUMBER_MODE: C_NUMBER_MODE,
        BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
        CSS_NUMBER_MODE: CSS_NUMBER_MODE,
        REGEXP_MODE: REGEXP_MODE,
        TITLE_MODE: TITLE_MODE,
        UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
        METHOD_GUARD: METHOD_GUARD,
        END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,
      });

      // Grammar extensions / plugins
      // See: https://github.com/highlightjs/highlight.js/issues/2833

      // Grammar extensions allow "syntactic sugar" to be added to the grammar modes
      // without requiring any underlying changes to the compiler internals.

      // `compileMatch` being the perfect small example of now allowing a grammar
      // author to write `match` when they desire to match a single expression rather
      // than being forced to use `begin`.  The extension then just moves `match` into
      // `begin` when it runs.  Ie, no features have been added, but we've just made
      // the experience of writing (and reading grammars) a little bit nicer.

      // ------

      // TODO: We need negative look-behind support to do this properly
      /**
       * Skip a match if it has a preceding dot
       *
       * This is used for `beginKeywords` to prevent matching expressions such as
       * `bob.keyword.do()`. The mode compiler automatically wires this up as a
       * special _internal_ 'on:begin' callback for modes with `beginKeywords`
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      function skipIfhasPrecedingDot(match, response) {
        const before = match.input[match.index - 1];
        if (before === ".") {
          response.ignoreMatch();
        }
      }

      /**
       * `beginKeywords` syntactic sugar
       * @type {CompilerExt}
       */
      function beginKeywords(mode, parent) {
        if (!parent) return;
        if (!mode.beginKeywords) return;

        // for languages with keywords that include non-word characters checking for
        // a word boundary is not sufficient, so instead we check for a word boundary
        // or whitespace - this does no harm in any case since our keyword engine
        // doesn't allow spaces in keywords anyways and we still check for the boundary
        // first
        mode.begin =
          "\\b(" +
          mode.beginKeywords.split(" ").join("|") +
          ")(?!\\.)(?=\\b|\\s)";
        mode.__beforeBegin = skipIfhasPrecedingDot;
        mode.keywords = mode.keywords || mode.beginKeywords;
        delete mode.beginKeywords;

        // prevents double relevance, the keywords themselves provide
        // relevance, the mode doesn't need to double it
        // eslint-disable-next-line no-undefined
        if (mode.relevance === undefined) mode.relevance = 0;
      }

      /**
       * Allow `illegal` to contain an array of illegal values
       * @type {CompilerExt}
       */
      function compileIllegal(mode, _parent) {
        if (!Array.isArray(mode.illegal)) return;

        mode.illegal = either(...mode.illegal);
      }

      /**
       * `match` to match a single expression for readability
       * @type {CompilerExt}
       */
      function compileMatch(mode, _parent) {
        if (!mode.match) return;
        if (mode.begin || mode.end)
          throw new Error("begin & end are not supported with match");

        mode.begin = mode.match;
        delete mode.match;
      }

      /**
       * provides the default 1 relevance to all modes
       * @type {CompilerExt}
       */
      function compileRelevance(mode, _parent) {
        // eslint-disable-next-line no-undefined
        if (mode.relevance === undefined) mode.relevance = 1;
      }

      // keywords that should have no default relevance value
      const COMMON_KEYWORDS = [
        "of",
        "and",
        "for",
        "in",
        "not",
        "or",
        "if",
        "then",
        "parent", // common variable name
        "list", // common variable name
        "value", // common variable name
      ];

      const DEFAULT_KEYWORD_CLASSNAME = "keyword";

      /**
       * Given raw keywords from a language definition, compile them.
       *
       * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
       * @param {boolean} caseInsensitive
       */
      function compileKeywords(
        rawKeywords,
        caseInsensitive,
        className = DEFAULT_KEYWORD_CLASSNAME
      ) {
        /** @type KeywordDict */
        const compiledKeywords = {};

        // input can be a string of keywords, an array of keywords, or a object with
        // named keys representing className (which can then point to a string or array)
        if (typeof rawKeywords === "string") {
          compileList(className, rawKeywords.split(" "));
        } else if (Array.isArray(rawKeywords)) {
          compileList(className, rawKeywords);
        } else {
          Object.keys(rawKeywords).forEach(function (className) {
            // collapse all our objects back into the parent object
            Object.assign(
              compiledKeywords,
              compileKeywords(
                rawKeywords[className],
                caseInsensitive,
                className
              )
            );
          });
        }
        return compiledKeywords;

        // ---

        /**
         * Compiles an individual list of keywords
         *
         * Ex: "for if when while|5"
         *
         * @param {string} className
         * @param {Array<string>} keywordList
         */
        function compileList(className, keywordList) {
          if (caseInsensitive) {
            keywordList = keywordList.map((x) => x.toLowerCase());
          }
          keywordList.forEach(function (keyword) {
            const pair = keyword.split("|");
            compiledKeywords[pair[0]] = [
              className,
              scoreForKeyword(pair[0], pair[1]),
            ];
          });
        }
      }

      /**
       * Returns the proper score for a given keyword
       *
       * Also takes into account comment keywords, which will be scored 0 UNLESS
       * another score has been manually assigned.
       * @param {string} keyword
       * @param {string} [providedScore]
       */
      function scoreForKeyword(keyword, providedScore) {
        // manual scores always win over common keywords
        // so you can force a score of 1 if you really insist
        if (providedScore) {
          return Number(providedScore);
        }

        return commonKeyword(keyword) ? 0 : 1;
      }

      /**
       * Determines if a given keyword is common or not
       *
       * @param {string} keyword */
      function commonKeyword(keyword) {
        return COMMON_KEYWORDS.includes(keyword.toLowerCase());
      }

      // compilation

      /**
       * Compiles a language definition result
       *
       * Given the raw result of a language definition (Language), compiles this so
       * that it is ready for highlighting code.
       * @param {Language} language
       * @param {{plugins: HLJSPlugin[]}} opts
       * @returns {CompiledLanguage}
       */
      function compileLanguage(language, { plugins }) {
        /**
         * Builds a regex with the case sensativility of the current language
         *
         * @param {RegExp | string} value
         * @param {boolean} [global]
         */
        function langRe(value, global) {
          return new RegExp(
            source(value),
            "m" + (language.case_insensitive ? "i" : "") + (global ? "g" : "")
          );
        }

        /**
    Stores multiple regular expressions and allows you to quickly search for
    them all in a string simultaneously - returning the first match.  It does
    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
    and joined by `|` - using match groups to track position.  When a match is
    found checking which position in the array has content allows us to figure
    out which of the original regexes / match groups triggered the match.

    The match object itself (the result of `Regex.exec`) is returned but also
    enhanced by merging in any meta-data that was registered with the regex.
    This is how we keep track of which mode matched, and what type of rule
    (`illegal`, `begin`, end, etc).
  */
        class MultiRegex {
          constructor() {
            this.matchIndexes = {};
            // @ts-ignore
            this.regexes = [];
            this.matchAt = 1;
            this.position = 0;
          }

          // @ts-ignore
          addRule(re, opts) {
            opts.position = this.position++;
            // @ts-ignore
            this.matchIndexes[this.matchAt] = opts;
            this.regexes.push([opts, re]);
            this.matchAt += countMatchGroups(re) + 1;
          }

          compile() {
            if (this.regexes.length === 0) {
              // avoids the need to check length every time exec is called
              // @ts-ignore
              this.exec = () => null;
            }
            const terminators = this.regexes.map((el) => el[1]);
            this.matcherRe = langRe(join(terminators), true);
            this.lastIndex = 0;
          }

          /** @param {string} s */
          exec(s) {
            this.matcherRe.lastIndex = this.lastIndex;
            const match = this.matcherRe.exec(s);
            if (!match) {
              return null;
            }

            // eslint-disable-next-line no-undefined
            const i = match.findIndex((el, i) => i > 0 && el !== undefined);
            // @ts-ignore
            const matchData = this.matchIndexes[i];
            // trim off any earlier non-relevant match groups (ie, the other regex
            // match groups that make up the multi-matcher)
            match.splice(0, i);

            return Object.assign(match, matchData);
          }
        }

        /*
    Created to solve the key deficiently with MultiRegex - there is no way to
    test for multiple matches at a single location.  Why would we need to do
    that?  In the future a more dynamic engine will allow certain matches to be
    ignored.  An example: if we matched say the 3rd regex in a large group but
    decided to ignore it - we'd need to started testing again at the 4th
    regex... but MultiRegex itself gives us no real way to do that.

    So what this class creates MultiRegexs on the fly for whatever search
    position they are needed.

    NOTE: These additional MultiRegex objects are created dynamically.  For most
    grammars most of the time we will never actually need anything more than the
    first MultiRegex - so this shouldn't have too much overhead.

    Say this is our search group, and we match regex3, but wish to ignore it.

      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

    What we need is a new MultiRegex that only includes the remaining
    possibilities:

      regex4 | regex5                               ' ie, startAt = 3

    This class wraps all that complexity up in a simple API... `startAt` decides
    where in the array of expressions to start doing the matching. It
    auto-increments, so if a match is found at position 2, then startAt will be
    set to 3.  If the end is reached startAt will return to 0.

    MOST of the time the parser will be setting startAt manually to 0.
  */
        class ResumableMultiRegex {
          constructor() {
            // @ts-ignore
            this.rules = [];
            // @ts-ignore
            this.multiRegexes = [];
            this.count = 0;

            this.lastIndex = 0;
            this.regexIndex = 0;
          }

          // @ts-ignore
          getMatcher(index) {
            if (this.multiRegexes[index]) return this.multiRegexes[index];

            const matcher = new MultiRegex();
            this.rules
              .slice(index)
              .forEach(([re, opts]) => matcher.addRule(re, opts));
            matcher.compile();
            this.multiRegexes[index] = matcher;
            return matcher;
          }

          resumingScanAtSamePosition() {
            return this.regexIndex !== 0;
          }

          considerAll() {
            this.regexIndex = 0;
          }

          // @ts-ignore
          addRule(re, opts) {
            this.rules.push([re, opts]);
            if (opts.type === "begin") this.count++;
          }

          /** @param {string} s */
          exec(s) {
            const m = this.getMatcher(this.regexIndex);
            m.lastIndex = this.lastIndex;
            let result = m.exec(s);

            // The following is because we have no easy way to say "resume scanning at the
            // existing position but also skip the current rule ONLY". What happens is
            // all prior rules are also skipped which can result in matching the wrong
            // thing. Example of matching "booger":

            // our matcher is [string, "booger", number]
            //
            // ....booger....

            // if "booger" is ignored then we'd really need a regex to scan from the
            // SAME position for only: [string, number] but ignoring "booger" (if it
            // was the first match), a simple resume would scan ahead who knows how
            // far looking only for "number", ignoring potential string matches (or
            // future "booger" matches that might be valid.)

            // So what we do: We execute two matchers, one resuming at the same
            // position, but the second full matcher starting at the position after:

            //     /--- resume first regex match here (for [number])
            //     |/---- full match here for [string, "booger", number]
            //     vv
            // ....booger....

            // Which ever results in a match first is then used. So this 3-4 step
            // process essentially allows us to say "match at this position, excluding
            // a prior rule that was ignored".
            //
            // 1. Match "booger" first, ignore. Also proves that [string] does non match.
            // 2. Resume matching for [number]
            // 3. Match at index + 1 for [string, "booger", number]
            // 4. If #2 and #3 result in matches, which came first?
            if (this.resumingScanAtSamePosition()) {
              if (result && result.index === this.lastIndex);
              else {
                // use the second matcher result
                const m2 = this.getMatcher(0);
                m2.lastIndex = this.lastIndex + 1;
                result = m2.exec(s);
              }
            }

            if (result) {
              this.regexIndex += result.position + 1;
              if (this.regexIndex === this.count) {
                // wrap-around to considering all matches again
                this.considerAll();
              }
            }

            return result;
          }
        }

        /**
         * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
         * the content and find matches.
         *
         * @param {CompiledMode} mode
         * @returns {ResumableMultiRegex}
         */
        function buildModeRegex(mode) {
          const mm = new ResumableMultiRegex();

          mode.contains.forEach((term) =>
            mm.addRule(term.begin, { rule: term, type: "begin" })
          );

          if (mode.terminatorEnd) {
            mm.addRule(mode.terminatorEnd, { type: "end" });
          }
          if (mode.illegal) {
            mm.addRule(mode.illegal, { type: "illegal" });
          }

          return mm;
        }

        /** skip vs abort vs ignore
         *
         * @skip   - The mode is still entered and exited normally (and contains rules apply),
         *           but all content is held and added to the parent buffer rather than being
         *           output when the mode ends.  Mostly used with `sublanguage` to build up
         *           a single large buffer than can be parsed by sublanguage.
         *
         *             - The mode begin ands ends normally.
         *             - Content matched is added to the parent mode buffer.
         *             - The parser cursor is moved forward normally.
         *
         * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
         *           never matched) but DOES NOT continue to match subsequent `contains`
         *           modes.  Abort is bad/suboptimal because it can result in modes
         *           farther down not getting applied because an earlier rule eats the
         *           content but then aborts.
         *
         *             - The mode does not begin.
         *             - Content matched by `begin` is added to the mode buffer.
         *             - The parser cursor is moved forward accordingly.
         *
         * @ignore - Ignores the mode (as if it never matched) and continues to match any
         *           subsequent `contains` modes.  Ignore isn't technically possible with
         *           the current parser implementation.
         *
         *             - The mode does not begin.
         *             - Content matched by `begin` is ignored.
         *             - The parser cursor is not moved forward.
         */

        /**
         * Compiles an individual mode
         *
         * This can raise an error if the mode contains certain detectable known logic
         * issues.
         * @param {Mode} mode
         * @param {CompiledMode | null} [parent]
         * @returns {CompiledMode | never}
         */
        function compileMode(mode, parent) {
          const cmode = /** @type CompiledMode */ (mode);
          if (mode.isCompiled) return cmode;

          [
            // do this early so compiler extensions generally don't have to worry about
            // the distinction between match/begin
            compileMatch,
          ].forEach((ext) => ext(mode, parent));

          language.compilerExtensions.forEach((ext) => ext(mode, parent));

          // __beforeBegin is considered private API, internal use only
          mode.__beforeBegin = null;

          [
            beginKeywords,
            // do this later so compiler extensions that come earlier have access to the
            // raw array if they wanted to perhaps manipulate it, etc.
            compileIllegal,
            // default to 1 relevance if not specified
            compileRelevance,
          ].forEach((ext) => ext(mode, parent));

          mode.isCompiled = true;

          let keywordPattern = null;
          if (typeof mode.keywords === "object") {
            keywordPattern = mode.keywords.$pattern;
            delete mode.keywords.$pattern;
          }

          if (mode.keywords) {
            mode.keywords = compileKeywords(
              mode.keywords,
              language.case_insensitive
            );
          }

          // both are not allowed
          if (mode.lexemes && keywordPattern) {
            throw new Error(
              "ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) "
            );
          }

          // `mode.lexemes` was the old standard before we added and now recommend
          // using `keywords.$pattern` to pass the keyword pattern
          keywordPattern = keywordPattern || mode.lexemes || /\w+/;
          cmode.keywordPatternRe = langRe(keywordPattern, true);

          if (parent) {
            if (!mode.begin) mode.begin = /\B|\b/;
            cmode.beginRe = langRe(mode.begin);
            if (mode.endSameAsBegin) mode.end = mode.begin;
            if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
            if (mode.end) cmode.endRe = langRe(mode.end);
            cmode.terminatorEnd = source(mode.end) || "";
            if (mode.endsWithParent && parent.terminatorEnd) {
              cmode.terminatorEnd +=
                (mode.end ? "|" : "") + parent.terminatorEnd;
            }
          }
          if (mode.illegal)
            cmode.illegalRe = langRe(
              /** @type {RegExp | string} */ (mode.illegal)
            );
          if (!mode.contains) mode.contains = [];

          mode.contains = [].concat(
            ...mode.contains.map(function (c) {
              return expandOrCloneMode(c === "self" ? mode : c);
            })
          );
          mode.contains.forEach(function (c) {
            compileMode(/** @type Mode */ (c), cmode);
          });

          if (mode.starts) {
            compileMode(mode.starts, parent);
          }

          cmode.matcher = buildModeRegex(cmode);
          return cmode;
        }

        if (!language.compilerExtensions) language.compilerExtensions = [];

        // self is not valid at the top-level
        if (language.contains && language.contains.includes("self")) {
          throw new Error(
            "ERR: contains `self` is not supported at the top-level of a language.  See documentation."
          );
        }

        // we need a null object, which inherit will guarantee
        language.classNameAliases = inherit(language.classNameAliases || {});

        return compileMode(/** @type Mode */ (language));
      }

      /**
       * Determines if a mode has a dependency on it's parent or not
       *
       * If a mode does have a parent dependency then often we need to clone it if
       * it's used in multiple places so that each copy points to the correct parent,
       * where-as modes without a parent can often safely be re-used at the bottom of
       * a mode chain.
       *
       * @param {Mode | null} mode
       * @returns {boolean} - is there a dependency on the parent?
       * */
      function dependencyOnParent(mode) {
        if (!mode) return false;

        return mode.endsWithParent || dependencyOnParent(mode.starts);
      }

      /**
       * Expands a mode or clones it if necessary
       *
       * This is necessary for modes with parental dependenceis (see notes on
       * `dependencyOnParent`) and for nodes that have `variants` - which must then be
       * exploded into their own individual modes at compile time.
       *
       * @param {Mode} mode
       * @returns {Mode | Mode[]}
       * */
      function expandOrCloneMode(mode) {
        if (mode.variants && !mode.cachedVariants) {
          mode.cachedVariants = mode.variants.map(function (variant) {
            return inherit(mode, { variants: null }, variant);
          });
        }

        // EXPAND
        // if we have variants then essentially "replace" the mode with the variants
        // this happens in compileMode, where this function is called from
        if (mode.cachedVariants) {
          return mode.cachedVariants;
        }

        // CLONE
        // if we have dependencies on parents then we need a unique
        // instance of ourselves, so we can be reused with many
        // different parents without issue
        if (dependencyOnParent(mode)) {
          return inherit(mode, {
            starts: mode.starts ? inherit(mode.starts) : null,
          });
        }

        if (Object.isFrozen(mode)) {
          return inherit(mode);
        }

        // no special dependency issues, just return ourselves
        return mode;
      }

      var version = "10.7.3";

      // @ts-nocheck

      function hasValueOrEmptyAttribute(value) {
        return Boolean(value || value === "");
      }

      function BuildVuePlugin(hljs) {
        const Component = {
          props: ["language", "code", "autodetect"],
          data: function () {
            return {
              detectedLanguage: "",
              unknownLanguage: false,
            };
          },
          computed: {
            className() {
              if (this.unknownLanguage) return "";

              return "hljs " + this.detectedLanguage;
            },
            highlighted() {
              // no idea what language to use, return raw code
              if (!this.autoDetect && !hljs.getLanguage(this.language)) {
                console.warn(
                  `The language "${this.language}" you specified could not be found.`
                );
                this.unknownLanguage = true;
                return escapeHTML(this.code);
              }

              let result = {};
              if (this.autoDetect) {
                result = hljs.highlightAuto(this.code);
                this.detectedLanguage = result.language;
              } else {
                result = hljs.highlight(
                  this.language,
                  this.code,
                  this.ignoreIllegals
                );
                this.detectedLanguage = this.language;
              }
              return result.value;
            },
            autoDetect() {
              return (
                !this.language || hasValueOrEmptyAttribute(this.autodetect)
              );
            },
            ignoreIllegals() {
              return true;
            },
          },
          // this avoids needing to use a whole Vue compilation pipeline just
          // to build Highlight.js
          render(createElement) {
            return createElement("pre", {}, [
              createElement("code", {
                class: this.className,
                domProps: { innerHTML: this.highlighted },
              }),
            ]);
          },
          // template: `<pre><code :class="className" v-html="highlighted"></code></pre>`
        };

        const VuePlugin = {
          install(Vue) {
            Vue.component("highlightjs", Component);
          },
        };

        return { Component, VuePlugin };
      }

      /* plugin itself */

      /** @type {HLJSPlugin} */
      const mergeHTMLPlugin = {
        "after:highlightElement": ({ el, result, text }) => {
          const originalStream = nodeStream(el);
          if (!originalStream.length) return;

          const resultNode = document.createElement("div");
          resultNode.innerHTML = result.value;
          result.value = mergeStreams(
            originalStream,
            nodeStream(resultNode),
            text
          );
        },
      };

      /* Stream merging support functions */

      /**
       * @typedef Event
       * @property {'start'|'stop'} event
       * @property {number} offset
       * @property {Node} node
       */

      /**
       * @param {Node} node
       */
      function tag(node) {
        return node.nodeName.toLowerCase();
      }

      /**
       * @param {Node} node
       */
      function nodeStream(node) {
        /** @type Event[] */
        const result = [];
        (function _nodeStream(node, offset) {
          for (let child = node.firstChild; child; child = child.nextSibling) {
            if (child.nodeType === 3) {
              offset += child.nodeValue.length;
            } else if (child.nodeType === 1) {
              result.push({
                event: "start",
                offset: offset,
                node: child,
              });
              offset = _nodeStream(child, offset);
              // Prevent void elements from having an end tag that would actually
              // double them in the output. There are more void elements in HTML
              // but we list only those realistically expected in code display.
              if (!tag(child).match(/br|hr|img|input/)) {
                result.push({
                  event: "stop",
                  offset: offset,
                  node: child,
                });
              }
            }
          }
          return offset;
        })(node, 0);
        return result;
      }

      /**
       * @param {any} original - the original stream
       * @param {any} highlighted - stream of the highlighted source
       * @param {string} value - the original source itself
       */
      function mergeStreams(original, highlighted, value) {
        let processed = 0;
        let result = "";
        const nodeStack = [];

        function selectStream() {
          if (!original.length || !highlighted.length) {
            return original.length ? original : highlighted;
          }
          if (original[0].offset !== highlighted[0].offset) {
            return original[0].offset < highlighted[0].offset
              ? original
              : highlighted;
          }

          /*
    To avoid starting the stream just before it should stop the order is
    ensured that original always starts first and closes last:

    if (event1 == 'start' && event2 == 'start')
      return original;
    if (event1 == 'start' && event2 == 'stop')
      return highlighted;
    if (event1 == 'stop' && event2 == 'start')
      return original;
    if (event1 == 'stop' && event2 == 'stop')
      return highlighted;

    ... which is collapsed to:
    */
          return highlighted[0].event === "start" ? original : highlighted;
        }

        /**
         * @param {Node} node
         */
        function open(node) {
          /** @param {Attr} attr */
          function attributeString(attr) {
            return " " + attr.nodeName + '="' + escapeHTML(attr.value) + '"';
          }
          // @ts-ignore
          result +=
            "<" +
            tag(node) +
            [].map.call(node.attributes, attributeString).join("") +
            ">";
        }

        /**
         * @param {Node} node
         */
        function close(node) {
          result += "</" + tag(node) + ">";
        }

        /**
         * @param {Event} event
         */
        function render(event) {
          (event.event === "start" ? open : close)(event.node);
        }

        while (original.length || highlighted.length) {
          let stream = selectStream();
          result += escapeHTML(value.substring(processed, stream[0].offset));
          processed = stream[0].offset;
          if (stream === original) {
            /*
      On any opening or closing tag of the original markup we first close
      the entire highlighted node stack, then render the original tag along
      with all the following original tags at the same offset and then
      reopen all the tags on the highlighted stack.
      */
            nodeStack.reverse().forEach(close);
            do {
              render(stream.splice(0, 1)[0]);
              stream = selectStream();
            } while (
              stream === original &&
              stream.length &&
              stream[0].offset === processed
            );
            nodeStack.reverse().forEach(open);
          } else {
            if (stream[0].event === "start") {
              nodeStack.push(stream[0].node);
            } else {
              nodeStack.pop();
            }
            render(stream.splice(0, 1)[0]);
          }
        }
        return result + escapeHTML(value.substr(processed));
      }

      /*

For the reasoning behind this please see:
https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

*/

      /**
       * @type {Record<string, boolean>}
       */
      const seenDeprecations = {};

      /**
       * @param {string} message
       */
      const error = (message) => {
        console.error(message);
      };

      /**
       * @param {string} message
       * @param {any} args
       */
      const warn = (message, ...args) => {
        console.log(`WARN: ${message}`, ...args);
      };

      /**
       * @param {string} version
       * @param {string} message
       */
      const deprecated = (version, message) => {
        if (seenDeprecations[`${version}/${message}`]) return;

        console.log(`Deprecated as of ${version}. ${message}`);
        seenDeprecations[`${version}/${message}`] = true;
      };

      /*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

      const escape$1 = escapeHTML;
      const inherit$1 = inherit;
      const NO_MATCH = Symbol("nomatch");

      /**
       * @param {any} hljs - object that is extended (legacy)
       * @returns {HLJSApi}
       */
      const HLJS = function (hljs) {
        // Global internal variables used within the highlight.js library.
        /** @type {Record<string, Language>} */
        const languages = Object.create(null);
        /** @type {Record<string, string>} */
        const aliases = Object.create(null);
        /** @type {HLJSPlugin[]} */
        const plugins = [];

        // safe/production mode - swallows more errors, tries to keep running
        // even if a single syntax or parse hits a fatal error
        let SAFE_MODE = true;
        const fixMarkupRe = /(^(<[^>]+>|\t|)+|\n)/gm;
        const LANGUAGE_NOT_FOUND =
          "Could not find the language '{}', did you forget to load/include a language module?";
        /** @type {Language} */
        const PLAINTEXT_LANGUAGE = {
          disableAutodetect: true,
          name: "Plain text",
          contains: [],
        };

        // Global options used when within external APIs. This is modified when
        // calling the `hljs.configure` function.
        /** @type HLJSOptions */
        let options = {
          noHighlightRe: /^(no-?highlight)$/i,
          languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
          classPrefix: "hljs-",
          tabReplace: null,
          useBR: false,
          languages: null,
          // beta configuration options, subject to change, welcome to discuss
          // https://github.com/highlightjs/highlight.js/issues/1086
          __emitter: TokenTreeEmitter,
        };

        /* Utility functions */

        /**
         * Tests a language name to see if highlighting should be skipped
         * @param {string} languageName
         */
        function shouldNotHighlight(languageName) {
          return options.noHighlightRe.test(languageName);
        }

        /**
         * @param {HighlightedHTMLElement} block - the HTML element to determine language for
         */
        function blockLanguage(block) {
          let classes = block.className + " ";

          classes += block.parentNode ? block.parentNode.className : "";

          // language-* takes precedence over non-prefixed class names.
          const match = options.languageDetectRe.exec(classes);
          if (match) {
            const language = getLanguage(match[1]);
            if (!language) {
              warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
              warn("Falling back to no-highlight mode for this block.", block);
            }
            return language ? match[1] : "no-highlight";
          }

          return classes
            .split(/\s+/)
            .find(
              (_class) => shouldNotHighlight(_class) || getLanguage(_class)
            );
        }

        /**
         * Core highlighting function.
         *
         * OLD API
         * highlight(lang, code, ignoreIllegals, continuation)
         *
         * NEW API
         * highlight(code, {lang, ignoreIllegals})
         *
         * @param {string} codeOrlanguageName - the language to use for highlighting
         * @param {string | HighlightOptions} optionsOrCode - the code to highlight
         * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
         * @param {CompiledMode} [continuation] - current continuation mode, if any
         *
         * @returns {HighlightResult} Result - an object that represents the result
         * @property {string} language - the language name
         * @property {number} relevance - the relevance score
         * @property {string} value - the highlighted HTML code
         * @property {string} code - the original raw code
         * @property {CompiledMode} top - top of the current mode stack
         * @property {boolean} illegal - indicates whether any illegal matches were found
         */
        function highlight(
          codeOrlanguageName,
          optionsOrCode,
          ignoreIllegals,
          continuation
        ) {
          let code = "";
          let languageName = "";
          if (typeof optionsOrCode === "object") {
            code = codeOrlanguageName;
            ignoreIllegals = optionsOrCode.ignoreIllegals;
            languageName = optionsOrCode.language;
            // continuation not supported at all via the new API
            // eslint-disable-next-line no-undefined
            continuation = undefined;
          } else {
            // old API
            deprecated(
              "10.7.0",
              "highlight(lang, code, ...args) has been deprecated."
            );
            deprecated(
              "10.7.0",
              "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"
            );
            languageName = codeOrlanguageName;
            code = optionsOrCode;
          }

          /** @type {BeforeHighlightContext} */
          const context = {
            code,
            language: languageName,
          };
          // the plugin can change the desired language or the code to be highlighted
          // just be changing the object it was passed
          fire("before:highlight", context);

          // a before plugin can usurp the result completely by providing it's own
          // in which case we don't even need to call highlight
          const result = context.result
            ? context.result
            : _highlight(
                context.language,
                context.code,
                ignoreIllegals,
                continuation
              );

          result.code = context.code;
          // the plugin can change anything in result to suite it
          fire("after:highlight", result);

          return result;
        }

        /**
         * private highlight that's used internally and does not fire callbacks
         *
         * @param {string} languageName - the language to use for highlighting
         * @param {string} codeToHighlight - the code to highlight
         * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
         * @param {CompiledMode?} [continuation] - current continuation mode, if any
         * @returns {HighlightResult} - result of the highlight operation
         */
        function _highlight(
          languageName,
          codeToHighlight,
          ignoreIllegals,
          continuation
        ) {
          /**
           * Return keyword data if a match is a keyword
           * @param {CompiledMode} mode - current mode
           * @param {RegExpMatchArray} match - regexp match data
           * @returns {KeywordData | false}
           */
          function keywordData(mode, match) {
            const matchText = language.case_insensitive
              ? match[0].toLowerCase()
              : match[0];
            return (
              Object.prototype.hasOwnProperty.call(mode.keywords, matchText) &&
              mode.keywords[matchText]
            );
          }

          function processKeywords() {
            if (!top.keywords) {
              emitter.addText(modeBuffer);
              return;
            }

            let lastIndex = 0;
            top.keywordPatternRe.lastIndex = 0;
            let match = top.keywordPatternRe.exec(modeBuffer);
            let buf = "";

            while (match) {
              buf += modeBuffer.substring(lastIndex, match.index);
              const data = keywordData(top, match);
              if (data) {
                const [kind, keywordRelevance] = data;
                emitter.addText(buf);
                buf = "";

                relevance += keywordRelevance;
                if (kind.startsWith("_")) {
                  // _ implied for relevance only, do not highlight
                  // by applying a class name
                  buf += match[0];
                } else {
                  const cssClass = language.classNameAliases[kind] || kind;
                  emitter.addKeyword(match[0], cssClass);
                }
              } else {
                buf += match[0];
              }
              lastIndex = top.keywordPatternRe.lastIndex;
              match = top.keywordPatternRe.exec(modeBuffer);
            }
            buf += modeBuffer.substr(lastIndex);
            emitter.addText(buf);
          }

          function processSubLanguage() {
            if (modeBuffer === "") return;
            /** @type HighlightResult */
            let result = null;

            if (typeof top.subLanguage === "string") {
              if (!languages[top.subLanguage]) {
                emitter.addText(modeBuffer);
                return;
              }
              result = _highlight(
                top.subLanguage,
                modeBuffer,
                true,
                continuations[top.subLanguage]
              );
              continuations[
                top.subLanguage
              ] = /** @type {CompiledMode} */ (result.top);
            } else {
              result = highlightAuto(
                modeBuffer,
                top.subLanguage.length ? top.subLanguage : null
              );
            }

            // Counting embedded language score towards the host language may be disabled
            // with zeroing the containing mode relevance. Use case in point is Markdown that
            // allows XML everywhere and makes every XML snippet to have a much larger Markdown
            // score.
            if (top.relevance > 0) {
              relevance += result.relevance;
            }
            emitter.addSublanguage(result.emitter, result.language);
          }

          function processBuffer() {
            if (top.subLanguage != null) {
              processSubLanguage();
            } else {
              processKeywords();
            }
            modeBuffer = "";
          }

          /**
           * @param {Mode} mode - new mode to start
           */
          function startNewMode(mode) {
            if (mode.className) {
              emitter.openNode(
                language.classNameAliases[mode.className] || mode.className
              );
            }
            top = Object.create(mode, { parent: { value: top } });
            return top;
          }

          /**
           * @param {CompiledMode } mode - the mode to potentially end
           * @param {RegExpMatchArray} match - the latest match
           * @param {string} matchPlusRemainder - match plus remainder of content
           * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
           */
          function endOfMode(mode, match, matchPlusRemainder) {
            let matched = startsWith(mode.endRe, matchPlusRemainder);

            if (matched) {
              if (mode["on:end"]) {
                const resp = new Response(mode);
                mode["on:end"](match, resp);
                if (resp.isMatchIgnored) matched = false;
              }

              if (matched) {
                while (mode.endsParent && mode.parent) {
                  mode = mode.parent;
                }
                return mode;
              }
            }
            // even if on:end fires an `ignore` it's still possible
            // that we might trigger the end node because of a parent mode
            if (mode.endsWithParent) {
              return endOfMode(mode.parent, match, matchPlusRemainder);
            }
          }

          /**
           * Handle matching but then ignoring a sequence of text
           *
           * @param {string} lexeme - string containing full match text
           */
          function doIgnore(lexeme) {
            if (top.matcher.regexIndex === 0) {
              // no more regexs to potentially match here, so we move the cursor forward one
              // space
              modeBuffer += lexeme[0];
              return 1;
            } else {
              // no need to move the cursor, we still have additional regexes to try and
              // match at this very spot
              resumeScanAtSamePosition = true;
              return 0;
            }
          }

          /**
           * Handle the start of a new potential mode match
           *
           * @param {EnhancedMatch} match - the current match
           * @returns {number} how far to advance the parse cursor
           */
          function doBeginMatch(match) {
            const lexeme = match[0];
            const newMode = match.rule;

            const resp = new Response(newMode);
            // first internal before callbacks, then the public ones
            const beforeCallbacks = [
              newMode.__beforeBegin,
              newMode["on:begin"],
            ];
            for (const cb of beforeCallbacks) {
              if (!cb) continue;
              cb(match, resp);
              if (resp.isMatchIgnored) return doIgnore(lexeme);
            }

            if (newMode && newMode.endSameAsBegin) {
              newMode.endRe = escape(lexeme);
            }

            if (newMode.skip) {
              modeBuffer += lexeme;
            } else {
              if (newMode.excludeBegin) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (!newMode.returnBegin && !newMode.excludeBegin) {
                modeBuffer = lexeme;
              }
            }
            startNewMode(newMode);
            // if (mode["after:begin"]) {
            //   let resp = new Response(mode);
            //   mode["after:begin"](match, resp);
            // }
            return newMode.returnBegin ? 0 : lexeme.length;
          }

          /**
           * Handle the potential end of mode
           *
           * @param {RegExpMatchArray} match - the current match
           */
          function doEndMatch(match) {
            const lexeme = match[0];
            const matchPlusRemainder = codeToHighlight.substr(match.index);

            const endMode = endOfMode(top, match, matchPlusRemainder);
            if (!endMode) {
              return NO_MATCH;
            }

            const origin = top;
            if (origin.skip) {
              modeBuffer += lexeme;
            } else {
              if (!(origin.returnEnd || origin.excludeEnd)) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (origin.excludeEnd) {
                modeBuffer = lexeme;
              }
            }
            do {
              if (top.className) {
                emitter.closeNode();
              }
              if (!top.skip && !top.subLanguage) {
                relevance += top.relevance;
              }
              top = top.parent;
            } while (top !== endMode.parent);
            if (endMode.starts) {
              if (endMode.endSameAsBegin) {
                endMode.starts.endRe = endMode.endRe;
              }
              startNewMode(endMode.starts);
            }
            return origin.returnEnd ? 0 : lexeme.length;
          }

          function processContinuations() {
            const list = [];
            for (
              let current = top;
              current !== language;
              current = current.parent
            ) {
              if (current.className) {
                list.unshift(current.className);
              }
            }
            list.forEach((item) => emitter.openNode(item));
          }

          /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
          let lastMatch = {};

          /**
           *  Process an individual match
           *
           * @param {string} textBeforeMatch - text preceeding the match (since the last match)
           * @param {EnhancedMatch} [match] - the match itself
           */
          function processLexeme(textBeforeMatch, match) {
            const lexeme = match && match[0];

            // add non-matched text to the current mode buffer
            modeBuffer += textBeforeMatch;

            if (lexeme == null) {
              processBuffer();
              return 0;
            }

            // we've found a 0 width match and we're stuck, so we need to advance
            // this happens when we have badly behaved rules that have optional matchers to the degree that
            // sometimes they can end up matching nothing at all
            // Ref: https://github.com/highlightjs/highlight.js/issues/2140
            if (
              lastMatch.type === "begin" &&
              match.type === "end" &&
              lastMatch.index === match.index &&
              lexeme === ""
            ) {
              // spit the "skipped" character that our regex choked on back into the output sequence
              modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
              if (!SAFE_MODE) {
                /** @type {AnnotatedError} */
                const err = new Error("0 width match regex");
                err.languageName = languageName;
                err.badRule = lastMatch.rule;
                throw err;
              }
              return 1;
            }
            lastMatch = match;

            if (match.type === "begin") {
              return doBeginMatch(match);
            } else if (match.type === "illegal" && !ignoreIllegals) {
              // illegal match, we do not continue processing
              /** @type {AnnotatedError} */
              const err = new Error(
                'Illegal lexeme "' +
                  lexeme +
                  '" for mode "' +
                  (top.className || "<unnamed>") +
                  '"'
              );
              err.mode = top;
              throw err;
            } else if (match.type === "end") {
              const processed = doEndMatch(match);
              if (processed !== NO_MATCH) {
                return processed;
              }
            }

            // edge case for when illegal matches $ (end of line) which is technically
            // a 0 width match but not a begin/end match so it's not caught by the
            // first handler (when ignoreIllegals is true)
            if (match.type === "illegal" && lexeme === "") {
              // advance so we aren't stuck in an infinite loop
              return 1;
            }

            // infinite loops are BAD, this is a last ditch catch all. if we have a
            // decent number of iterations yet our index (cursor position in our
            // parsing) still 3x behind our index then something is very wrong
            // so we bail
            if (iterations > 100000 && iterations > match.index * 3) {
              const err = new Error(
                "potential infinite loop, way more iterations than matches"
              );
              throw err;
            }

            /*
      Why might be find ourselves here?  Only one occasion now.  An end match that was
      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`
      rule sets the end rule to a specific match.  Since the overall mode termination rule that's
      being used to scan the text isn't recompiled that means that any match that LOOKS like
      the end (but is not, because it is not an exact match to the beginning) will
      end up here.  A definite end match, but when `doEndMatch` tries to "reapply"
      the end rule and fails to match, we wind up here, and just silently ignore the end.

      This causes no real harm other than stopping a few times too many.
      */

            modeBuffer += lexeme;
            return lexeme.length;
          }

          const language = getLanguage(languageName);
          if (!language) {
            error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
            throw new Error('Unknown language: "' + languageName + '"');
          }

          const md = compileLanguage(language, { plugins });
          let result = "";
          /** @type {CompiledMode} */
          let top = continuation || md;
          /** @type Record<string,CompiledMode> */
          const continuations = {}; // keep continuations for sub-languages
          const emitter = new options.__emitter(options);
          processContinuations();
          let modeBuffer = "";
          let relevance = 0;
          let index = 0;
          let iterations = 0;
          let resumeScanAtSamePosition = false;

          try {
            top.matcher.considerAll();

            for (;;) {
              iterations++;
              if (resumeScanAtSamePosition) {
                // only regexes not matched previously will now be
                // considered for a potential match
                resumeScanAtSamePosition = false;
              } else {
                top.matcher.considerAll();
              }
              top.matcher.lastIndex = index;

              const match = top.matcher.exec(codeToHighlight);
              // console.log("match", match[0], match.rule && match.rule.begin)

              if (!match) break;

              const beforeMatch = codeToHighlight.substring(index, match.index);
              const processedCount = processLexeme(beforeMatch, match);
              index = match.index + processedCount;
            }
            processLexeme(codeToHighlight.substr(index));
            emitter.closeAllNodes();
            emitter.finalize();
            result = emitter.toHTML();

            return {
              // avoid possible breakage with v10 clients expecting
              // this to always be an integer
              relevance: Math.floor(relevance),
              value: result,
              language: languageName,
              illegal: false,
              emitter: emitter,
              top: top,
            };
          } catch (err) {
            if (err.message && err.message.includes("Illegal")) {
              return {
                illegal: true,
                illegalBy: {
                  msg: err.message,
                  context: codeToHighlight.slice(index - 100, index + 100),
                  mode: err.mode,
                },
                sofar: result,
                relevance: 0,
                value: escape$1(codeToHighlight),
                emitter: emitter,
              };
            } else if (SAFE_MODE) {
              return {
                illegal: false,
                relevance: 0,
                value: escape$1(codeToHighlight),
                emitter: emitter,
                language: languageName,
                top: top,
                errorRaised: err,
              };
            } else {
              throw err;
            }
          }
        }

        /**
         * returns a valid highlight result, without actually doing any actual work,
         * auto highlight starts with this and it's possible for small snippets that
         * auto-detection may not find a better match
         * @param {string} code
         * @returns {HighlightResult}
         */
        function justTextHighlightResult(code) {
          const result = {
            relevance: 0,
            emitter: new options.__emitter(options),
            value: escape$1(code),
            illegal: false,
            top: PLAINTEXT_LANGUAGE,
          };
          result.emitter.addText(code);
          return result;
        }

        /**
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:

  - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)

    @param {string} code
    @param {Array<string>} [languageSubset]
    @returns {AutoHighlightResult}
  */
        function highlightAuto(code, languageSubset) {
          languageSubset =
            languageSubset || options.languages || Object.keys(languages);
          const plaintext = justTextHighlightResult(code);

          const results = languageSubset
            .filter(getLanguage)
            .filter(autoDetection)
            .map((name) => _highlight(name, code, false));
          results.unshift(plaintext); // plaintext is always an option

          const sorted = results.sort((a, b) => {
            // sort base on relevance
            if (a.relevance !== b.relevance) return b.relevance - a.relevance;

            // always award the tie to the base language
            // ie if C++ and Arduino are tied, it's more likely to be C++
            if (a.language && b.language) {
              if (getLanguage(a.language).supersetOf === b.language) {
                return 1;
              } else if (getLanguage(b.language).supersetOf === a.language) {
                return -1;
              }
            }

            // otherwise say they are equal, which has the effect of sorting on
            // relevance while preserving the original ordering - which is how ties
            // have historically been settled, ie the language that comes first always
            // wins in the case of a tie
            return 0;
          });

          const [best, secondBest] = sorted;

          /** @type {AutoHighlightResult} */
          const result = best;
          result.second_best = secondBest;

          return result;
        }

        /**
  Post-processing of the highlighted markup:

  - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers

    @param {string} html
    @returns {string}
  */
        function fixMarkup(html) {
          if (!(options.tabReplace || options.useBR)) {
            return html;
          }

          return html.replace(fixMarkupRe, (match) => {
            if (match === "\n") {
              return options.useBR ? "<br>" : match;
            } else if (options.tabReplace) {
              return match.replace(/\t/g, options.tabReplace);
            }
            return match;
          });
        }

        /**
         * Builds new class name for block given the language name
         *
         * @param {HTMLElement} element
         * @param {string} [currentLang]
         * @param {string} [resultLang]
         */
        function updateClassName(element, currentLang, resultLang) {
          const language = currentLang ? aliases[currentLang] : resultLang;

          element.classList.add("hljs");
          if (language) element.classList.add(language);
        }

        /** @type {HLJSPlugin} */
        const brPlugin = {
          "before:highlightElement": ({ el }) => {
            if (options.useBR) {
              el.innerHTML = el.innerHTML
                .replace(/\n/g, "")
                .replace(/<br[ /]*>/g, "\n");
            }
          },
          "after:highlightElement": ({ result }) => {
            if (options.useBR) {
              result.value = result.value.replace(/\n/g, "<br>");
            }
          },
        };

        const TAB_REPLACE_RE = /^(<[^>]+>|\t)+/gm;
        /** @type {HLJSPlugin} */
        const tabReplacePlugin = {
          "after:highlightElement": ({ result }) => {
            if (options.tabReplace) {
              result.value = result.value.replace(TAB_REPLACE_RE, (m) =>
                m.replace(/\t/g, options.tabReplace)
              );
            }
          },
        };

        /**
         * Applies highlighting to a DOM node containing code. Accepts a DOM node and
         * two optional parameters for fixMarkup.
         *
         * @param {HighlightedHTMLElement} element - the HTML element to highlight
         */
        function highlightElement(element) {
          /** @type HTMLElement */
          let node = null;
          const language = blockLanguage(element);

          if (shouldNotHighlight(language)) return;

          // support for v10 API
          fire("before:highlightElement", { el: element, language: language });

          node = element;
          const text = node.textContent;
          const result = language
            ? highlight(text, { language, ignoreIllegals: true })
            : highlightAuto(text);

          // support for v10 API
          fire("after:highlightElement", { el: element, result, text });

          element.innerHTML = result.value;
          updateClassName(element, language, result.language);
          element.result = {
            language: result.language,
            // TODO: remove with version 11.0
            re: result.relevance,
            relavance: result.relevance,
          };
          if (result.second_best) {
            element.second_best = {
              language: result.second_best.language,
              // TODO: remove with version 11.0
              re: result.second_best.relevance,
              relavance: result.second_best.relevance,
            };
          }
        }

        /**
         * Updates highlight.js global options with the passed options
         *
         * @param {Partial<HLJSOptions>} userOptions
         */
        function configure(userOptions) {
          if (userOptions.useBR) {
            deprecated("10.3.0", "'useBR' will be removed entirely in v11.0");
            deprecated(
              "10.3.0",
              "Please see https://github.com/highlightjs/highlight.js/issues/2559"
            );
          }
          options = inherit$1(options, userOptions);
        }

        /**
         * Highlights to all <pre><code> blocks on a page
         *
         * @type {Function & {called?: boolean}}
         */
        // TODO: remove v12, deprecated
        const initHighlighting = () => {
          if (initHighlighting.called) return;
          initHighlighting.called = true;

          deprecated(
            "10.6.0",
            "initHighlighting() is deprecated.  Use highlightAll() instead."
          );

          const blocks = document.querySelectorAll("pre code");
          blocks.forEach(highlightElement);
        };

        // Higlights all when DOMContentLoaded fires
        // TODO: remove v12, deprecated
        function initHighlightingOnLoad() {
          deprecated(
            "10.6.0",
            "initHighlightingOnLoad() is deprecated.  Use highlightAll() instead."
          );
          wantsHighlight = true;
        }

        let wantsHighlight = false;

        /**
         * auto-highlights all pre>code elements on the page
         */
        function highlightAll() {
          // if we are called too early in the loading process
          if (document.readyState === "loading") {
            wantsHighlight = true;
            return;
          }

          const blocks = document.querySelectorAll("pre code");
          blocks.forEach(highlightElement);
        }

        function boot() {
          // if a highlight was requested before DOM was loaded, do now
          if (wantsHighlight) highlightAll();
        }

        // make sure we are in the browser environment
        if (typeof window !== "undefined" && window.addEventListener) {
          window.addEventListener("DOMContentLoaded", boot, false);
        }

        /**
         * Register a language grammar module
         *
         * @param {string} languageName
         * @param {LanguageFn} languageDefinition
         */
        function registerLanguage(languageName, languageDefinition) {
          let lang = null;
          try {
            lang = languageDefinition(hljs);
          } catch (error$1) {
            error(
              "Language definition for '{}' could not be registered.".replace(
                "{}",
                languageName
              )
            );
            // hard or soft error
            if (!SAFE_MODE) {
              throw error$1;
            } else {
              error(error$1);
            }
            // languages that have serious errors are replaced with essentially a
            // "plaintext" stand-in so that the code blocks will still get normal
            // css classes applied to them - and one bad language won't break the
            // entire highlighter
            lang = PLAINTEXT_LANGUAGE;
          }
          // give it a temporary name if it doesn't have one in the meta-data
          if (!lang.name) lang.name = languageName;
          languages[languageName] = lang;
          lang.rawDefinition = languageDefinition.bind(null, hljs);

          if (lang.aliases) {
            registerAliases(lang.aliases, { languageName });
          }
        }

        /**
         * Remove a language grammar module
         *
         * @param {string} languageName
         */
        function unregisterLanguage(languageName) {
          delete languages[languageName];
          for (const alias of Object.keys(aliases)) {
            if (aliases[alias] === languageName) {
              delete aliases[alias];
            }
          }
        }

        /**
         * @returns {string[]} List of language internal names
         */
        function listLanguages() {
          return Object.keys(languages);
        }

        /**
    intended usage: When one language truly requires another

    Unlike `getLanguage`, this will throw when the requested language
    is not available.

    @param {string} name - name of the language to fetch/require
    @returns {Language | never}
  */
        function requireLanguage(name) {
          deprecated(
            "10.4.0",
            "requireLanguage will be removed entirely in v11."
          );
          deprecated(
            "10.4.0",
            "Please see https://github.com/highlightjs/highlight.js/pull/2844"
          );

          const lang = getLanguage(name);
          if (lang) {
            return lang;
          }

          const err = new Error(
            "The '{}' language is required, but not loaded.".replace("{}", name)
          );
          throw err;
        }

        /**
         * @param {string} name - name of the language to retrieve
         * @returns {Language | undefined}
         */
        function getLanguage(name) {
          name = (name || "").toLowerCase();
          return languages[name] || languages[aliases[name]];
        }

        /**
         *
         * @param {string|string[]} aliasList - single alias or list of aliases
         * @param {{languageName: string}} opts
         */
        function registerAliases(aliasList, { languageName }) {
          if (typeof aliasList === "string") {
            aliasList = [aliasList];
          }
          aliasList.forEach((alias) => {
            aliases[alias.toLowerCase()] = languageName;
          });
        }

        /**
         * Determines if a given language has auto-detection enabled
         * @param {string} name - name of the language
         */
        function autoDetection(name) {
          const lang = getLanguage(name);
          return lang && !lang.disableAutodetect;
        }

        /**
         * Upgrades the old highlightBlock plugins to the new
         * highlightElement API
         * @param {HLJSPlugin} plugin
         */
        function upgradePluginAPI(plugin) {
          // TODO: remove with v12
          if (
            plugin["before:highlightBlock"] &&
            !plugin["before:highlightElement"]
          ) {
            plugin["before:highlightElement"] = (data) => {
              plugin["before:highlightBlock"](
                Object.assign({ block: data.el }, data)
              );
            };
          }
          if (
            plugin["after:highlightBlock"] &&
            !plugin["after:highlightElement"]
          ) {
            plugin["after:highlightElement"] = (data) => {
              plugin["after:highlightBlock"](
                Object.assign({ block: data.el }, data)
              );
            };
          }
        }

        /**
         * @param {HLJSPlugin} plugin
         */
        function addPlugin(plugin) {
          upgradePluginAPI(plugin);
          plugins.push(plugin);
        }

        /**
         *
         * @param {PluginEvent} event
         * @param {any} args
         */
        function fire(event, args) {
          const cb = event;
          plugins.forEach(function (plugin) {
            if (plugin[cb]) {
              plugin[cb](args);
            }
          });
        }

        /**
  Note: fixMarkup is deprecated and will be removed entirely in v11

  @param {string} arg
  @returns {string}
  */
        function deprecateFixMarkup(arg) {
          deprecated("10.2.0", "fixMarkup will be removed entirely in v11.0");
          deprecated(
            "10.2.0",
            "Please see https://github.com/highlightjs/highlight.js/issues/2534"
          );

          return fixMarkup(arg);
        }

        /**
         *
         * @param {HighlightedHTMLElement} el
         */
        function deprecateHighlightBlock(el) {
          deprecated(
            "10.7.0",
            "highlightBlock will be removed entirely in v12.0"
          );
          deprecated("10.7.0", "Please use highlightElement now.");

          return highlightElement(el);
        }

        /* Interface definition */
        Object.assign(hljs, {
          highlight,
          highlightAuto,
          highlightAll,
          fixMarkup: deprecateFixMarkup,
          highlightElement,
          // TODO: Remove with v12 API
          highlightBlock: deprecateHighlightBlock,
          configure,
          initHighlighting,
          initHighlightingOnLoad,
          registerLanguage,
          unregisterLanguage,
          listLanguages,
          getLanguage,
          registerAliases,
          requireLanguage,
          autoDetection,
          inherit: inherit$1,
          addPlugin,
          // plugins for frameworks
          vuePlugin: BuildVuePlugin(hljs).VuePlugin,
        });

        hljs.debugMode = function () {
          SAFE_MODE = false;
        };
        hljs.safeMode = function () {
          SAFE_MODE = true;
        };
        hljs.versionString = version;

        for (const key in MODES) {
          // @ts-ignore
          if (typeof MODES[key] === "object") {
            // @ts-ignore
            deepFreezeEs6(MODES[key]);
          }
        }

        // merge all the modes/regexs into our main object
        Object.assign(hljs, MODES);

        // built-in plugins, likely to be moved out of core in the future
        hljs.addPlugin(brPlugin); // slated to be removed in v11
        hljs.addPlugin(mergeHTMLPlugin);
        hljs.addPlugin(tabReplacePlugin);
        return hljs;
      };

      // export an "instance" of the highlighter
      var highlight = HLJS({});

      module.exports = highlight;

      /***/
    },

    /***/ "1fb5": /***/ function (module, exports, __webpack_require__) {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;

      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

      var code =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }

        // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len;

        var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

        return [validLen, placeHoldersLen];
      }

      // base64 is 4/3 + up to two characters of the original data
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];

        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

        var curByte = 0;

        // if there are placeholders, only get up to the last complete 4 chars
        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

        var i;
        for (i = 0; i < len; i += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 18) |
            (revLookup[b64.charCodeAt(i + 1)] << 12) |
            (revLookup[b64.charCodeAt(i + 2)] << 6) |
            revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = (tmp >> 16) & 0xff;
          arr[curByte++] = (tmp >> 8) & 0xff;
          arr[curByte++] = tmp & 0xff;
        }

        if (placeHoldersLen === 2) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 2) |
            (revLookup[b64.charCodeAt(i + 1)] >> 4);
          arr[curByte++] = tmp & 0xff;
        }

        if (placeHoldersLen === 1) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 10) |
            (revLookup[b64.charCodeAt(i + 1)] << 4) |
            (revLookup[b64.charCodeAt(i + 2)] >> 2);
          arr[curByte++] = (tmp >> 8) & 0xff;
          arr[curByte++] = tmp & 0xff;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return (
          lookup[(num >> 18) & 0x3f] +
          lookup[(num >> 12) & 0x3f] +
          lookup[(num >> 6) & 0x3f] +
          lookup[num & 0x3f]
        );
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i = start; i < end; i += 3) {
          tmp =
            ((uint8[i] << 16) & 0xff0000) +
            ((uint8[i + 1] << 8) & 0xff00) +
            (uint8[i + 2] & 0xff);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (
          var i = 0, len2 = len - extraBytes;
          i < len2;
          i += maxChunkLength
        ) {
          parts.push(
            encodeChunk(
              uint8,
              i,
              i + maxChunkLength > len2 ? len2 : i + maxChunkLength
            )
          );
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(
            lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 0x3f] +
              lookup[(tmp << 2) & 0x3f] +
              "="
          );
        }

        return parts.join("");
      }

      /***/
    },

    /***/ "27bf": /***/ function (module, exports, __webpack_require__) {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.

      module.exports = Transform;

      var Duplex = __webpack_require__("b19a");

      /*<replacement>*/
      var util = Object.create(__webpack_require__("3a7c"));
      util.inherits = __webpack_require__("3fb5");
      /*</replacement>*/

      util.inherits(Transform, Duplex);

      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;

        var cb = ts.writecb;

        if (!cb) {
          return this.emit(
            "error",
            new Error("write callback called multiple times")
          );
        }

        ts.writechunk = null;
        ts.writecb = null;

        if (data != null)
          // single equals check for both `null` and `undefined`
          this.push(data);

        cb(er);

        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);

        Duplex.call(this, options);

        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null,
        };

        // start out asking for a readable event once data is transformed.
        this._readableState.needReadable = true;

        // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.
        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;

          if (typeof options.flush === "function") this._flush = options.flush;
        }

        // When the writable side finishes, then flush out anything remaining.
        this.on("prefinish", prefinish);
      }

      function prefinish() {
        var _this = this;

        if (typeof this._flush === "function") {
          this._flush(function (er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };

      // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.
      Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error("_transform() is not implemented");
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (
            ts.needTransform ||
            rs.needReadable ||
            rs.length < rs.highWaterMark
          )
            this._read(rs.highWaterMark);
        }
      };

      // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.
      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      Transform.prototype._destroy = function (err, cb) {
        var _this2 = this;

        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2);
          _this2.emit("close");
        });
      };

      function done(stream, er, data) {
        if (er) return stream.emit("error", er);

        if (data != null)
          // single equals check for both `null` and `undefined`
          stream.push(data);

        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided
        if (stream._writableState.length)
          throw new Error("Calling transform done when ws.length != 0");

        if (stream._transformState.transforming)
          throw new Error("Calling transform done when still transforming");

        return stream.push(null);
      }

      /***/
    },

    /***/ "2c34": /***/ function (module, exports, __webpack_require__) {
      // extracted by mini-css-extract-plugin
      /***/
    },

    /***/ "2c63": /***/ function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("dc14");

      /***/
    },

    /***/ "2ef0": /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (global, module) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /**
         * @license
         * Lodash <https://lodash.com/>
         * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        (function () {
          /** Used as a safe reference for `undefined` in pre-ES5 environments. */
          var undefined;

          /** Used as the semantic version number. */
          var VERSION = "4.17.21";

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Error message constants. */
          var CORE_ERROR_TEXT =
              "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
            FUNC_ERROR_TEXT = "Expected a function",
            INVALID_TEMPL_VAR_ERROR_TEXT =
              "Invalid `variable` option passed into `_.template`";

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /** Used as the internal argument placeholder. */
          var PLACEHOLDER = "__lodash_placeholder__";

          /** Used to compose bitmasks for cloning. */
          var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** Used to compose bitmasks for function metadata. */
          var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

          /** Used as default options for `_.truncate`. */
          var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = "...";

          /** Used to detect hot functions by number of calls within a span of milliseconds. */
          var HOT_COUNT = 800,
            HOT_SPAN = 16;

          /** Used to indicate the type of lazy iteratees. */
          var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

          /** Used as references for the maximum length and index of an array. */
          var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

          /** Used to associate wrap methods with their bit flags. */
          var wrapFlags = [
            ["ary", WRAP_ARY_FLAG],
            ["bind", WRAP_BIND_FLAG],
            ["bindKey", WRAP_BIND_KEY_FLAG],
            ["curry", WRAP_CURRY_FLAG],
            ["curryRight", WRAP_CURRY_RIGHT_FLAG],
            ["flip", WRAP_FLIP_FLAG],
            ["partial", WRAP_PARTIAL_FLAG],
            ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
            ["rearg", WRAP_REARG_FLAG],
          ];

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            asyncTag = "[object AsyncFunction]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            domExcTag = "[object DOMException]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            nullTag = "[object Null]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            proxyTag = "[object Proxy]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]",
            undefinedTag = "[object Undefined]",
            weakMapTag = "[object WeakMap]",
            weakSetTag = "[object WeakSet]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          /** Used to match empty string literals in compiled template source. */
          var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

          /** Used to match HTML entities and HTML characters. */
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

          /** Used to match template delimiters. */
          var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

          /** Used to match leading whitespace. */
          var reTrimStart = /^\s+/;

          /** Used to match a single whitespace character. */
          var reWhitespace = /\s/;

          /** Used to match wrap detail comments. */
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

          /** Used to match words composed of alphanumeric characters. */
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

          /**
           * Used to validate the `validate` option in `_.template` variable.
           *
           * Forbids characters which could potentially change the meaning of the function argument definition:
           * - "()," (modification of function parameters)
           * - "=" (default value)
           * - "[]{}" (destructuring of function parameters)
           * - "/" (beginning of a comment)
           * - whitespace
           */
          var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Used to match
           * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
           */
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect bad signed hexadecimal string values. */
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

          /** Used to detect binary string values. */
          var reIsBinary = /^0b[01]+$/i;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect octal string values. */
          var reIsOctal = /^0o[0-7]+$/i;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to match Latin Unicode letters (excluding mathematical operators). */
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

          /** Used to ensure capturing order of template delimiters. */
          var reNoMatch = /($^)/;

          /** Used to match unescaped characters in compiled string literals. */
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

          /** Used to compose unicode character classes. */
          var rsAstralRange = "\\ud800-\\udfff",
            rsComboMarksRange = "\\u0300-\\u036f",
            reComboHalfMarksRange = "\\ufe20-\\ufe2f",
            rsComboSymbolsRange = "\\u20d0-\\u20ff",
            rsComboRange =
              rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = "\\u2700-\\u27bf",
            rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
            rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
            rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
            rsPunctuationRange = "\\u2000-\\u206f",
            rsSpaceRange =
              " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
            rsVarRange = "\\ufe0e\\ufe0f",
            rsBreakRange =
              rsMathOpRange +
              rsNonCharRange +
              rsPunctuationRange +
              rsSpaceRange;

          /** Used to compose unicode capture groups. */
          var rsApos = "['\u2019]",
            rsAstral = "[" + rsAstralRange + "]",
            rsBreak = "[" + rsBreakRange + "]",
            rsCombo = "[" + rsComboRange + "]",
            rsDigits = "\\d+",
            rsDingbat = "[" + rsDingbatRange + "]",
            rsLower = "[" + rsLowerRange + "]",
            rsMisc =
              "[^" +
              rsAstralRange +
              rsBreakRange +
              rsDigits +
              rsDingbatRange +
              rsLowerRange +
              rsUpperRange +
              "]",
            rsFitz = "\\ud83c[\\udffb-\\udfff]",
            rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
            rsNonAstral = "[^" + rsAstralRange + "]",
            rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rsUpper = "[" + rsUpperRange + "]",
            rsZWJ = "\\u200d";

          /** Used to compose unicode regexes. */
          var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
            rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
            rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
            rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
            reOptMod = rsModifier + "?",
            rsOptVar = "[" + rsVarRange + "]?",
            rsOptJoin =
              "(?:" +
              rsZWJ +
              "(?:" +
              [rsNonAstral, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsOptVar +
              reOptMod +
              ")*",
            rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
            rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji =
              "(?:" +
              [rsDingbat, rsRegional, rsSurrPair].join("|") +
              ")" +
              rsSeq,
            rsSymbol =
              "(?:" +
              [
                rsNonAstral + rsCombo + "?",
                rsCombo,
                rsRegional,
                rsSurrPair,
                rsAstral,
              ].join("|") +
              ")";

          /** Used to match apostrophes. */
          var reApos = RegExp(rsApos, "g");

          /**
           * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
           * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
           */
          var reComboMark = RegExp(rsCombo, "g");

          /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
          var reUnicode = RegExp(
            rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,
            "g"
          );

          /** Used to match complex or compound words. */
          var reUnicodeWord = RegExp(
            [
              rsUpper +
                "?" +
                rsLower +
                "+" +
                rsOptContrLower +
                "(?=" +
                [rsBreak, rsUpper, "$"].join("|") +
                ")",
              rsMiscUpper +
                "+" +
                rsOptContrUpper +
                "(?=" +
                [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
                ")",
              rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
              rsUpper + "+" + rsOptContrUpper,
              rsOrdUpper,
              rsOrdLower,
              rsDigits,
              rsEmoji,
            ].join("|"),
            "g"
          );

          /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
          var reHasUnicode = RegExp(
            "[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]"
          );

          /** Used to detect strings that need a more robust regexp to match words. */
          var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

          /** Used to assign default `context` object properties. */
          var contextProps = [
            "Array",
            "Buffer",
            "DataView",
            "Date",
            "Error",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Math",
            "Object",
            "Promise",
            "RegExp",
            "Set",
            "String",
            "Symbol",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "WeakMap",
            "_",
            "clearTimeout",
            "isFinite",
            "parseInt",
            "setTimeout",
          ];

          /** Used to make template sourceURLs easier to identify. */
          var templateCounter = -1;

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[
            float64Tag
          ] = typedArrayTags[int8Tag] = typedArrayTags[
            int16Tag
          ] = typedArrayTags[int32Tag] = typedArrayTags[
            uint8Tag
          ] = typedArrayTags[uint8ClampedTag] = typedArrayTags[
            uint16Tag
          ] = typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
            arrayBufferTag
          ] = typedArrayTags[boolTag] = typedArrayTags[
            dataViewTag
          ] = typedArrayTags[dateTag] = typedArrayTags[
            errorTag
          ] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[
            numberTag
          ] = typedArrayTags[objectTag] = typedArrayTags[
            regexpTag
          ] = typedArrayTags[setTag] = typedArrayTags[
            stringTag
          ] = typedArrayTags[weakMapTag] = false;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
            arrayBufferTag
          ] = cloneableTags[dataViewTag] = cloneableTags[
            boolTag
          ] = cloneableTags[dateTag] = cloneableTags[
            float32Tag
          ] = cloneableTags[float64Tag] = cloneableTags[
            int8Tag
          ] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[
            mapTag
          ] = cloneableTags[numberTag] = cloneableTags[
            objectTag
          ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
            stringTag
          ] = cloneableTags[symbolTag] = cloneableTags[
            uint8Tag
          ] = cloneableTags[uint8ClampedTag] = cloneableTags[
            uint16Tag
          ] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
            weakMapTag
          ] = false;

          /** Used to map Latin Unicode letters to basic Latin letters. */
          var deburredLetters = {
            // Latin-1 Supplement block.
            À: "A",
            Á: "A",
            Â: "A",
            Ã: "A",
            Ä: "A",
            Å: "A",
            à: "a",
            á: "a",
            â: "a",
            ã: "a",
            ä: "a",
            å: "a",
            Ç: "C",
            ç: "c",
            Ð: "D",
            ð: "d",
            È: "E",
            É: "E",
            Ê: "E",
            Ë: "E",
            è: "e",
            é: "e",
            ê: "e",
            ë: "e",
            Ì: "I",
            Í: "I",
            Î: "I",
            Ï: "I",
            ì: "i",
            í: "i",
            î: "i",
            ï: "i",
            Ñ: "N",
            ñ: "n",
            Ò: "O",
            Ó: "O",
            Ô: "O",
            Õ: "O",
            Ö: "O",
            Ø: "O",
            ò: "o",
            ó: "o",
            ô: "o",
            õ: "o",
            ö: "o",
            ø: "o",
            Ù: "U",
            Ú: "U",
            Û: "U",
            Ü: "U",
            ù: "u",
            ú: "u",
            û: "u",
            ü: "u",
            Ý: "Y",
            ý: "y",
            ÿ: "y",
            Æ: "Ae",
            æ: "ae",
            Þ: "Th",
            þ: "th",
            ß: "ss",
            // Latin Extended-A block.
            Ā: "A",
            Ă: "A",
            Ą: "A",
            ā: "a",
            ă: "a",
            ą: "a",
            Ć: "C",
            Ĉ: "C",
            Ċ: "C",
            Č: "C",
            ć: "c",
            ĉ: "c",
            ċ: "c",
            č: "c",
            Ď: "D",
            Đ: "D",
            ď: "d",
            đ: "d",
            Ē: "E",
            Ĕ: "E",
            Ė: "E",
            Ę: "E",
            Ě: "E",
            ē: "e",
            ĕ: "e",
            ė: "e",
            ę: "e",
            ě: "e",
            Ĝ: "G",
            Ğ: "G",
            Ġ: "G",
            Ģ: "G",
            ĝ: "g",
            ğ: "g",
            ġ: "g",
            ģ: "g",
            Ĥ: "H",
            Ħ: "H",
            ĥ: "h",
            ħ: "h",
            Ĩ: "I",
            Ī: "I",
            Ĭ: "I",
            Į: "I",
            İ: "I",
            ĩ: "i",
            ī: "i",
            ĭ: "i",
            į: "i",
            ı: "i",
            Ĵ: "J",
            ĵ: "j",
            Ķ: "K",
            ķ: "k",
            ĸ: "k",
            Ĺ: "L",
            Ļ: "L",
            Ľ: "L",
            Ŀ: "L",
            Ł: "L",
            ĺ: "l",
            ļ: "l",
            ľ: "l",
            ŀ: "l",
            ł: "l",
            Ń: "N",
            Ņ: "N",
            Ň: "N",
            Ŋ: "N",
            ń: "n",
            ņ: "n",
            ň: "n",
            ŋ: "n",
            Ō: "O",
            Ŏ: "O",
            Ő: "O",
            ō: "o",
            ŏ: "o",
            ő: "o",
            Ŕ: "R",
            Ŗ: "R",
            Ř: "R",
            ŕ: "r",
            ŗ: "r",
            ř: "r",
            Ś: "S",
            Ŝ: "S",
            Ş: "S",
            Š: "S",
            ś: "s",
            ŝ: "s",
            ş: "s",
            š: "s",
            Ţ: "T",
            Ť: "T",
            Ŧ: "T",
            ţ: "t",
            ť: "t",
            ŧ: "t",
            Ũ: "U",
            Ū: "U",
            Ŭ: "U",
            Ů: "U",
            Ű: "U",
            Ų: "U",
            ũ: "u",
            ū: "u",
            ŭ: "u",
            ů: "u",
            ű: "u",
            ų: "u",
            Ŵ: "W",
            ŵ: "w",
            Ŷ: "Y",
            ŷ: "y",
            Ÿ: "Y",
            Ź: "Z",
            Ż: "Z",
            Ž: "Z",
            ź: "z",
            ż: "z",
            ž: "z",
            Ĳ: "IJ",
            ĳ: "ij",
            Œ: "Oe",
            œ: "oe",
            ŉ: "'n",
            ſ: "s",
          };

          /** Used to map characters to HTML entities. */
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
          };

          /** Used to map HTML entities to characters. */
          var htmlUnescapes = {
            "&amp;": "&",
            "&lt;": "<",
            "&gt;": ">",
            "&quot;": '"',
            "&#39;": "'",
          };

          /** Used to escape characters for inclusion in compiled string literals. */
          var stringEscapes = {
            "\\": "\\",
            "'": "'",
            "\n": "n",
            "\r": "r",
            "\u2028": "u2028",
            "\u2029": "u2029",
          };

          /** Built-in method references without a dependency on `root`. */
          var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          /** Detect free variable `exports`. */
          var freeExports = true && exports && !exports.nodeType && exports;

          /** Detect free variable `module`. */
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /** Detect free variable `process` from Node.js. */
          var freeProcess = moduleExports && freeGlobal.process;

          /** Used to access faster Node.js helpers. */
          var nodeUtil = (function () {
            try {
              // Use `util.types` for Node.js 10+.
              var types =
                freeModule &&
                freeModule.require &&
                freeModule.require("util").types;

              if (types) {
                return types;
              }

              // Legacy `process.binding('util')` for Node.js < 10.
              return (
                freeProcess &&
                freeProcess.binding &&
                freeProcess.binding("util")
              );
            } catch (e) {}
          })();

          /* Node.js helper references. */
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /*--------------------------------------------------------------------------*/

          /**
           * A faster alternative to `Function#apply`, this function invokes `func`
           * with the `this` binding of `thisArg` and the arguments of `args`.
           *
           * @private
           * @param {Function} func The function to invoke.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} args The arguments to invoke `func` with.
           * @returns {*} Returns the result of `func`.
           */
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }

          /**
           * A specialized version of `baseAggregator` for arrays.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.forEachRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * A specialized version of `_.every` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           */
          function arrayEvery(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }

          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          /**
           * A specialized version of `_.includes` for arrays without support for
           * specifying an index to search from.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }

          /**
           * This function is like `arrayIncludes` except that it accepts a comparator.
           *
           * @private
           * @param {Array} [array] The array to inspect.
           * @param {*} target The value to search for.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {boolean} Returns `true` if `target` is found, else `false`.
           */
          function arrayIncludesWith(array, value, comparator) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }

          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array == null ? 0 : array.length;

            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.reduceRight` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the last element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }

          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          /**
           * Gets the size of an ASCII `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          var asciiSize = baseProperty("length");

          /**
           * Converts an ASCII `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function asciiToArray(string) {
            return string.split("");
          }

          /**
           * Splits an ASCII `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }

          /**
           * The base implementation of methods like `_.findKey` and `_.findLastKey`,
           * without support for iteratee shorthands, which iterates over `collection`
           * using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the found element or its key, else `undefined`.
           */
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
              if (predicate(value, key, collection)) {
                result = key;
                return false;
              }
            });
            return result;
          }

          /**
           * The base implementation of `_.findIndex` and `_.findLastIndex` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} predicate The function invoked per iteration.
           * @param {number} fromIndex The index to search from.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOf(array, value, fromIndex) {
            return value === value
              ? strictIndexOf(array, value, fromIndex)
              : baseFindIndex(array, baseIsNaN, fromIndex);
          }

          /**
           * This function is like `baseIndexOf` except that it accepts a comparator.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @param {Function} comparator The comparator invoked per element.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.isNaN` without support for number objects.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           */
          function baseIsNaN(value) {
            return value !== value;
          }

          /**
           * The base implementation of `_.mean` and `_.meanBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the mean.
           */
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
          }

          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function (object) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.propertyOf` without support for deep paths.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyOf(object) {
            return function (key) {
              return object == null ? undefined : object[key];
            };
          }

          /**
           * The base implementation of `_.reduce` and `_.reduceRight`, without support
           * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} accumulator The initial value.
           * @param {boolean} initAccum Specify using the first or last element of
           *  `collection` as the initial value.
           * @param {Function} eachFunc The function to iterate over `collection`.
           * @returns {*} Returns the accumulated value.
           */
          function baseReduce(
            collection,
            iteratee,
            accumulator,
            initAccum,
            eachFunc
          ) {
            eachFunc(collection, function (value, index, collection) {
              accumulator = initAccum
                ? ((initAccum = false), value)
                : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }

          /**
           * The base implementation of `_.sortBy` which uses `comparer` to define the
           * sort order of `array` and replaces criteria objects with their corresponding
           * values.
           *
           * @private
           * @param {Array} array The array to sort.
           * @param {Function} comparer The function to define sort order.
           * @returns {Array} Returns `array`.
           */
          function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }

          /**
           * The base implementation of `_.sum` and `_.sumBy` without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {number} Returns the sum.
           */
          function baseSum(array, iteratee) {
            var result,
              index = -1,
              length = array.length;

            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined) {
                result = result === undefined ? current : result + current;
              }
            }
            return result;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
           * of key-value pairs for `object` corresponding to the property names of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the key-value pairs.
           */
          function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
              return [key, object[key]];
            });
          }

          /**
           * The base implementation of `_.trim`.
           *
           * @private
           * @param {string} string The string to trim.
           * @returns {string} Returns the trimmed string.
           */
          function baseTrim(string) {
            return string
              ? string
                  .slice(0, trimmedEndIndex(string) + 1)
                  .replace(reTrimStart, "")
              : string;
          }

          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function (value) {
              return func(value);
            };
          }

          /**
           * The base implementation of `_.values` and `_.valuesIn` which creates an
           * array of `object` property values corresponding to the property names
           * of `props`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} props The property names to get values for.
           * @returns {Object} Returns the array of property values.
           */
          function baseValues(object, props) {
            return arrayMap(props, function (key) {
              return object[key];
            });
          }

          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          /**
           * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the first unmatched string symbol.
           */
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
              length = strSymbols.length;

            while (
              ++index < length &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
           * that is not found in the character symbols.
           *
           * @private
           * @param {Array} strSymbols The string symbols to inspect.
           * @param {Array} chrSymbols The character symbols to find.
           * @returns {number} Returns the index of the last unmatched string symbol.
           */
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (
              index-- &&
              baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
            ) {}
            return index;
          }

          /**
           * Gets the number of `placeholder` occurrences in `array`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} placeholder The placeholder to search for.
           * @returns {number} Returns the placeholder count.
           */
          function countHolders(array, placeholder) {
            var length = array.length,
              result = 0;

            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }

          /**
           * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
           * letters to basic Latin letters.
           *
           * @private
           * @param {string} letter The matched letter to deburr.
           * @returns {string} Returns the deburred letter.
           */
          var deburrLetter = basePropertyOf(deburredLetters);

          /**
           * Used by `_.escape` to convert characters to HTML entities.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          var escapeHtmlChar = basePropertyOf(htmlEscapes);

          /**
           * Used by `_.template` to escape characters for inclusion in compiled string literals.
           *
           * @private
           * @param {string} chr The matched character to escape.
           * @returns {string} Returns the escaped character.
           */
          function escapeStringChar(chr) {
            return "\\" + stringEscapes[chr];
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `string` contains Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a symbol is found, else `false`.
           */
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }

          /**
           * Checks if `string` contains a word composed of Unicode symbols.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {boolean} Returns `true` if a word is found, else `false`.
           */
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }

          /**
           * Converts `iterator` to an array.
           *
           * @private
           * @param {Object} iterator The iterator to convert.
           * @returns {Array} Returns the converted array.
           */
          function iteratorToArray(iterator) {
            var data,
              result = [];

            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          /**
           * Replaces all `placeholder` elements in `array` with an internal placeholder
           * and returns an array of their indexes.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {*} placeholder The placeholder to replace.
           * @returns {Array} Returns the new array of placeholder indexes.
           */
          function replaceHolders(array, placeholder) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          /**
           * Converts `set` to its value-value pairs.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the value-value pairs.
           */
          function setToPairs(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = [value, value];
            });
            return result;
          }

          /**
           * A specialized version of `_.indexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
              length = array.length;

            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }

          /**
           * A specialized version of `_.lastIndexOf` which performs strict equality
           * comparisons of values, i.e. `===`.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} fromIndex The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }

          /**
           * Gets the number of symbols in `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the string size.
           */
          function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
          }

          /**
           * Converts `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function stringToArray(string) {
            return hasUnicode(string)
              ? unicodeToArray(string)
              : asciiToArray(string);
          }

          /**
           * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
           * character of `string`.
           *
           * @private
           * @param {string} string The string to inspect.
           * @returns {number} Returns the index of the last non-whitespace character.
           */
          function trimmedEndIndex(string) {
            var index = string.length;

            while (index-- && reWhitespace.test(string.charAt(index))) {}
            return index;
          }

          /**
           * Used by `_.unescape` to convert HTML entities to characters.
           *
           * @private
           * @param {string} chr The matched character to unescape.
           * @returns {string} Returns the unescaped character.
           */
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

          /**
           * Gets the size of a Unicode `string`.
           *
           * @private
           * @param {string} string The string inspect.
           * @returns {number} Returns the string size.
           */
          function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }

          /**
           * Converts a Unicode `string` to an array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the converted array.
           */
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }

          /**
           * Splits a Unicode `string` into an array of its words.
           *
           * @private
           * @param {string} The string to inspect.
           * @returns {Array} Returns the words of `string`.
           */
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }

          /*--------------------------------------------------------------------------*/

          /**
           * Create a new pristine `lodash` function using the `context` object.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Util
           * @param {Object} [context=root] The context object.
           * @returns {Function} Returns a new `lodash` function.
           * @example
           *
           * _.mixin({ 'foo': _.constant('foo') });
           *
           * var lodash = _.runInContext();
           * lodash.mixin({ 'bar': lodash.constant('bar') });
           *
           * _.isFunction(_.foo);
           * // => true
           * _.isFunction(_.bar);
           * // => false
           *
           * lodash.isFunction(lodash.foo);
           * // => false
           * lodash.isFunction(lodash.bar);
           * // => true
           *
           * // Create a suped-up `defer` in Node.js.
           * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
           */
          var runInContext = function runInContext(context) {
            context =
              context == null
                ? root
                : _.defaults(
                    root.Object(),
                    context,
                    _.pick(root, contextProps)
                  );

            /** Built-in constructor references. */
            var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context["__core-js_shared__"];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
              var uid = /[^.]+$/.exec(
                (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) ||
                  ""
              );
              return uid ? "Symbol(src)_1." + uid : "";
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
              "^" +
                funcToString
                  .call(hasOwnProperty)
                  .replace(reRegExpChar, "\\$&")
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    "$1.*?"
                  ) +
                "$"
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            var defineProperty = (function () {
              try {
                var func = getNative(Object, "defineProperty");
                func({}, "", {});
                return func;
              } catch (e) {}
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout =
                context.clearTimeout !== root.clearTimeout &&
                context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout =
                context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, "DataView"),
              Map = getNative(context, "Map"),
              Promise = getNative(context, "Promise"),
              Set = getNative(context, "Set"),
              WeakMap = getNative(context, "WeakMap"),
              nativeCreate = getNative(Object, "create");

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
              if (
                isObjectLike(value) &&
                !isArray(value) &&
                !(value instanceof LazyWrapper)
              ) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty.call(value, "__wrapped__")) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
              function object() {}
              return function (proto) {
                if (!isObject(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
              };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
              // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
              /**
               * Used to detect `data` property values to be HTML-escaped.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              escape: reEscape,

              /**
               * Used to detect code to be evaluated.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              evaluate: reEvaluate,

              /**
               * Used to detect `data` property values to inject.
               *
               * @memberOf _.templateSettings
               * @type {RegExp}
               */
              interpolate: reInterpolate,

              /**
               * Used to reference the data object in the template text.
               *
               * @memberOf _.templateSettings
               * @type {string}
               */
              variable: "",

              /**
               * Used to import variables into the compiled template.
               *
               * @memberOf _.templateSettings
               * @type {Object}
               */
              imports: {
                /**
                 * A reference to the `lodash` function.
                 *
                 * @memberOf _.templateSettings.imports
                 * @type {Function}
                 */
                _: lodash,
              },
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
              var result = new LazyWrapper(this.__wrapped__);
              result.__actions__ = copyArray(this.__actions__);
              result.__dir__ = this.__dir__;
              result.__filtered__ = this.__filtered__;
              result.__iteratees__ = copyArray(this.__iteratees__);
              result.__takeCount__ = this.__takeCount__;
              result.__views__ = copyArray(this.__views__);
              return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
              if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
              } else {
                result = this.clone();
                result.__dir__ *= -1;
              }
              return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
              var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : start - 1,
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

              if (
                !isArr ||
                (!isRight && arrLength == length && takeCount == length)
              ) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result = [];

              outer: while (length-- && resIndex < takeCount) {
                index += dir;

                var iterIndex = -1,
                  value = array[index];

                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result[resIndex++] = value;
              }
              return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = nativeCreate ? nativeCreate(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate
                ? data[key] !== undefined
                : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] =
                nativeCreate && value === undefined ? HASH_UNDEFINED : value;
              return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype["delete"] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype["delete"] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                hash: new Hash(),
                map: new (Map || ListCache)(),
                string: new Hash(),
              };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = getMapData(this, key)["delete"](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype["delete"] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
              var index = -1,
                length = values == null ? 0 : values.length;

              this.__data__ = new MapCache();
              while (++index < length) {
                this.add(values[index]);
              }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED);
              return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
              return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
              var data = (this.__data__ = new ListCache(entries));
              this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
              this.__data__ = new ListCache();
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
              var data = this.__data__,
                result = data["delete"](key);

              this.size = data.size;
              return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
              return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
              return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype["delete"] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

              for (var key in value) {
                if (
                  (inherited || hasOwnProperty.call(value, key)) &&
                  !(
                    skipIndexes &&
                    // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == "length" ||
                      // Node.js 0.10 has enumerable non-index properties on buffers.
                      (isBuff && (key == "offset" || key == "parent")) ||
                      // PhantomJS 2 has enumerable non-index properties on typed arrays.
                      (isType &&
                        (key == "buffer" ||
                          key == "byteLength" ||
                          key == "byteOffset")) ||
                      // Skip index properties.
                      isIndex(key, length))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
              return shuffleSelf(
                copyArray(array),
                baseClamp(n, 0, array.length)
              );
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
              if (
                (value !== undefined && !eq(object[key], value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (
                !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                (value === undefined && !(key in object))
              ) {
                baseAssignValue(object, key, value);
              }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
              baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
                });
              } else {
                object[key] = value;
              }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
              var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

              while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
              }
              return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

              if (customizer) {
                result = object
                  ? customizer(value, key, object, stack)
                  : customizer(value);
              }
              if (result !== undefined) {
                return result;
              }
              if (!isObject(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result);
                }
              } else {
                var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

                if (isBuffer(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                  result = isFlat || isFunc ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat
                      ? copySymbolsIn(value, baseAssignIn(result, value))
                      : copySymbols(value, baseAssign(result, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result = initCloneByTag(value, tag, isDeep);
                }
              }
              // Check for circular references and return its corresponding clone.
              stack || (stack = new Stack());
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result);

              if (isSet(value)) {
                value.forEach(function (subValue) {
                  result.add(
                    baseClone(
                      subValue,
                      bitmask,
                      customizer,
                      subValue,
                      value,
                      stack
                    )
                  );
                });
              } else if (isMap(value)) {
                value.forEach(function (subValue, key) {
                  result.set(
                    key,
                    baseClone(subValue, bitmask, customizer, key, value, stack)
                  );
                });
              }

              var keysFunc = isFull
                ? isFlat
                  ? getAllKeysIn
                  : getAllKeys
                : isFlat
                ? keysIn
                : keys;

              var props = isArr ? undefined : keysFunc(value);
              arrayEach(props || value, function (subValue, key) {
                if (props) {
                  key = subValue;
                  subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(
                  result,
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                );
              });
              return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
              var props = keys(source);
              return function (object) {
                return baseConformsTo(object, source, props);
              };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (length--) {
                var key = props[length],
                  predicate = source[key],
                  value = object[key];

                if (
                  (value === undefined && !(key in object)) ||
                  !predicate(value)
                ) {
                  return false;
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return setTimeout(function () {
                func.apply(undefined, args);
              }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

              if (!length) {
                return result;
              }
              if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
              }
              if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
              } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result.push(value);
                } else if (!includes(values, computed, comparator)) {
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
              var result = true;
              baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
              });
              return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
              var index = -1,
                length = array.length;

              while (++index < length) {
                var value = array[index],
                  current = iteratee(value);

                if (
                  current != null &&
                  (computed === undefined
                    ? current === current && !isSymbol(current)
                    : comparator(current, computed))
                ) {
                  var computed = current,
                    result = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
              var length = array.length;

              start = toInteger(start);
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end === undefined || end > length ? length : toInteger(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
              var result = [];
              baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                  result.push(value);
                }
              });
              return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
              var index = -1,
                length = array.length;

              predicate || (predicate = isFlattenable);
              result || (result = []);

              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                  } else {
                    arrayPush(result, value);
                  }
                } else if (!isStrict) {
                  result[result.length] = value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
              return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
              return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
              return arrayFilter(props, function (key) {
                return isFunction(object[key]);
              });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
              path = castPath(path, object);

              var index = 0,
                length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return index && index == length ? object : undefined;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result = keysFunc(object);
              return isArray(object)
                ? result
                : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object(value)
                ? getRawTag(value)
                : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
              return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
              return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
              return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
              return (
                number >= nativeMin(start, end) &&
                number < nativeMax(start, end)
              );
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
              var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                  array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] =
                  !comparator &&
                  (iteratee || (length >= 120 && array.length >= 120))
                    ? new SetCache(othIndex && array)
                    : undefined;
              }
              array = arrays[0];

              var index = -1,
                seen = caches[0];

              outer: while (++index < length && result.length < maxLength) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (
                  !(seen
                    ? cacheHas(seen, computed)
                    : includes(result, computed, comparator))
                ) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (
                      !(cache
                        ? cacheHas(cache, computed)
                        : includes(arrays[othIndex], computed, comparator))
                    ) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
              baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
              });
              return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (
                value == null ||
                other == null ||
                (!isObjectLike(value) && !isObjectLike(other))
              ) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(
                value,
                other,
                bitmask,
                customizer,
                baseIsEqual,
                stack
              );
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);

              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;

              var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

              if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object)
                  ? equalArrays(
                      object,
                      other,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    )
                  : equalByTag(
                      object,
                      other,
                      objTag,
                      bitmask,
                      customizer,
                      equalFunc,
                      stack
                    );
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped =
                    objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                  othIsWrapped =
                    othIsObj && hasOwnProperty.call(other, "__wrapped__");

                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;

                  stack || (stack = new Stack());
                  return equalFunc(
                    objUnwrapped,
                    othUnwrapped,
                    bitmask,
                    customizer,
                    stack
                  );
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack());
              return equalObjects(
                object,
                other,
                bitmask,
                customizer,
                equalFunc,
                stack
              );
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

              if (object == null) {
                return !length;
              }
              object = Object(object);
              while (index--) {
                var data = matchData[index];
                if (
                  noCustomizer && data[2]
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                ) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

                if (noCustomizer && data[2]) {
                  if (objValue === undefined && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack();
                  if (customizer) {
                    var result = customizer(
                      objValue,
                      srcValue,
                      key,
                      object,
                      source,
                      stack
                    );
                  }
                  if (
                    !(result === undefined
                      ? baseIsEqual(
                          srcValue,
                          objValue,
                          COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                          customizer,
                          stack
                        )
                      : result)
                  ) {
                    return false;
                  }
                }
              }
              return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }
              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
              return (
                isObjectLike(value) &&
                isLength(value.length) &&
                !!typedArrayTags[baseGetTag(value)]
              );
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
              // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
              // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
              if (typeof value == "function") {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == "object") {
                return isArray(value)
                  ? baseMatchesProperty(value[0], value[1])
                  : baseMatches(value);
              }
              return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result = [];
              for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != "constructor") {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
              if (!isObject(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object),
                result = [];

              for (var key in object) {
                if (
                  !(
                    key == "constructor" &&
                    (isProto || !hasOwnProperty.call(object, key))
                  )
                ) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
              return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
              var index = -1,
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
              });
              return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(
                  matchData[0][0],
                  matchData[0][1]
                );
              }
              return function (object) {
                return (
                  object === source || baseIsMatch(object, source, matchData)
                );
              };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
              if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue
                  ? hasIn(object, path)
                  : baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                    );
              };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(
                source,
                function (srcValue, key) {
                  stack || (stack = new Stack());
                  if (isObject(srcValue)) {
                    baseMergeDeep(
                      object,
                      source,
                      key,
                      srcIndex,
                      baseMerge,
                      customizer,
                      stack
                    );
                  } else {
                    var newValue = customizer
                      ? customizer(
                          safeGet(object, key),
                          srcValue,
                          key + "",
                          object,
                          source,
                          stack
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                  }
                },
                keysIn
              );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(
              object,
              source,
              key,
              srcIndex,
              mergeFunc,
              customizer,
              stack
            ) {
              var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer
                ? customizer(
                    objValue,
                    srcValue,
                    key + "",
                    object,
                    source,
                    stack
                  )
                : undefined;

              var isCommon = newValue === undefined;

              if (isCommon) {
                var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  } else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  } else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  } else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  } else {
                    newValue = [];
                  }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  } else if (!isObject(objValue) || isFunction(objValue)) {
                    newValue = initCloneObject(srcValue);
                  }
                } else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
              if (iteratees.length) {
                iteratees = arrayMap(iteratees, function (iteratee) {
                  if (isArray(iteratee)) {
                    return function (value) {
                      return baseGet(
                        value,
                        iteratee.length === 1 ? iteratee[0] : iteratee
                      );
                    };
                  }
                  return iteratee;
                });
              } else {
                iteratees = [identity];
              }

              var index = -1;
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

              var result = baseMap(collection, function (
                value,
                key,
                collection
              ) {
                var criteria = arrayMap(iteratees, function (iteratee) {
                  return iteratee(value);
                });
                return { criteria: criteria, index: ++index, value: value };
              });

              return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
              });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
              return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
              });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
              var index = -1,
                length = paths.length,
                result = {};

              while (++index < length) {
                var path = paths[index],
                  value = baseGet(object, path);

                if (predicate(value, path)) {
                  baseSet(result, castPath(path, object), value);
                }
              }
              return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
              return function (object) {
                return baseGet(object, path);
              };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
              var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

              if (array === values) {
                values = copyArray(values);
              }
              if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
              }
              while (++index < length) {
                var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

                while (
                  (fromIndex = indexOf(seen, computed, fromIndex, comparator)) >
                  -1
                ) {
                  if (seen !== array) {
                    splice.call(seen, fromIndex, 1);
                  }
                  splice.call(array, fromIndex, 1);
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0,
                lastIndex = length - 1;

              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
              var result = "";
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
              }
              // Leverage the exponentiation by squaring algorithm for a faster repeat.
              // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
              do {
                if (n % 2) {
                  result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);

              return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + "");
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
              return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                  newValue = value;

                if (
                  key === "__proto__" ||
                  key === "constructor" ||
                  key === "prototype"
                ) {
                  return object;
                }

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer
                    ? customizer(objValue, key, nested)
                    : undefined;
                  if (newValue === undefined) {
                    newValue = isObject(objValue)
                      ? objValue
                      : isIndex(path[index + 1])
                      ? []
                      : {};
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
              ? identity
              : function (func, data) {
                  metaMap.set(func, data);
                  return func;
                };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
              ? identity
              : function (func, string) {
                  return defineProperty(func, "toString", {
                    configurable: true,
                    enumerable: false,
                    value: constant(string),
                    writable: true,
                  });
                };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
              var index = -1,
                length = array.length;

              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : (end - start) >>> 0;
              start >>>= 0;

              var result = Array(length);
              while (++index < length) {
                result[index] = array[index + start];
              }
              return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
              var result;

              baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
              });
              return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
              var low = 0,
                high = array == null ? low : array.length;

              if (
                typeof value == "number" &&
                value === value &&
                high <= HALF_MAX_ARRAY_LENGTH
              ) {
                while (low < high) {
                  var mid = (low + high) >>> 1,
                    computed = array[mid];

                  if (
                    computed !== null &&
                    !isSymbol(computed) &&
                    (retHighest ? computed <= value : computed < value)
                  ) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
              var low = 0,
                high = array == null ? 0 : array.length;
              if (high === 0) {
                return 0;
              }

              value = iteratee(value);
              var valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

              while (low < high) {
                var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow =
                    othIsReflexive &&
                    othIsDefined &&
                    !othIsNull &&
                    (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
              var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                if (!index || !eq(computed, seen)) {
                  var seen = computed;
                  result[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == "string") {
                return value;
              }
              if (isArray(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + "";
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
              var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

              if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
              } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                  return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
              } else {
                seen = iteratee ? [] : result;
              }
              outer: while (++index < length) {
                var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee) {
                    seen.push(computed);
                  }
                  result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                  if (seen !== result) {
                    seen.push(computed);
                  }
                  result.push(value);
                }
              }
              return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(
                object,
                path,
                updater(baseGet(object, path)),
                customizer
              );
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length,
                index = fromRight ? length : -1;

              while (
                (fromRight ? index-- : ++index < length) &&
                predicate(array[index], index, array)
              ) {}

              return isDrop
                ? baseSlice(
                    array,
                    fromRight ? 0 : index,
                    fromRight ? index + 1 : length
                  )
                : baseSlice(
                    array,
                    fromRight ? index + 1 : 0,
                    fromRight ? length : index
                  );
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
              var result = value;
              if (result instanceof LazyWrapper) {
                result = result.value();
              }
              return arrayReduce(
                actions,
                function (result, action) {
                  return action.func.apply(
                    action.thisArg,
                    arrayPush([result], action.args)
                  );
                },
                result
              );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1,
                result = Array(length);

              while (++index < length) {
                var array = arrays[index],
                  othIndex = -1;

                while (++othIndex < length) {
                  if (othIndex != index) {
                    result[index] = baseDifference(
                      result[index] || array,
                      arrays[othIndex],
                      iteratee,
                      comparator
                    );
                  }
                }
              }
              return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
              var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

              while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
              }
              return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
              return typeof value == "function" ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey(value, object)
                ? [value]
                : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined ? length : end;
              return !start && end >= length
                ? array
                : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
              ctxClearTimeout ||
              function (id) {
                return root.clearTimeout(id);
              };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length,
                result = allocUnsafe
                  ? allocUnsafe(length)
                  : new buffer.constructor(length);

              buffer.copy(result);
              return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result).set(new Uint8Array(arrayBuffer));
              return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(dataView.buffer)
                : dataView.buffer;
              return new dataView.constructor(
                buffer,
                dataView.byteOffset,
                dataView.byteLength
              );
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
              var result = new regexp.constructor(
                regexp.source,
                reFlags.exec(regexp)
              );
              result.lastIndex = regexp.lastIndex;
              return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep
                ? cloneArrayBuffer(typedArray.buffer)
                : typedArray.buffer;
              return new typedArray.constructor(
                buffer,
                typedArray.byteOffset,
                typedArray.length
              );
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);

                var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

                if (
                  (!othIsNull &&
                    !othIsSymbol &&
                    !valIsSymbol &&
                    value > other) ||
                  (valIsSymbol &&
                    othIsDefined &&
                    othIsReflexive &&
                    !othIsNull &&
                    !othIsSymbol) ||
                  (valIsNull && othIsDefined && othIsReflexive) ||
                  (!valIsDefined && othIsReflexive) ||
                  !valIsReflexive
                ) {
                  return 1;
                }
                if (
                  (!valIsNull &&
                    !valIsSymbol &&
                    !othIsSymbol &&
                    value < other) ||
                  (othIsSymbol &&
                    valIsDefined &&
                    valIsReflexive &&
                    !valIsNull &&
                    !valIsSymbol) ||
                  (othIsNull && valIsDefined && valIsReflexive) ||
                  (!othIsDefined && valIsReflexive) ||
                  !othIsReflexive
                ) {
                  return -1;
                }
              }
              return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
              var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

              while (++index < length) {
                var result = compareAscending(
                  objCriteria[index],
                  othCriteria[index]
                );
                if (result) {
                  if (index >= ordersLength) {
                    return result;
                  }
                  var order = orders[index];
                  return result * (order == "desc" ? -1 : 1);
                }
              }
              // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
              // that causes it, under certain circumstances, to provide the same value for
              // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
              // for more details.
              //
              // This also ensures a stable sort in V8 and other engines.
              // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
              return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

              while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
              }
              return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

              while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
              var index = -1,
                length = source.length;

              array || (array = Array(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});

              var index = -1,
                length = props.length;

              while (++index < length) {
                var key = props[index];

                var newValue = customizer
                  ? customizer(object[key], source[key], key, object, source)
                  : undefined;

                if (newValue === undefined) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
              return function (collection, iteratee) {
                var func = isArray(collection)
                    ? arrayAggregator
                    : baseAggregator,
                  accumulator = initializer ? initializer() : {};

                return func(
                  collection,
                  setter,
                  getIteratee(iteratee, 2),
                  accumulator
                );
              };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
              return baseRest(function (object, sources) {
                var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;

                customizer =
                  assigner.length > 3 && typeof customizer == "function"
                    ? (length--, customizer)
                    : undefined;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined : customizer;
                  length = 1;
                }
                object = Object(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
              return function (collection, iteratee) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee);
                }
                var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

                while (fromRight ? index-- : ++index < length) {
                  if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
              return function (object, iteratee, keysFunc) {
                var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
              return function (string) {
                string = toString(string);

                var strSymbols = hasUnicode(string)
                  ? stringToArray(string)
                  : undefined;

                var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                var trailing = strSymbols
                  ? castSlice(strSymbols, 1).join("")
                  : string.slice(1);

                return chr[methodName]() + trailing;
              };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
              return function (string) {
                return arrayReduce(
                  words(deburr(string).replace(reApos, "")),
                  callback,
                  ""
                );
              };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
              return function () {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4]
                    );
                  case 6:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5]
                    );
                  case 7:
                    return new Ctor(
                      args[0],
                      args[1],
                      args[2],
                      args[3],
                      args[4],
                      args[5],
                      args[6]
                    );
                }
                var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args);

                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
              };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

                while (index--) {
                  args[index] = arguments[index];
                }
                var holders =
                  length < 3 &&
                  args[0] !== placeholder &&
                  args[length - 1] !== placeholder
                    ? []
                    : replaceHolders(args, placeholder);

                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    undefined,
                    args,
                    holders,
                    undefined,
                    undefined,
                    arity - length
                  );
                }
                var fn =
                  this && this !== root && this instanceof wrapper
                    ? Ctor
                    : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
              return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                  var iteratee = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function (key) {
                    return iteratee(iterable[key], key, iterable);
                  };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1
                  ? iterable[iteratee ? collection[index] : index]
                  : undefined;
              };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
              return flatRest(function (funcs) {
                var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];

                  var funcName = getFuncName(func),
                    data = funcName == "wrapper" ? getData(func) : undefined;

                  if (
                    data &&
                    isLaziable(data[0]) &&
                    data[1] ==
                      (WRAP_ARY_FLAG |
                        WRAP_CURRY_FLAG |
                        WRAP_PARTIAL_FLAG |
                        WRAP_REARG_FLAG) &&
                    !data[4].length &&
                    data[9] == 1
                  ) {
                    wrapper = wrapper[getFuncName(data[0])].apply(
                      wrapper,
                      data[3]
                    );
                  } else {
                    wrapper =
                      func.length == 1 && isLaziable(func)
                        ? wrapper[funcName]()
                        : wrapper.thru(func);
                  }
                }
                return function () {
                  var args = arguments,
                    value = args[0];

                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                  while (++index < length) {
                    result = funcs[index].call(this, result);
                  }
                  return result;
                };
              });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity
            ) {
              var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

              function wrapper() {
                var length = arguments.length,
                  args = Array(length),
                  index = length;

                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(
                    args,
                    partialsRight,
                    holdersRight,
                    isCurried
                  );
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    thisArg,
                    args,
                    newHolders,
                    argPos,
                    ary,
                    arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;

                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary < length) {
                  args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
              return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
              };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
              return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                  return defaultValue;
                }
                if (value !== undefined) {
                  result = value;
                }
                if (other !== undefined) {
                  if (result === undefined) {
                    return other;
                  }
                  if (typeof value == "string" || typeof other == "string") {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result = operator(value, other);
                }
                return result;
              };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
              return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function (iteratee) {
                    return apply(iteratee, thisArg, args);
                  });
                });
              });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
              chars = chars === undefined ? " " : baseToString(chars);

              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result = baseRepeat(
                chars,
                nativeCeil(length / stringSize(chars))
              );
              return hasUnicode(chars)
                ? castSlice(stringToArray(result), 0, length).join("")
                : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

              function wrapper() {
                var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn =
                    this && this !== root && this instanceof wrapper
                      ? Ctor
                      : func;

                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function (start, end, step) {
                if (
                  step &&
                  typeof step != "number" &&
                  isIterateeCall(start, end, step)
                ) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step =
                  step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
              return function (value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(
              func,
              bitmask,
              wrapFunc,
              placeholder,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;

              bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
              bitmask &= ~(isCurry
                ? WRAP_PARTIAL_RIGHT_FLAG
                : WRAP_PARTIAL_FLAG);

              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity,
              ];

              var result = wrapFunc.apply(undefined, newData);
              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
              var func = Math[methodName];
              return function (number, precision) {
                number = toNumber(number);
                precision =
                  precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                  // Shift with exponential notation to avoid floating-point issues.
                  // See [MDN](https://mdn.io/round#Examples) for more details.
                  var pair = (toString(number) + "e").split("e"),
                    value = func(pair[0] + "e" + (+pair[1] + precision));

                  pair = (toString(value) + "e").split("e");
                  return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
              };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(
              Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
            )
              ? noop
              : function (values) {
                  return new Set(values);
                };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
              return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              argPos,
              ary,
              arity
            ) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
              }
              ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
              arity = arity === undefined ? arity : toInteger(arity);
              length -= holders ? holders.length : 0;

              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials,
                  holdersRight = holders;

                partials = holders = undefined;
              }
              var data = isBindKey ? undefined : getData(func);

              var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity,
              ];

              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] =
                newData[9] === undefined
                  ? isBindKey
                    ? 0
                    : func.length
                  : nativeMax(newData[9] - length, 0);

              if (
                !arity &&
                bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
              ) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
              } else if (
                bitmask == WRAP_CURRY_FLAG ||
                bitmask == WRAP_CURRY_RIGHT_FLAG
              ) {
                result = createCurry(func, bitmask, arity);
              } else if (
                (bitmask == WRAP_PARTIAL_FLAG ||
                  bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                !holders.length
              ) {
                result = createPartial(func, bitmask, thisArg, partials);
              } else {
                result = createHybrid.apply(undefined, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (
                objValue === undefined ||
                (eq(objValue, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                return srcValue;
              }
              return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(
              objValue,
              srcValue,
              key,
              object,
              source,
              stack
            ) {
              if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(
                  objValue,
                  srcValue,
                  undefined,
                  customDefaultsMerge,
                  stack
                );
                stack["delete"](srcValue);
              }
              return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
              return isPlainObject(value) ? undefined : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(
              array,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

              if (
                arrLength != othLength &&
                !(isPartial && othLength > arrLength)
              ) {
                return false;
              }
              // Check that cyclic values are equal.
              var arrStacked = stack.get(array);
              var othStacked = stack.get(other);
              if (arrStacked && othStacked) {
                return arrStacked == other && othStacked == array;
              }
              var index = -1,
                result = true,
                seen =
                  bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

              stack.set(array, other);
              stack.set(other, array);

              // Ignore non-index properties.
              while (++index < arrLength) {
                var arrValue = array[index],
                  othValue = other[index];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, arrValue, index, other, array, stack)
                    : customizer(
                        arrValue,
                        othValue,
                        index,
                        array,
                        other,
                        stack
                      );
                }
                if (compared !== undefined) {
                  if (compared) {
                    continue;
                  }
                  result = false;
                  break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                  if (
                    !arraySome(other, function (othValue, othIndex) {
                      if (
                        !cacheHas(seen, othIndex) &&
                        (arrValue === othValue ||
                          equalFunc(
                            arrValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          ))
                      ) {
                        return seen.push(othIndex);
                      }
                    })
                  ) {
                    result = false;
                    break;
                  }
                } else if (
                  !(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                  )
                ) {
                  result = false;
                  break;
                }
              }
              stack["delete"](array);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(
              object,
              other,
              tag,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              switch (tag) {
                case dataViewTag:
                  if (
                    object.byteLength != other.byteLength ||
                    object.byteOffset != other.byteOffset
                  ) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;

                case arrayBufferTag:
                  if (
                    object.byteLength != other.byteLength ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))
                  ) {
                    return false;
                  }
                  return true;

                case boolTag:
                case dateTag:
                case numberTag:
                  // Coerce booleans to `1` or `0` and dates to milliseconds.
                  // Invalid dates are coerced to `NaN`.
                  return eq(+object, +other);

                case errorTag:
                  return (
                    object.name == other.name && object.message == other.message
                  );

                case regexpTag:
                case stringTag:
                  // Coerce regexes to strings and treat strings, primitives and objects,
                  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                  // for more details.
                  return object == other + "";

                case mapTag:
                  var convert = mapToArray;

                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);

                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;

                  // Recursively compare objects (susceptible to call stack limits).
                  stack.set(object, other);
                  var result = equalArrays(
                    convert(object),
                    convert(other),
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                  stack["delete"](object);
                  return result;

                case symbolTag:
                  if (symbolValueOf) {
                    return (
                      symbolValueOf.call(object) == symbolValueOf.call(other)
                    );
                  }
              }
              return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            ) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (
                  !(isPartial ? key in other : hasOwnProperty.call(other, key))
                ) {
                  return false;
                }
              }
              // Check that cyclic values are equal.
              var objStacked = stack.get(object);
              var othStacked = stack.get(other);
              if (objStacked && othStacked) {
                return objStacked == other && othStacked == object;
              }
              var result = true;
              stack.set(object, other);
              stack.set(other, object);

              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key],
                  othValue = other[key];

                if (customizer) {
                  var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object, stack)
                    : customizer(objValue, othValue, key, object, other, stack);
                }
                // Recursively compare objects (susceptible to call stack limits).
                if (
                  !(compared === undefined
                    ? objValue === othValue ||
                      equalFunc(objValue, othValue, bitmask, customizer, stack)
                    : compared)
                ) {
                  result = false;
                  break;
                }
                skipCtor || (skipCtor = key == "constructor");
              }
              if (result && !skipCtor) {
                var objCtor = object.constructor,
                  othCtor = other.constructor;

                // Non `Object` object instances with different constructors are not equal.
                if (
                  objCtor != othCtor &&
                  "constructor" in object &&
                  "constructor" in other &&
                  !(
                    typeof objCtor == "function" &&
                    objCtor instanceof objCtor &&
                    typeof othCtor == "function" &&
                    othCtor instanceof othCtor
                  )
                ) {
                  result = false;
                }
              }
              stack["delete"](object);
              stack["delete"](other);
              return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
              return setToString(overRest(func, undefined, flatten), func + "");
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
              ? noop
              : function (func) {
                  return metaMap.get(func);
                };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
              var result = func.name + "",
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result)
                  ? array.length
                  : 0;

              while (length--) {
                var data = array[length],
                  otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
              var object = hasOwnProperty.call(lodash, "placeholder")
                ? lodash
                : func;
              return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
              var result = lodash.iteratee || iteratee;
              result = result === iteratee ? baseIteratee : result;
              return arguments.length
                ? result(arguments[0], arguments[1])
                : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key)
                ? data[typeof key == "string" ? "string" : "hash"]
                : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
              var result = keys(object),
                length = result.length;

              while (length--) {
                var key = result[length],
                  value = object[key];

                result[length] = [key, value, isStrictComparable(value)];
              }
              return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) {}

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
              ? stubArray
              : function (object) {
                  if (object == null) {
                    return [];
                  }
                  object = Object(object);
                  return arrayFilter(nativeGetSymbols(object), function (
                    symbol
                  ) {
                    return propertyIsEnumerable.call(object, symbol);
                  });
                };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
              ? stubArray
              : function (object) {
                  var result = [];
                  while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                  }
                  return result;
                };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if (
              (DataView &&
                getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
              (Map && getTag(new Map()) != mapTag) ||
              (Promise && getTag(Promise.resolve()) != promiseTag) ||
              (Set && getTag(new Set()) != setTag) ||
              (WeakMap && getTag(new WeakMap()) != weakMapTag)
            ) {
              getTag = function (value) {
                var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : "";

                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                  }
                }
                return result;
              };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
              var index = -1,
                length = transforms.length;

              while (++index < length) {
                var data = transforms[index],
                  size = data.size;

                switch (data.type) {
                  case "drop":
                    start += size;
                    break;
                  case "dropRight":
                    end -= size;
                    break;
                  case "take":
                    end = nativeMin(end, start + size);
                    break;
                  case "takeRight":
                    start = nativeMax(start, end - size);
                    break;
                }
              }
              return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
              var match = source.match(reWrapDetails);
              return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);

              var index = -1,
                length = path.length,
                result = false;

              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result || ++index != length) {
                return result;
              }
              length = object == null ? 0 : object.length;
              return (
                !!length &&
                isLength(length) &&
                isIndex(key, length) &&
                (isArray(object) || isArguments(object))
              );
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
              var length = array.length,
                result = new array.constructor(length);

              // Add properties assigned by `RegExp#exec`.
              if (
                length &&
                typeof array[0] == "string" &&
                hasOwnProperty.call(array, "index")
              ) {
                result.index = array.index;
                result.input = array.input;
              }
              return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
              return typeof object.constructor == "function" &&
                !isPrototype(object)
                ? baseCreate(getPrototype(object))
                : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);

                case boolTag:
                case dateTag:
                  return new Ctor(+object);

                case dataViewTag:
                  return cloneDataView(object, isDeep);

                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);

                case mapTag:
                  return new Ctor();

                case numberTag:
                case stringTag:
                  return new Ctor(object);

                case regexpTag:
                  return cloneRegExp(object);

                case setTag:
                  return new Ctor();

                case symbolTag:
                  return cloneSymbol(object);
              }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] =
                (length > 1 ? "& " : "") + details[lastIndex];
              details = details.join(length > 2 ? ", " : " ");
              return source.replace(
                reWrapComment,
                "{\n/* [wrapped with " + details + "] */\n"
              );
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
              return (
                isArray(value) ||
                isArguments(value) ||
                !!(spreadableSymbol && value && value[spreadableSymbol])
              );
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return (
                !!length &&
                (type == "number" ||
                  (type != "symbol" && reIsUint.test(value))) &&
                value > -1 &&
                value % 1 == 0 &&
                value < length
              );
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject(object)) {
                return false;
              }
              var type = typeof index;
              if (
                type == "number"
                  ? isArrayLike(object) && isIndex(index, object.length)
                  : type == "string" && index in object
              ) {
                return eq(object[index], value);
              }
              return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (
                type == "number" ||
                type == "symbol" ||
                type == "boolean" ||
                value == null ||
                isSymbol(value)
              ) {
                return true;
              }
              return (
                reIsPlainProp.test(value) ||
                !reIsDeepProp.test(value) ||
                (object != null && value in Object(object))
              );
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return type == "string" ||
                type == "number" ||
                type == "symbol" ||
                type == "boolean"
                ? value !== "__proto__"
                : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
              var funcName = getFuncName(func),
                other = lodash[funcName];

              if (
                typeof other != "function" ||
                !(funcName in LazyWrapper.prototype)
              ) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
              var Ctor = value && value.constructor,
                proto =
                  (typeof Ctor == "function" && Ctor.prototype) || objectProto;

              return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
              return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
              return function (object) {
                if (object == null) {
                  return false;
                }
                return (
                  object[key] === srcValue &&
                  (srcValue !== undefined || key in Object(object))
                );
              };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
              var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon =
                  newBitmask <
                  (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

              var isCombo =
                (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
                (srcBitmask == WRAP_ARY_FLAG &&
                  bitmask == WRAP_REARG_FLAG &&
                  data[7].length <= source[8]) ||
                (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                  source[7].length <= source[8] &&
                  bitmask == WRAP_CURRY_FLAG);

              // Exit early if metadata can't be merged.
              if (!(isCommon || isCombo)) {
                return data;
              }
              // Use source `thisArg` if available.
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |=
                  bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              // Compose partial arguments.
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials
                  ? composeArgs(partials, value, source[4])
                  : value;
                data[4] = partials
                  ? replaceHolders(data[3], PLACEHOLDER)
                  : source[4];
              }
              // Compose partial right arguments.
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials
                  ? composeArgsRight(partials, value, source[6])
                  : value;
                data[6] = partials
                  ? replaceHolders(data[5], PLACEHOLDER)
                  : source[6];
              }
              // Use source `argPos` if available.
              value = source[7];
              if (value) {
                data[7] = value;
              }
              // Use source `ary` if it's smaller.
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] =
                  data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              // Use source `arity` if one is not provided.
              if (data[9] == null) {
                data[9] = source[9];
              }
              // Use source `func` and merge bitmasks.
              data[0] = source[0];
              data[1] = newBitmask;

              return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
              var result = [];
              if (object != null) {
                for (var key in Object(object)) {
                  result.push(key);
                }
              }
              return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
              return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
              start = nativeMax(
                start === undefined ? func.length - 1 : start,
                0
              );
              return function () {
                var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
              };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
              return path.length < 2
                ? object
                : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
              var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength)
                  ? oldArray[index]
                  : undefined;
              }
              return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
              if (key === "constructor" && typeof object[key] === "function") {
                return;
              }

              if (key == "__proto__") {
                return;
              }

              return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
              ctxSetTimeout ||
              function (func, wait) {
                return root.setTimeout(func, wait);
              };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
              var source = reference + "";
              return setToString(
                wrapper,
                insertWrapDetails(
                  source,
                  updateWrapDetails(getWrapDetails(source), bitmask)
                )
              );
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
              var count = 0,
                lastCalled = 0;

              return function () {
                var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);

                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined, arguments);
              };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
              var index = -1,
                length = array.length,
                lastIndex = length - 1;

              size = size === undefined ? length : size;
              while (++index < size) {
                var rand = baseRandom(index, lastIndex),
                  value = array[rand];

                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size;
              return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push("");
              }
              string.replace(rePropName, function (
                match,
                number,
                quote,
                subString
              ) {
                result.push(
                  quote
                    ? subString.replace(reEscapeChar, "$1")
                    : number || match
                );
              });
              return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == "string" || isSymbol(value)) {
                return value;
              }
              var result = value + "";
              return result == "0" && 1 / value == -INFINITY ? "-0" : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) {}
                try {
                  return func + "";
                } catch (e) {}
              }
              return "";
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function (pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result = new LodashWrapper(
                wrapper.__wrapped__,
                wrapper.__chain__
              );
              result.__actions__ = copyArray(wrapper.__actions__);
              result.__index__ = wrapper.__index__;
              result.__values__ = wrapper.__values__;
              return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
              if (
                guard ? isIterateeCall(array, size, guard) : size === undefined
              ) {
                size = 1;
              } else {
                size = nativeMax(toInteger(size), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size < 1) {
                return [];
              }
              var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

              while (index < length) {
                result[resIndex++] = baseSlice(array, index, (index += size));
              }
              return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
              var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

              while (++index < length) {
                var value = array[index];
                if (value) {
                  result[resIndex++] = value;
                }
              }
              return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array(length - 1),
                array = arguments[0],
                index = length;

              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(
                isArray(array) ? copyArray(array) : [array],
                baseFlatten(args, 1)
              );
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
              var iteratee = last(values);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                  )
                : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
              var comparator = last(values);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined;
              }
              return isArrayLikeObject(array)
                ? baseDifference(
                    array,
                    baseFlatten(values, 1, isArrayLikeObject, true),
                    undefined,
                    comparator
                  )
                : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), true)
                : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                start &&
                typeof start != "number" &&
                isIterateeCall(array, value, start)
              ) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  fromIndex < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return baseFindIndex(
                array,
                getIteratee(predicate, 3),
                index,
                true
              );
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
              var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

              while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
              }
              return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
              return array && array.length ? array[0] : undefined;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped)
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
              var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              if (iteratee === last(mapped)) {
                iteratee = undefined;
              } else {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
              var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

              comparator =
                typeof comparator == "function" ? comparator : undefined;
              if (comparator) {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0]
                ? baseIntersection(mapped, undefined, comparator)
                : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
              return array == null ? "" : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index =
                  index < 0
                    ? nativeMax(length + index, 0)
                    : nativeMin(index, length - 1);
              }
              return value === value
                ? strictLastIndexOf(array, value, index)
                : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
              return array && array.length
                ? baseNth(array, toInteger(n))
                : undefined;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
              return array && array.length && values && values.length
                ? basePullAll(array, values)
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, getIteratee(iteratee, 2))
                : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
              return array && array.length && values && values.length
                ? basePullAll(array, values, undefined, comparator)
                : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
              var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);

              basePullAt(
                array,
                arrayMap(indexes, function (index) {
                  return isIndex(index, length) ? +index : index;
                }).sort(compareAscending)
              );

              return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
              var result = [];
              if (!(array && array.length)) {
                return result;
              }
              var index = -1,
                indexes = [],
                length = array.length;

              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (
                end &&
                typeof end != "number" &&
                isIterateeCall(array, start, end)
              ) {
                start = 0;
                end = length;
              } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
              }
              return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
              return baseSortedIndexBy(
                array,
                value,
                getIteratee(iteratee, 2),
                true
              );
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
              return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
              return array && array.length
                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined ? 1 : toInteger(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
              return array && array.length
                ? baseWhile(array, getIteratee(predicate, 3))
                : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseUniq(
                baseFlatten(arrays, 1, isArrayLikeObject, true),
                undefined,
                comparator
              );
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
              return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
              return array && array.length
                ? baseUniq(array, getIteratee(iteratee, 2))
                : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return array && array.length
                ? baseUniq(array, undefined, comparator)
                : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
              });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
              if (!(array && array.length)) {
                return [];
              }
              var result = unzip(array);
              if (iteratee == null) {
                return result;
              }
              return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
              });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
              return isArrayLikeObject(array)
                ? baseDifference(array, values)
                : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
              var iteratee = last(arrays);
              if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
              }
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                getIteratee(iteratee, 2)
              );
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
              var comparator = last(arrays);
              comparator =
                typeof comparator == "function" ? comparator : undefined;
              return baseXor(
                arrayFilter(arrays, isArrayLikeObject),
                undefined,
                comparator
              );
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
              return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
              return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
              var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;

              iteratee =
                typeof iteratee == "function"
                  ? (arrays.pop(), iteratee)
                  : undefined;
              return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
              var result = lodash(value);
              result.__chain__ = true;
              return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
              return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
              var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function (object) {
                  return baseAt(object, paths);
                };

              if (
                length > 1 ||
                this.__actions__.length ||
                !(value instanceof LazyWrapper) ||
                !isIndex(start)
              ) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined,
              });
              return new LodashWrapper(value, this.__chain__).thru(function (
                array
              ) {
                if (length && !array.length) {
                  array.push(undefined);
                }
                return array;
              });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
              return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
              if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];

              return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
              return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
              var result,
                parent = this;

              while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                  previous.__wrapped__ = clone;
                } else {
                  result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  func: thru,
                  args: [reverse],
                  thisArg: undefined,
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                ++result[key];
              } else {
                baseAssignValue(result, key, 1);
              }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
              return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
              depth = depth === undefined ? 1 : toInteger(depth);
              return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
              if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
              } else {
                baseAssignValue(result, key, [value]);
              }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection)
                ? collection
                : values(collection);
              fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString(collection)
                ? fromIndex <= length &&
                    collection.indexOf(value, fromIndex) > -1
                : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
              var index = -1,
                isFunc = typeof path == "function",
                result = isArrayLike(collection)
                  ? Array(collection.length)
                  : [];

              baseEach(collection, function (value) {
                result[++index] = isFunc
                  ? apply(path, value, args)
                  : baseInvoke(value, path, args);
              });
              return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
              baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
              function (result, value, key) {
                result[key ? 0 : 1].push(value);
              },
              function () {
                return [[], []];
              }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEach
              );
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;

              return func(
                collection,
                getIteratee(iteratee, 4),
                accumulator,
                initAccum,
                baseEachRight
              );
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
              if (
                guard ? isIterateeCall(collection, n, guard) : n === undefined
              ) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString(collection)
                  ? stringSize(collection)
                  : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
              }
              return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (
                length > 1 &&
                isIterateeCall(collection, iteratees[0], iteratees[1])
              ) {
                iteratees = [];
              } else if (
                length > 2 &&
                isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
              ) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
              ctxNow ||
              function () {
                return root.Date.now();
              };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
              n = guard ? undefined : n;
              n = func && n == null ? func.length : n;
              return createWrap(
                func,
                WRAP_ARY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                n
              );
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
              var result;
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              n = toInteger(n);
              return function () {
                if (--n > 0) {
                  result = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined;
                }
                return result;
              };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curry.placeholder;
              return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
              arity = guard ? undefined : arity;
              var result = createWrap(
                func,
                WRAP_CURRY_RIGHT_FLAG,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                arity
              );
              result.placeholder = curryRight.placeholder;
              return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
              var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              wait = toNumber(wait) || 0;
              if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing
                  ? nativeMax(toNumber(options.maxWait) || 0, wait)
                  : maxWait;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }

              function invokeFunc(time) {
                var args = lastArgs,
                  thisArg = lastThis;

                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
              }

              function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
              }

              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;

                return maxing
                  ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                  : timeWaiting;
              }

              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime;

                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return (
                  lastCallTime === undefined ||
                  timeSinceLastCall >= wait ||
                  timeSinceLastCall < 0 ||
                  (maxing && timeSinceLastInvoke >= maxWait)
                );
              }

              function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
              }

              function trailingEdge(time) {
                timerId = undefined;

                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
              }

              function cancel() {
                if (timerId !== undefined) {
                  clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
              }

              function flush() {
                return timerId === undefined ? result : trailingEdge(now());
              }

              function debounced() {
                var time = now(),
                  isInvoking = shouldInvoke(time);

                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;

                if (isInvoking) {
                  if (timerId === undefined) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    // Handle invocations in a tight loop.
                    clearTimeout(timerId);
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined) {
                  timerId = setTimeout(timerExpired, wait);
                }
                return result;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
              return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (
                typeof func != "function" ||
                (resolver != null && typeof resolver != "function")
              ) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function () {
                var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || MapCache)();
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
              if (typeof predicate != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              return function () {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
              return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
              transforms =
                transforms.length == 1 && isArray(transforms[0])
                  ? arrayMap(transforms[0], baseUnary(getIteratee()))
                  : arrayMap(
                      baseFlatten(transforms, 1),
                      baseUnary(getIteratee())
                    );

              var funcsLength = transforms.length;
              return baseRest(function (args) {
                var index = -1,
                  length = nativeMin(args.length, funcsLength);

                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(
                func,
                WRAP_PARTIAL_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(
                func,
                WRAP_PARTIAL_RIGHT_FLAG,
                undefined,
                partials,
                holders
              );
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
              return createWrap(
                func,
                WRAP_REARG_FLAG,
                undefined,
                undefined,
                undefined,
                indexes
              );
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start === undefined ? start : toInteger(start);
              return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              start = start == null ? 0 : nativeMax(toInteger(start), 0);
              return baseRest(function (args) {
                var array = args[start],
                  otherArgs = castSlice(args, 0, start);

                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
              var leading = true,
                trailing = true;

              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing =
                  "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                leading: leading,
                maxWait: wait,
                trailing: trailing,
              });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
              return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseClone(
                value,
                CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                customizer
              );
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
              return (
                source == null || baseConformsTo(object, source, keys(source))
              );
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
              return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
              (function () {
                return arguments;
              })()
            )
              ? baseIsArguments
              : function (value) {
                  return (
                    isObjectLike(value) &&
                    hasOwnProperty.call(value, "callee") &&
                    !propertyIsEnumerable.call(value, "callee")
                  );
                };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer
              ? baseUnary(nodeIsArrayBuffer)
              : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return (
                value != null && isLength(value.length) && !isFunction(value)
              );
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
              return (
                value === true ||
                value === false ||
                (isObjectLike(value) && baseGetTag(value) == boolTag)
              );
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
              return (
                isObjectLike(value) &&
                value.nodeType === 1 &&
                !isPlainObject(value)
              );
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
              if (value == null) {
                return true;
              }
              if (
                isArrayLike(value) &&
                (isArray(value) ||
                  typeof value == "string" ||
                  typeof value.splice == "function" ||
                  isBuffer(value) ||
                  isTypedArray(value) ||
                  isArguments(value))
              ) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                  return false;
                }
              }
              return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
              return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              var result = customizer ? customizer(value, other) : undefined;
              return result === undefined
                ? baseIsEqual(value, other, undefined, customizer)
                : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return (
                tag == errorTag ||
                tag == domExcTag ||
                (typeof value.message == "string" &&
                  typeof value.name == "string" &&
                  !isPlainObject(value))
              );
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
              return typeof value == "number" && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = baseGetTag(value);
              return (
                tag == funcTag ||
                tag == genTag ||
                tag == asyncTag ||
                tag == proxyTag
              );
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
              return typeof value == "number" && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return (
                typeof value == "number" &&
                value > -1 &&
                value % 1 == 0 &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
              return (
                object === source ||
                baseIsMatch(object, source, getMatchData(source))
              );
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return baseIsMatch(
                object,
                source,
                getMatchData(source),
                customizer
              );
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
              // An `NaN` primitive is the only value that is not equal to itself.
              // Perform the `toStringTag` check first to avoid errors with some
              // ActiveX objects in IE.
              return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
              }
              return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
              return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
              return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
              return (
                typeof value == "number" ||
                (isObjectLike(value) && baseGetTag(value) == numberTag)
              );
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor =
                hasOwnProperty.call(proto, "constructor") && proto.constructor;
              return (
                typeof Ctor == "function" &&
                Ctor instanceof Ctor &&
                funcToString.call(Ctor) == objectCtorString
              );
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp
              ? baseUnary(nodeIsRegExp)
              : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
              return (
                isInteger(value) &&
                value >= -MAX_SAFE_INTEGER &&
                value <= MAX_SAFE_INTEGER
              );
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
              return (
                typeof value == "string" ||
                (!isArray(value) &&
                  isObjectLike(value) &&
                  baseGetTag(value) == stringTag)
              );
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
              return (
                typeof value == "symbol" ||
                (isObjectLike(value) && baseGetTag(value) == symbolTag)
              );
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray
              ? baseUnary(nodeIsTypedArray)
              : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
              return value === undefined;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
              return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString(value)
                  ? stringToArray(value)
                  : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value),
                func =
                  tag == mapTag
                    ? mapToArray
                    : tag == setTag
                    ? setToArray
                    : values;

              return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
              var result = toFinite(value),
                remainder = result % 1;

              return result === result
                ? remainder
                  ? result - remainder
                  : result
                : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
              return value
                ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject(value)) {
                var other =
                  typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = baseTrim(value);
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value)
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : reIsBadHex.test(value)
                ? NAN
                : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
              return value
                ? baseClamp(
                    toInteger(value),
                    -MAX_SAFE_INTEGER,
                    MAX_SAFE_INTEGER
                  )
                : value === 0
                ? value
                : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
              return value == null ? "" : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
              copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
              var result = baseCreate(prototype);
              return properties == null
                ? result
                : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
              object = Object(object);

              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }

              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;

                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];

                  if (
                    value === undefined ||
                    (eq(value, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    object[key] = source[key];
                  }
                }
              }

              return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
              args.push(undefined, customDefaultsMerge);
              return apply(mergeWith, undefined, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
              return baseFindKey(
                object,
                getIteratee(predicate, 3),
                baseForOwnRight
              );
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
              return object == null
                ? object
                : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
              return object == null
                ? object
                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
              return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
              return (
                object && baseForOwnRight(object, getIteratee(iteratee, 3))
              );
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
              return object == null
                ? []
                : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }

              if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
              } else {
                result[value] = [key];
              }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object)
                : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
              return isArrayLike(object)
                ? arrayLikeKeys(object, true)
                : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
              });
              return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
              var result = {};
              iteratee = getIteratee(iteratee, 3);

              baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
              });
              return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (
              object,
              source,
              srcIndex,
              customizer
            ) {
              baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
              var result = {};
              if (object == null) {
                return result;
              }
              var isDeep = false;
              paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result);
              if (isDeep) {
                result = baseClone(
                  result,
                  CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                  customOmitClone
                );
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result, paths[length]);
              }
              return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
              return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
              });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
              path = castPath(path, object);

              var index = -1,
                length = path.length;

              // Ensure the loop is entered when path is empty.
              if (!length) {
                length = 1;
                object = undefined;
              }
              while (++index < length) {
                var value =
                  object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
              }
              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
              var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);

              iteratee = getIteratee(iteratee, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                  accumulator = isFunction(Ctor)
                    ? baseCreate(getPrototype(object))
                    : {};
                } else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(object, function (
                value,
                index,
                object
              ) {
                return iteratee(accumulator, value, index, object);
              });
              return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
              return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
              customizer =
                typeof customizer == "function" ? customizer : undefined;
              return object == null
                ? object
                : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
              if (upper === undefined) {
                upper = lower;
                lower = undefined;
              }
              if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
              if (
                floating &&
                typeof floating != "boolean" &&
                isIterateeCall(lower, upper, floating)
              ) {
                upper = floating = undefined;
              }
              if (floating === undefined) {
                if (typeof upper == "boolean") {
                  floating = upper;
                  upper = undefined;
                } else if (typeof lower == "boolean") {
                  floating = lower;
                  lower = undefined;
                }
              }
              if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
              } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(
                  lower +
                    rand *
                      (upper -
                        lower +
                        freeParseFloat("1e-" + ((rand + "").length - 1))),
                  upper
                );
              }
              return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
              word = word.toLowerCase();
              return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
              return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
              string = toString(string);
              return (
                string &&
                string.replace(reLatin, deburrLetter).replace(reComboMark, "")
              );
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);

              var length = string.length;
              position =
                position === undefined
                  ? length
                  : baseClamp(toInteger(position), 0, length);

              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
              string = toString(string);
              return string && reHasUnescapedHtml.test(string)
                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
              string = toString(string);
              return string && reHasRegExpChar.test(string)
                ? string.replace(reRegExpChar, "\\$&")
                : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
              return result + (index ? "-" : "") + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst("toLowerCase");

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return (
                createPadding(nativeFloor(mid), chars) +
                string +
                createPadding(nativeCeil(mid), chars)
              );
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? string + createPadding(length - strLength, chars)
                : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
              string = toString(string);
              length = toInteger(length);

              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length
                ? createPadding(length - strLength, chars) + string
                : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(
                toString(string).replace(reTrimStart, ""),
                radix || 0
              );
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
              if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
              } else {
                n = toInteger(n);
              }
              return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
              var args = arguments,
                string = toString(args[0]);

              return args.length < 3
                ? string
                : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
              return result + (index ? "_" : "") + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
              if (
                limit &&
                typeof limit != "number" &&
                isIterateeCall(string, separator, limit)
              ) {
                separator = limit = undefined;
              }
              limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (
                string &&
                (typeof separator == "string" ||
                  (separator != null && !isRegExp(separator)))
              ) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
              string = toString(string);
              position =
                position == null
                  ? 0
                  : baseClamp(toInteger(position), 0, string.length);

              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
              // Based on John Resig's `tmpl` implementation
              // (http://ejohn.org/blog/javascript-micro-templating/)
              // and Laura Doktorova's doT.js (https://github.com/olado/doT).
              var settings = lodash.templateSettings;

              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
              }
              string = toString(string);
              options = assignInWith(
                {},
                options,
                settings,
                customDefaultsAssignIn
              );

              var imports = assignInWith(
                  {},
                  options.imports,
                  settings.imports,
                  customDefaultsAssignIn
                ),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);

              var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '";

              // Compile the regexp to match each delimiter.
              var reDelimiters = RegExp(
                (options.escape || reNoMatch).source +
                  "|" +
                  interpolate.source +
                  "|" +
                  (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                    .source +
                  "|" +
                  (options.evaluate || reNoMatch).source +
                  "|$",
                "g"
              );

              // Use a sourceURL for easier debugging.
              // The sourceURL gets injected into the source that's eval-ed, so be careful
              // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
              // and escape the comment, thus injecting code that gets evaled.
              var sourceURL =
                "//# sourceURL=" +
                (hasOwnProperty.call(options, "sourceURL")
                  ? (options.sourceURL + "").replace(/\s/g, " ")
                  : "lodash.templateSources[" + ++templateCounter + "]") +
                "\n";

              string.replace(reDelimiters, function (
                match,
                escapeValue,
                interpolateValue,
                esTemplateValue,
                evaluateValue,
                offset
              ) {
                interpolateValue || (interpolateValue = esTemplateValue);

                // Escape characters that can't be included in string literals.
                source += string
                  .slice(index, offset)
                  .replace(reUnescapedString, escapeStringChar);

                // Replace delimiters with snippets.
                if (escapeValue) {
                  isEscaping = true;
                  source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                  isEvaluating = true;
                  source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                  source +=
                    "' +\n((__t = (" +
                    interpolateValue +
                    ")) == null ? '' : __t) +\n'";
                }
                index = offset + match.length;

                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
              });

              source += "';\n";

              // If `variable` is not specified wrap a with-statement around the generated
              // code to add the data object to the top of the scope chain.
              var variable =
                hasOwnProperty.call(options, "variable") && options.variable;
              if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
              }
              // Throw an error if a forbidden character was found in `variable`, to prevent
              // potential command injection attacks.
              else if (reForbiddenIdentifierChars.test(variable)) {
                throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
              }

              // Cleanup code by stripping empty strings.
              source = (isEvaluating
                ? source.replace(reEmptyStringLeading, "")
                : source
              )
                .replace(reEmptyStringMiddle, "$1")
                .replace(reEmptyStringTrailing, "$1;");

              // Frame code as the function body.
              source =
                "function(" +
                (variable || "obj") +
                ") {\n" +
                (variable ? "" : "obj || (obj = {});\n") +
                "var __t, __p = ''" +
                (isEscaping ? ", __e = _.escape" : "") +
                (isEvaluating
                  ? ", __j = Array.prototype.join;\n" +
                    "function print() { __p += __j.call(arguments, '') }\n"
                  : ";\n") +
                source +
                "return __p\n}";

              var result = attempt(function () {
                return Function(
                  importsKeys,
                  sourceURL + "return " + source
                ).apply(undefined, importsValues);
              });

              // Provide the compiled function's source by its `toString` method or
              // the `source` property as a convenience for inlining compiled templates.
              result.source = source;
              if (isError(result)) {
                throw result;
              }
              return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
              return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
              return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return baseTrim(string);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;

              return castSlice(strSymbols, start, end).join("");
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.slice(0, trimmedEndIndex(string) + 1);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

              return castSlice(strSymbols, 0, end).join("");
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));

              return castSlice(strSymbols, start).join("");
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

              if (isObject(options)) {
                var separator =
                  "separator" in options ? options.separator : separator;
                length =
                  "length" in options ? toInteger(options.length) : length;
                omission =
                  "omission" in options
                    ? baseToString(options.omission)
                    : omission;
              }
              string = toString(string);

              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result = strSymbols
                ? castSlice(strSymbols, 0, end).join("")
                : string.slice(0, end);

              if (separator === undefined) {
                return result + omission;
              }
              if (strSymbols) {
                end += result.length - end;
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match,
                    substring = result;

                  if (!separator.global) {
                    separator = RegExp(
                      separator.source,
                      toString(reFlags.exec(separator)) + "g"
                    );
                  }
                  separator.lastIndex = 0;
                  while ((match = separator.exec(substring))) {
                    var newEnd = match.index;
                  }
                  result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                  result = result.slice(0, index);
                }
              }
              return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
              string = toString(string);
              return string && reHasEscapedHtml.test(string)
                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
              return result + (index ? " " : "") + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst("toUpperCase");

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined : pattern;

              if (pattern === undefined) {
                return hasUnicodeWord(string)
                  ? unicodeWords(string)
                  : asciiWords(string);
              }
              return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
              try {
                return apply(func, undefined, args);
              } catch (e) {
                return isError(e) ? e : new Error(e);
              }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
              arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();

              pairs = !length
                ? []
                : arrayMap(pairs, function (pair) {
                    if (typeof pair[1] != "function") {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                  });

              return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
              return function () {
                return value;
              };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
              return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
              return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
              return baseIteratee(
                typeof func == "function"
                  ? func
                  : baseClone(func, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(
                path,
                baseClone(srcValue, CLONE_DEEP_FLAG)
              );
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
              return function (object) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
              return function (path) {
                return baseInvoke(object, path, args);
              };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
              var props = keys(source),
                methodNames = baseFunctions(source, props);

              if (
                options == null &&
                !(isObject(source) && (methodNames.length || !props.length))
              ) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain =
                  !(isObject(options) && "chain" in options) || !!options.chain,
                isFunc = isFunction(object);

              arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                      var result = object(this.__wrapped__),
                        actions = (result.__actions__ = copyArray(
                          this.__actions__
                        ));

                      actions.push({
                        func: func,
                        args: arguments,
                        thisArg: object,
                      });
                      result.__chain__ = chainAll;
                      return result;
                    }
                    return func.apply(
                      object,
                      arrayPush([this.value()], arguments)
                    );
                  };
                }
              });

              return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
              if (root._ === this) {
                root._ = oldDash;
              }
              return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
              // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
              n = toInteger(n);
              return baseRest(function (args) {
                return baseNth(args, n);
              });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
              return isKey(path)
                ? baseProperty(toKey(path))
                : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
              return function (path) {
                return object == null ? undefined : baseGet(object, path);
              };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
              return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
              return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
              return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
              return "";
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
              return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
              n = toInteger(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);

              iteratee = getIteratee(iteratee);
              n -= MAX_ARRAY_LENGTH;

              var result = baseTimes(length, iteratee);
              while (++index < n) {
                iteratee(index);
              }
              return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value)
                ? [value]
                : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
              return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound("ceil");

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
              return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound("floor");

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseGt)
                : undefined;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                : undefined;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
              return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
              return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
              return array && array.length
                ? baseExtremum(array, identity, baseLt)
                : undefined;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
              return array && array.length
                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                : undefined;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (
              multiplier,
              multiplicand
            ) {
              return multiplier * multiplicand;
            },
            1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound("round");

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
              return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
              return array && array.length
                ? baseSum(array, getIteratee(iteratee, 2))
                : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
              lodash,
              (function () {
                var source = {};
                baseForOwn(lodash, function (func, methodName) {
                  if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                  }
                });
                return source;
              })(),
              { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(
              [
                "bind",
                "bindKey",
                "curry",
                "curryRight",
                "partial",
                "partialRight",
              ],
              function (methodName) {
                lodash[methodName].placeholder = lodash;
              }
            );

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(["drop", "take"], function (methodName, index) {
              LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                var result =
                  this.__filtered__ && !index
                    ? new LazyWrapper(this)
                    : this.clone();

                if (result.__filtered__) {
                  result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                  result.__views__.push({
                    size: nativeMin(n, MAX_ARRAY_LENGTH),
                    type: methodName + (result.__dir__ < 0 ? "Right" : ""),
                  });
                }
                return result;
              };

              LazyWrapper.prototype[methodName + "Right"] = function (n) {
                return this.reverse()[methodName](n).reverse();
              };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(["filter", "map", "takeWhile"], function (
              methodName,
              index
            ) {
              var type = index + 1,
                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

              LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                  iteratee: getIteratee(iteratee, 3),
                  type: type,
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
              };
            });

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(["head", "last"], function (methodName, index) {
              var takeName = "take" + (index ? "Right" : "");

              LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
              };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(["initial", "tail"], function (methodName, index) {
              var dropName = "drop" + (index ? "" : "Right");

              LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__
                  ? new LazyWrapper(this)
                  : this[dropName](1);
              };
            });

            LazyWrapper.prototype.compact = function () {
              return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
              return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
              return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
              if (typeof path == "function") {
                return new LazyWrapper(this);
              }
              return this.map(function (value) {
                return baseInvoke(value, path, args);
              });
            });

            LazyWrapper.prototype.reject = function (predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
              start = toInteger(start);

              var result = this;
              if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
              }
              if (start < 0) {
                result = result.takeRight(-start);
              } else if (start) {
                result = result.drop(start);
              }
              if (end !== undefined) {
                end = toInteger(end);
                result =
                  end < 0 ? result.dropRight(-end) : result.take(end - start);
              }
              return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
              return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
              return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                  methodName
                ),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc =
                  lodash[
                    isTaker
                      ? "take" + (methodName == "last" ? "Right" : "")
                      : methodName
                  ],
                retUnwrapped = isTaker || /^find/.test(methodName);

              if (!lodashFunc) {
                return;
              }
              lodash.prototype[methodName] = function () {
                var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

                var interceptor = function (value) {
                  var result = lodashFunc.apply(
                    lodash,
                    arrayPush([value], args)
                  );
                  return isTaker && chainAll ? result[0] : result;
                };

                if (
                  useLazy &&
                  checkIteratee &&
                  typeof iteratee == "function" &&
                  iteratee.length != 1
                ) {
                  // Avoid lazy use if the iteratee has a "length" value other than `1`.
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result = func.apply(value, args);
                  result.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined,
                  });
                  return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped
                  ? isTaker
                    ? result.value()[0]
                    : result.value()
                  : result;
              };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(
              ["pop", "push", "shift", "sort", "splice", "unshift"],
              function (methodName) {
                var func = arrayProto[methodName],
                  chainName = /^(?:push|sort|unshift)$/.test(methodName)
                    ? "tap"
                    : "thru",
                  retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function () {
                  var args = arguments;
                  if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                  }
                  return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                  });
                };
              }
            );

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
              var lodashFunc = lodash[methodName];
              if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) {
                  realNames[key] = [];
                }
                realNames[key].push({ name: methodName, func: lodashFunc });
              }
            });

            realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
              {
                name: "wrapper",
                func: undefined,
              },
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
              lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
          };

          /*--------------------------------------------------------------------------*/

          // Export lodash.
          var _ = runInContext();

          // Some AMD build optimizers, like r.js, check for condition patterns like:
          if (true) {
            // Expose Lodash on the global object to prevent errors when Lodash is
            // loaded by a script tag in the presence of an AMD loader.
            // See http://requirejs.org/docs/errors.html#mismatch for more details.
            // Use `_.noConflict` to remove Lodash from the global object.
            root._ = _;

            // Define as an anonymous module so, through path mapping, it can be
            // referenced as the "underscore" module.
            !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return _;
            }.call(exports, __webpack_require__, exports, module)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
          // Check for `exports` after `define` in case a build optimizer adds it.
          else {
          }
        }.call(this));

        /* WEBPACK VAR INJECTION */
      }.call(
        this,
        __webpack_require__("c8ba"),
        __webpack_require__("62e4")(module)
      ));

      /***/
    },

    /***/ "3a7c": /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (Buffer) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.

        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }
          return objectToString(arg) === "[object Array]";
        }
        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === "boolean";
        }
        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }
        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === "number";
        }
        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === "string";
        }
        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === "symbol";
        }
        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }
        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === "[object RegExp]";
        }
        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === "object" && arg !== null;
        }
        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === "[object Date]";
        }
        exports.isDate = isDate;

        function isError(e) {
          return objectToString(e) === "[object Error]" || e instanceof Error;
        }
        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === "function";
        }
        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return (
            arg === null ||
            typeof arg === "boolean" ||
            typeof arg === "number" ||
            typeof arg === "string" ||
            typeof arg === "symbol" || // ES6 symbol
            typeof arg === "undefined"
          );
        }
        exports.isPrimitive = isPrimitive;

        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("b639").Buffer));

      /***/
    },

    /***/ "3c66": /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (process, Buffer) {
        (function (clarinet) {
          "use strict";

          // non node-js needs to set clarinet debug on root
          var env =
            typeof process === "object" &&
            Object({ NODE_ENV: "production", BASE_URL: "" })
              ? Object({ NODE_ENV: "production", BASE_URL: "" })
              : self;

          clarinet.parser = function (opt) {
            return new CParser(opt);
          };
          clarinet.CParser = CParser;
          clarinet.CStream = CStream;
          clarinet.createStream = createStream;
          clarinet.MAX_BUFFER_LENGTH = 64 * 1024;
          clarinet.DEBUG = env.CDEBUG === "debug";
          clarinet.INFO = env.CDEBUG === "debug" || env.CDEBUG === "info";
          clarinet.EVENTS = [
            "value",
            "string",
            "key",
            "openobject",
            "closeobject",
            "openarray",
            "closearray",
            "error",
            "end",
            "ready",
          ];

          var buffers = {
              textNode: undefined,
              numberNode: "",
            },
            streamWraps = clarinet.EVENTS.filter(function (ev) {
              return ev !== "error" && ev !== "end";
            }),
            S = 0,
            Stream;

          clarinet.STATE = {
            BEGIN: S++,
            VALUE: S++, // general stuff
            OPEN_OBJECT: S++, // {
            CLOSE_OBJECT: S++, // }
            OPEN_ARRAY: S++, // [
            CLOSE_ARRAY: S++, // ]
            TEXT_ESCAPE: S++, // \ stuff
            STRING: S++, // ""
            BACKSLASH: S++,
            END: S++, // No more stack
            OPEN_KEY: S++, // , "a"
            CLOSE_KEY: S++, // :
            TRUE: S++, // r
            TRUE2: S++, // u
            TRUE3: S++, // e
            FALSE: S++, // a
            FALSE2: S++, // l
            FALSE3: S++, // s
            FALSE4: S++, // e
            NULL: S++, // u
            NULL2: S++, // l
            NULL3: S++, // l
            NUMBER_DECIMAL_POINT: S++, // .
            NUMBER_DIGIT: S++, // [0-9]
          };

          for (var s_ in clarinet.STATE)
            clarinet.STATE[clarinet.STATE[s_]] = s_;

          // switcharoo
          S = clarinet.STATE;

          const Char = {
            tab: 0x09, // \t
            lineFeed: 0x0a, // \n
            carriageReturn: 0x0d, // \r
            space: 0x20, // " "

            doubleQuote: 0x22, // "
            plus: 0x2b, // +
            comma: 0x2c, // ,
            minus: 0x2d, // -
            period: 0x2e, // .

            _0: 0x30, // 0
            _9: 0x39, // 9

            colon: 0x3a, // :

            E: 0x45, // E

            openBracket: 0x5b, // [
            backslash: 0x5c, // \
            closeBracket: 0x5d, // ]

            a: 0x61, // a
            b: 0x62, // b
            e: 0x65, // e
            f: 0x66, // f
            l: 0x6c, // l
            n: 0x6e, // n
            r: 0x72, // r
            s: 0x73, // s
            t: 0x74, // t
            u: 0x75, // u

            openBrace: 0x7b, // {
            closeBrace: 0x7d, // }
          };

          if (!Object.create) {
            Object.create = function (o) {
              function f() {
                this["__proto__"] = o;
              }
              f.prototype = o;
              return new f();
            };
          }

          if (!Object.getPrototypeOf) {
            Object.getPrototypeOf = function (o) {
              return o["__proto__"];
            };
          }

          if (!Object.keys) {
            Object.keys = function (o) {
              var a = [];
              for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
              return a;
            };
          }

          function checkBufferLength(parser) {
            var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10),
              maxActual = 0;
            for (var buffer in buffers) {
              var len =
                parser[buffer] === undefined ? 0 : parser[buffer].length;
              if (len > maxAllowed) {
                switch (buffer) {
                  case "text":
                    closeText(parser);
                    break;

                  default:
                    error(parser, "Max buffer length exceeded: " + buffer);
                }
              }
              maxActual = Math.max(maxActual, len);
            }
            parser.bufferCheckPosition =
              clarinet.MAX_BUFFER_LENGTH - maxActual + parser.position;
          }

          function clearBuffers(parser) {
            for (var buffer in buffers) {
              parser[buffer] = buffers[buffer];
            }
          }

          var stringTokenPattern = /[\\"\n]/g;

          function CParser(opt) {
            if (!(this instanceof CParser)) return new CParser(opt);

            var parser = this;
            clearBuffers(parser);
            parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;
            parser.q = parser.c = parser.p = "";
            parser.opt = opt || {};
            parser.closed = parser.closedRoot = parser.sawRoot = false;
            parser.tag = parser.error = null;
            parser.state = S.BEGIN;
            parser.stack = new Array();
            // mostly just for error reporting
            parser.position = parser.column = 0;
            parser.line = 1;
            parser.slashed = false;
            parser.unicodeI = 0;
            parser.unicodeS = null;
            parser.depth = 0;
            emit(parser, "onready");
          }

          CParser.prototype = {
            end: function () {
              end(this);
            },
            write: write,
            resume: function () {
              this.error = null;
              return this;
            },
            close: function () {
              return this.write(null);
            },
          };

          try {
            Stream = __webpack_require__("d485").Stream;
          } catch (ex) {
            Stream = function () {};
          }

          function createStream(opt) {
            return new CStream(opt);
          }

          function CStream(opt) {
            if (!(this instanceof CStream)) return new CStream(opt);

            this._parser = new CParser(opt);
            this.writable = true;
            this.readable = true;

            //var Buffer = this.Buffer || function Buffer () {}; // if we don't have Buffers, fake it so we can do `var instanceof Buffer` and not throw an error
            this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary
            this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read
            this.temp_buffs = {
              "2": new Buffer(2),
              "3": new Buffer(3),
              "4": new Buffer(4),
            }; // for rebuilding chars split before boundary is reached
            this.string = "";

            var me = this;
            Stream.apply(me);

            this._parser.onend = function () {
              me.emit("end");
            };
            this._parser.onerror = function (er) {
              me.emit("error", er);
              me._parser.error = null;
            };

            streamWraps.forEach(function (ev) {
              Object.defineProperty(me, "on" + ev, {
                get: function () {
                  return me._parser["on" + ev];
                },
                set: function (h) {
                  if (!h) {
                    me.removeAllListeners(ev);
                    me._parser["on" + ev] = h;
                    return h;
                  }
                  me.on(ev, h);
                },
                enumerable: true,
                configurable: false,
              });
            });
          }

          CStream.prototype = Object.create(Stream.prototype, {
            constructor: { value: CStream },
          });

          CStream.prototype.write = function (data) {
            data = new Buffer(data);
            for (var i = 0; i < data.length; i++) {
              var n = data[i];

              // check for carry over of a multi byte char split between data chunks
              // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
              if (this.bytes_remaining > 0) {
                for (var j = 0; j < this.bytes_remaining; j++) {
                  this.temp_buffs[this.bytes_in_sequence][
                    this.bytes_in_sequence - this.bytes_remaining + j
                  ] = data[j];
                }
                this.string = this.temp_buffs[
                  this.bytes_in_sequence
                ].toString();
                this.bytes_in_sequence = this.bytes_remaining = 0;

                // move iterator forward by number of byte read during sequencing
                i = i + j - 1;

                // pass data to parser and move forward to parse rest of data
                this._parser.write(this.string);
                this.emit("data", this.string);
                continue;
              }

              // if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
              if (this.bytes_remaining === 0 && n >= 128) {
                if (n >= 194 && n <= 223) this.bytes_in_sequence = 2;
                if (n >= 224 && n <= 239) this.bytes_in_sequence = 3;
                if (n >= 240 && n <= 244) this.bytes_in_sequence = 4;
                if (this.bytes_in_sequence + i > data.length) {
                  // if bytes needed to complete char fall outside data length, we have a boundary split

                  for (var k = 0; k <= data.length - 1 - i; k++) {
                    this.temp_buffs[this.bytes_in_sequence][k] = data[i + k]; // fill temp data of correct size with bytes available in this chunk
                  }
                  this.bytes_remaining =
                    i + this.bytes_in_sequence - data.length;

                  // immediately return as we need another chunk to sequence the character
                  return true;
                } else {
                  this.string = data
                    .slice(i, i + this.bytes_in_sequence)
                    .toString();
                  i = i + this.bytes_in_sequence - 1;

                  this._parser.write(this.string);
                  this.emit("data", this.string);
                  continue;
                }
              }

              // is there a range of characters that are immediately parsable?
              for (var p = i; p < data.length; p++) {
                if (data[p] >= 128) break;
              }
              this.string = data.slice(i, p).toString();
              this._parser.write(this.string);
              this.emit("data", this.string);
              i = p - 1;

              // handle any remaining characters using multibyte logic
              continue;
            }
          };

          CStream.prototype.end = function (chunk) {
            if (chunk && chunk.length) this._parser.write(chunk.toString());
            this._parser.end();
            return true;
          };

          CStream.prototype.on = function (ev, handler) {
            var me = this;
            if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
              me._parser["on" + ev] = function () {
                var args =
                  arguments.length === 1
                    ? [arguments[0]]
                    : Array.apply(null, arguments);
                args.splice(0, 0, ev);
                me.emit.apply(me, args);
              };
            }
            return Stream.prototype.on.call(me, ev, handler);
          };

          CStream.prototype.destroy = function () {
            clearBuffers(this._parser);
            this.emit("close");
          };

          function emit(parser, event, data) {
            if (clarinet.INFO) console.log("-- emit", event, data);
            if (parser[event]) parser[event](data);
          }

          function emitNode(parser, event, data) {
            closeValue(parser);
            emit(parser, event, data);
          }

          function closeValue(parser, event) {
            parser.textNode = textopts(parser.opt, parser.textNode);
            if (parser.textNode !== undefined) {
              emit(parser, event ? event : "onvalue", parser.textNode);
            }
            parser.textNode = undefined;
          }

          function closeNumber(parser) {
            if (parser.numberNode)
              emit(parser, "onvalue", parseFloat(parser.numberNode));
            parser.numberNode = "";
          }

          function textopts(opt, text) {
            if (text === undefined) {
              return text;
            }
            if (opt.trim) text = text.trim();
            if (opt.normalize) text = text.replace(/\s+/g, " ");
            return text;
          }

          function error(parser, er) {
            closeValue(parser);
            er +=
              "\nLine: " +
              parser.line +
              "\nColumn: " +
              parser.column +
              "\nChar: " +
              parser.c;
            er = new Error(er);
            parser.error = er;
            emit(parser, "onerror", er);
            return parser;
          }

          function end(parser) {
            if (parser.state !== S.VALUE || parser.depth !== 0)
              error(parser, "Unexpected end");

            closeValue(parser);
            parser.c = "";
            parser.closed = true;
            emit(parser, "onend");
            CParser.call(parser, parser.opt);
            return parser;
          }

          function isWhitespace(c) {
            return (
              c === Char.carriageReturn ||
              c === Char.lineFeed ||
              c === Char.space ||
              c === Char.tab
            );
          }

          function write(chunk) {
            var parser = this;
            if (this.error) throw this.error;
            if (parser.closed)
              return error(
                parser,
                "Cannot write after close. Assign an onready handler."
              );
            if (chunk === null) return end(parser);
            var i = 0,
              c = chunk.charCodeAt(0),
              p = parser.p;
            if (clarinet.DEBUG) console.log("write -> [" + chunk + "]");
            while (c) {
              p = c;
              parser.c = c = chunk.charCodeAt(i++);
              // if chunk doesnt have next, like streaming char by char
              // this way we need to check if previous is really previous
              // if not we need to reset to what the parser says is the previous
              // from buffer
              if (p !== c) parser.p = p;
              else p = parser.p;

              if (!c) break;

              if (clarinet.DEBUG)
                console.log(i, c, clarinet.STATE[parser.state]);
              parser.position++;
              if (c === Char.lineFeed) {
                parser.line++;
                parser.column = 0;
              } else parser.column++;
              switch (parser.state) {
                case S.BEGIN:
                  if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;
                  else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;
                  else if (!isWhitespace(c))
                    error(parser, "Non-whitespace before {[.");
                  continue;

                case S.OPEN_KEY:
                case S.OPEN_OBJECT:
                  if (isWhitespace(c)) continue;
                  if (parser.state === S.OPEN_KEY)
                    parser.stack.push(S.CLOSE_KEY);
                  else {
                    if (c === Char.closeBrace) {
                      emit(parser, "onopenobject");
                      this.depth++;
                      emit(parser, "oncloseobject");
                      this.depth--;
                      parser.state = parser.stack.pop() || S.VALUE;
                      continue;
                    } else parser.stack.push(S.CLOSE_OBJECT);
                  }
                  if (c === Char.doubleQuote) parser.state = S.STRING;
                  else
                    error(parser, 'Malformed object key should start with "');
                  continue;

                case S.CLOSE_KEY:
                case S.CLOSE_OBJECT:
                  if (isWhitespace(c)) continue;
                  var event = parser.state === S.CLOSE_KEY ? "key" : "object";
                  if (c === Char.colon) {
                    if (parser.state === S.CLOSE_OBJECT) {
                      parser.stack.push(S.CLOSE_OBJECT);
                      closeValue(parser, "onopenobject");
                      this.depth++;
                    } else closeValue(parser, "onkey");
                    parser.state = S.VALUE;
                  } else if (c === Char.closeBrace) {
                    emitNode(parser, "oncloseobject");
                    this.depth--;
                    parser.state = parser.stack.pop() || S.VALUE;
                  } else if (c === Char.comma) {
                    if (parser.state === S.CLOSE_OBJECT)
                      parser.stack.push(S.CLOSE_OBJECT);
                    closeValue(parser);
                    parser.state = S.OPEN_KEY;
                  } else error(parser, "Bad object");
                  continue;

                case S.OPEN_ARRAY: // after an array there always a value
                case S.VALUE:
                  if (isWhitespace(c)) continue;
                  if (parser.state === S.OPEN_ARRAY) {
                    emit(parser, "onopenarray");
                    this.depth++;
                    parser.state = S.VALUE;
                    if (c === Char.closeBracket) {
                      emit(parser, "onclosearray");
                      this.depth--;
                      parser.state = parser.stack.pop() || S.VALUE;
                      continue;
                    } else {
                      parser.stack.push(S.CLOSE_ARRAY);
                    }
                  }
                  if (c === Char.doubleQuote) parser.state = S.STRING;
                  else if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;
                  else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;
                  else if (c === Char.t) parser.state = S.TRUE;
                  else if (c === Char.f) parser.state = S.FALSE;
                  else if (c === Char.n) parser.state = S.NULL;
                  else if (c === Char.minus) {
                    // keep and continue
                    parser.numberNode += "-";
                  } else if (Char._0 <= c && c <= Char._9) {
                    parser.numberNode += String.fromCharCode(c);
                    parser.state = S.NUMBER_DIGIT;
                  } else error(parser, "Bad value");
                  continue;

                case S.CLOSE_ARRAY:
                  if (c === Char.comma) {
                    parser.stack.push(S.CLOSE_ARRAY);
                    closeValue(parser, "onvalue");
                    parser.state = S.VALUE;
                  } else if (c === Char.closeBracket) {
                    emitNode(parser, "onclosearray");
                    this.depth--;
                    parser.state = parser.stack.pop() || S.VALUE;
                  } else if (isWhitespace(c)) continue;
                  else error(parser, "Bad array");
                  continue;

                case S.STRING:
                  if (parser.textNode === undefined) {
                    parser.textNode = "";
                  }

                  // thanks thejh, this is an about 50% performance improvement.
                  var starti = i - 1,
                    slashed = parser.slashed,
                    unicodeI = parser.unicodeI;
                  STRING_BIGLOOP: while (true) {
                    if (clarinet.DEBUG)
                      console.log(i, c, clarinet.STATE[parser.state], slashed);
                    // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
                    while (unicodeI > 0) {
                      parser.unicodeS += String.fromCharCode(c);
                      c = chunk.charCodeAt(i++);
                      parser.position++;
                      if (unicodeI === 4) {
                        // TODO this might be slow? well, probably not used too often anyway
                        parser.textNode += String.fromCharCode(
                          parseInt(parser.unicodeS, 16)
                        );
                        unicodeI = 0;
                        starti = i - 1;
                      } else {
                        unicodeI++;
                      }
                      // we can just break here: no stuff we skipped that still has to be sliced out or so
                      if (!c) break STRING_BIGLOOP;
                    }
                    if (c === Char.doubleQuote && !slashed) {
                      parser.state = parser.stack.pop() || S.VALUE;
                      parser.textNode += chunk.substring(starti, i - 1);
                      parser.position += i - 1 - starti;
                      break;
                    }
                    if (c === Char.backslash && !slashed) {
                      slashed = true;
                      parser.textNode += chunk.substring(starti, i - 1);
                      parser.position += i - 1 - starti;
                      c = chunk.charCodeAt(i++);
                      parser.position++;
                      if (!c) break;
                    }
                    if (slashed) {
                      slashed = false;
                      if (c === Char.n) {
                        parser.textNode += "\n";
                      } else if (c === Char.r) {
                        parser.textNode += "\r";
                      } else if (c === Char.t) {
                        parser.textNode += "\t";
                      } else if (c === Char.f) {
                        parser.textNode += "\f";
                      } else if (c === Char.b) {
                        parser.textNode += "\b";
                      } else if (c === Char.u) {
                        // \uxxxx. meh!
                        unicodeI = 1;
                        parser.unicodeS = "";
                      } else {
                        parser.textNode += String.fromCharCode(c);
                      }
                      c = chunk.charCodeAt(i++);
                      parser.position++;
                      starti = i - 1;
                      if (!c) break;
                      else continue;
                    }

                    stringTokenPattern.lastIndex = i;
                    var reResult = stringTokenPattern.exec(chunk);
                    if (reResult === null) {
                      i = chunk.length + 1;
                      parser.textNode += chunk.substring(starti, i - 1);
                      parser.position += i - 1 - starti;
                      break;
                    }
                    i = reResult.index + 1;
                    c = chunk.charCodeAt(reResult.index);
                    if (!c) {
                      parser.textNode += chunk.substring(starti, i - 1);
                      parser.position += i - 1 - starti;
                      break;
                    }
                  }
                  parser.slashed = slashed;
                  parser.unicodeI = unicodeI;
                  continue;

                case S.TRUE:
                  if (c === Char.r) parser.state = S.TRUE2;
                  else error(parser, "Invalid true started with t" + c);
                  continue;

                case S.TRUE2:
                  if (c === Char.u) parser.state = S.TRUE3;
                  else error(parser, "Invalid true started with tr" + c);
                  continue;

                case S.TRUE3:
                  if (c === Char.e) {
                    emit(parser, "onvalue", true);
                    parser.state = parser.stack.pop() || S.VALUE;
                  } else error(parser, "Invalid true started with tru" + c);
                  continue;

                case S.FALSE:
                  if (c === Char.a) parser.state = S.FALSE2;
                  else error(parser, "Invalid false started with f" + c);
                  continue;

                case S.FALSE2:
                  if (c === Char.l) parser.state = S.FALSE3;
                  else error(parser, "Invalid false started with fa" + c);
                  continue;

                case S.FALSE3:
                  if (c === Char.s) parser.state = S.FALSE4;
                  else error(parser, "Invalid false started with fal" + c);
                  continue;

                case S.FALSE4:
                  if (c === Char.e) {
                    emit(parser, "onvalue", false);
                    parser.state = parser.stack.pop() || S.VALUE;
                  } else error(parser, "Invalid false started with fals" + c);
                  continue;

                case S.NULL:
                  if (c === Char.u) parser.state = S.NULL2;
                  else error(parser, "Invalid null started with n" + c);
                  continue;

                case S.NULL2:
                  if (c === Char.l) parser.state = S.NULL3;
                  else error(parser, "Invalid null started with nu" + c);
                  continue;

                case S.NULL3:
                  if (c === Char.l) {
                    emit(parser, "onvalue", null);
                    parser.state = parser.stack.pop() || S.VALUE;
                  } else error(parser, "Invalid null started with nul" + c);
                  continue;

                case S.NUMBER_DECIMAL_POINT:
                  if (c === Char.period) {
                    parser.numberNode += ".";
                    parser.state = S.NUMBER_DIGIT;
                  } else error(parser, "Leading zero not followed by .");
                  continue;

                case S.NUMBER_DIGIT:
                  if (Char._0 <= c && c <= Char._9)
                    parser.numberNode += String.fromCharCode(c);
                  else if (c === Char.period) {
                    if (parser.numberNode.indexOf(".") !== -1)
                      error(parser, "Invalid number has two dots");
                    parser.numberNode += ".";
                  } else if (c === Char.e || c === Char.E) {
                    if (
                      parser.numberNode.indexOf("e") !== -1 ||
                      parser.numberNode.indexOf("E") !== -1
                    )
                      error(parser, "Invalid number has two exponential");
                    parser.numberNode += "e";
                  } else if (c === Char.plus || c === Char.minus) {
                    if (!(p === Char.e || p === Char.E))
                      error(parser, "Invalid symbol in number");
                    parser.numberNode += String.fromCharCode(c);
                  } else {
                    closeNumber(parser);
                    i--; // go back one
                    parser.state = parser.stack.pop() || S.VALUE;
                  }
                  continue;

                default:
                  error(parser, "Unknown state: " + parser.state);
              }
            }
            if (parser.position >= parser.bufferCheckPosition)
              checkBufferLength(parser);
            return parser;
          }
        })(false ? undefined : exports);

        /* WEBPACK VAR INJECTION */
      }.call(
        this,
        __webpack_require__("4362"),
        __webpack_require__("b639").Buffer
      ));

      /***/
    },

    /***/ "3fb5": /***/ function (module, exports) {
      if (typeof Object.create === "function") {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            });
          }
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }

      /***/
    },

    /***/ "429b": /***/ function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("faa1").EventEmitter;

      /***/
    },

    /***/ "4362": /***/ function (module, exports, __webpack_require__) {
      exports.nextTick = function nextTick(fn) {
        var args = Array.prototype.slice.call(arguments);
        args.shift();
        setTimeout(function () {
          fn.apply(null, args);
        }, 0);
      };

      exports.platform = exports.arch = exports.execPath = exports.title =
        "browser";
      exports.pid = 1;
      exports.browser = true;
      exports.env = {};
      exports.argv = [];

      exports.binding = function (name) {
        throw new Error("No such module. (Possibly not yet loaded)");
      };

      (function () {
        var cwd = "/";
        var path;
        exports.cwd = function () {
          return cwd;
        };
        exports.chdir = function (dir) {
          if (!path) path = __webpack_require__("df7c");
          cwd = path.resolve(dir, cwd);
        };
      })();

      exports.exit = exports.kill = exports.umask = exports.dlopen = exports.uptime = exports.memoryUsage = exports.uvCounters = function () {};
      exports.features = {};

      /***/
    },

    /***/ "44bc": /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__
    ) {
      "use strict";
      /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Plan_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        "2c34"
      );
      /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Plan_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
        _node_modules_mini_css_extract_plugin_dist_loader_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Plan_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__
      );
      /* unused harmony reexport * */

      /***/
    },

    /***/ "4623": /***/ function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__,
        __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__;
      /*! Moment Duration Format v2.2.2
       *  https://github.com/jsmreese/moment-duration-format
       *  Date: 2018-02-16
       *
       *  Duration format plugin function for the Moment.js library
       *  http://momentjs.com/
       *
       *  Copyright 2018 John Madhavan-Reese
       *  Released under the MIT license
       */

      (function (root, factory) {
        if (true) {
          // AMD. Register as an anonymous module.
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__("c1df")]),
          (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
          (__WEBPACK_AMD_DEFINE_RESULT__ =
            typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
              ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                  exports,
                  __WEBPACK_AMD_DEFINE_ARRAY__
                )
              : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }

        if (root) {
          // Globals.
          root.momentDurationFormatSetup = root.moment
            ? factory(root.moment)
            : factory;
        }
      })(this, function (moment) {
        // `Number#tolocaleString` is tested on plugin initialization.
        // If the feature test passes, `toLocaleStringWorks` will be set to `true` and the
        // native function will be used to generate formatted output. If the feature
        // test fails, the fallback format function internal to this plugin will be
        // used.
        var toLocaleStringWorks = false;

        // `Number#toLocaleString` rounds incorrectly for select numbers in Microsoft
        // environments (Edge, IE11, Windows Phone) and possibly other environments.
        // If the rounding test fails and `toLocaleString` will be used for formatting,
        // the plugin will "pre-round" number values using the fallback number format
        // function before passing them to `toLocaleString` for final formatting.
        var toLocaleStringRoundingWorks = false;

        // `Intl.NumberFormat#format` is tested on plugin initialization.
        // If the feature test passes, `intlNumberFormatRoundingWorks` will be set to
        // `true` and the native function will be used to generate formatted output.
        // If the feature test fails, either `Number#tolocaleString` (if
        // `toLocaleStringWorks` is `true`), or the fallback format function internal
        //  to this plugin will be used.
        var intlNumberFormatWorks = false;

        // `Intl.NumberFormat#format` rounds incorrectly for select numbers in Microsoft
        // environments (Edge, IE11, Windows Phone) and possibly other environments.
        // If the rounding test fails and `Intl.NumberFormat#format` will be used for
        // formatting, the plugin will "pre-round" number values using the fallback number
        // format function before passing them to `Intl.NumberFormat#format` for final
        // formatting.
        var intlNumberFormatRoundingWorks = false;

        // Token type names in order of descending magnitude.
        var types = "escape years months weeks days hours minutes seconds milliseconds general".split(
          " "
        );

        var bubbles = [
          {
            type: "seconds",
            targets: [
              { type: "minutes", value: 60 },
              { type: "hours", value: 3600 },
              { type: "days", value: 86400 },
              { type: "weeks", value: 604800 },
              { type: "months", value: 2678400 },
              { type: "years", value: 31536000 },
            ],
          },
          {
            type: "minutes",
            targets: [
              { type: "hours", value: 60 },
              { type: "days", value: 1440 },
              { type: "weeks", value: 10080 },
              { type: "months", value: 44640 },
              { type: "years", value: 525600 },
            ],
          },
          {
            type: "hours",
            targets: [
              { type: "days", value: 24 },
              { type: "weeks", value: 168 },
              { type: "months", value: 744 },
              { type: "years", value: 8760 },
            ],
          },
          {
            type: "days",
            targets: [
              { type: "weeks", value: 7 },
              { type: "months", value: 31 },
              { type: "years", value: 365 },
            ],
          },
          {
            type: "months",
            targets: [{ type: "years", value: 12 }],
          },
        ];

        // stringIncludes
        function stringIncludes(str, search) {
          if (search.length > str.length) {
            return false;
          }

          return str.indexOf(search) !== -1;
        }

        // repeatZero(qty)
        // Returns "0" repeated `qty` times.
        // `qty` must be a integer >= 0.
        function repeatZero(qty) {
          var result = "";

          while (qty) {
            result += "0";
            qty -= 1;
          }

          return result;
        }

        function stringRound(digits) {
          var digitsArray = digits.split("").reverse();
          var i = 0;
          var carry = true;

          while (carry && i < digitsArray.length) {
            if (i) {
              if (digitsArray[i] === "9") {
                digitsArray[i] = "0";
              } else {
                digitsArray[i] = (parseInt(digitsArray[i], 10) + 1).toString();
                carry = false;
              }
            } else {
              if (parseInt(digitsArray[i], 10) < 5) {
                carry = false;
              }

              digitsArray[i] = "0";
            }

            i += 1;
          }

          if (carry) {
            digitsArray.push("1");
          }

          return digitsArray.reverse().join("");
        }

        // cachedNumberFormat
        // Returns an `Intl.NumberFormat` instance for the given locale and configuration.
        // On first use of a particular configuration, the instance is cached for fast
        // repeat access.
        function cachedNumberFormat(locale, options) {
          // Create a sorted, stringified version of `options`
          // for use as part of the cache key
          var optionsString = map(keys(options).sort(), function (key) {
            return key + ":" + options[key];
          }).join(",");

          // Set our cache key
          var cacheKey = locale + "+" + optionsString;

          // If we don't have this configuration cached, configure and cache it
          if (!cachedNumberFormat.cache[cacheKey]) {
            cachedNumberFormat.cache[cacheKey] = Intl.NumberFormat(
              locale,
              options
            );
          }

          // Return the cached version of this configuration
          return cachedNumberFormat.cache[cacheKey];
        }
        cachedNumberFormat.cache = {};

        // formatNumber
        // Formats any number greater than or equal to zero using these options:
        // - userLocale
        // - useToLocaleString
        // - useGrouping
        // - grouping
        // - maximumSignificantDigits
        // - minimumIntegerDigits
        // - fractionDigits
        // - groupingSeparator
        // - decimalSeparator
        //
        // `useToLocaleString` will use `Intl.NumberFormat` or `toLocaleString` for formatting.
        // `userLocale` option is passed through to the formatting function.
        // `fractionDigits` is passed through to `maximumFractionDigits` and `minimumFractionDigits`
        // Using `maximumSignificantDigits` will override `minimumIntegerDigits` and `fractionDigits`.
        function formatNumber(number, options, userLocale) {
          var useToLocaleString = options.useToLocaleString;
          var useGrouping = options.useGrouping;
          var grouping = useGrouping && options.grouping.slice();
          var maximumSignificantDigits = options.maximumSignificantDigits;
          var minimumIntegerDigits = options.minimumIntegerDigits || 1;
          var fractionDigits = options.fractionDigits || 0;
          var groupingSeparator = options.groupingSeparator;
          var decimalSeparator = options.decimalSeparator;

          if (useToLocaleString && userLocale) {
            var localeStringOptions = {
              minimumIntegerDigits: minimumIntegerDigits,
              useGrouping: useGrouping,
            };

            if (fractionDigits) {
              localeStringOptions.maximumFractionDigits = fractionDigits;
              localeStringOptions.minimumFractionDigits = fractionDigits;
            }

            // toLocaleString output is "0.0" instead of "0" for HTC browsers
            // when maximumSignificantDigits is set. See #96.
            if (maximumSignificantDigits && number > 0) {
              localeStringOptions.maximumSignificantDigits = maximumSignificantDigits;
            }

            if (intlNumberFormatWorks) {
              if (!intlNumberFormatRoundingWorks) {
                var roundingOptions = extend({}, options);
                roundingOptions.useGrouping = false;
                roundingOptions.decimalSeparator = ".";
                number = parseFloat(formatNumber(number, roundingOptions), 10);
              }

              return cachedNumberFormat(userLocale, localeStringOptions).format(
                number
              );
            } else {
              if (!toLocaleStringRoundingWorks) {
                var roundingOptions = extend({}, options);
                roundingOptions.useGrouping = false;
                roundingOptions.decimalSeparator = ".";
                number = parseFloat(formatNumber(number, roundingOptions), 10);
              }

              return number.toLocaleString(userLocale, localeStringOptions);
            }
          }

          var numberString;

          // Add 1 to digit output length for floating point errors workaround. See below.
          if (maximumSignificantDigits) {
            numberString = number.toPrecision(maximumSignificantDigits + 1);
          } else {
            numberString = number.toFixed(fractionDigits + 1);
          }

          var integerString;
          var fractionString;
          var exponentString;

          var temp = numberString.split("e");

          exponentString = temp[1] || "";

          temp = temp[0].split(".");

          fractionString = temp[1] || "";
          integerString = temp[0] || "";

          // Workaround for floating point errors in `toFixed` and `toPrecision`.
          // (3.55).toFixed(1); --> "3.5"
          // (123.55 - 120).toPrecision(2); --> "3.5"
          // (123.55 - 120); --> 3.549999999999997
          // (123.55 - 120).toFixed(2); --> "3.55"
          // Round by examing the string output of the next digit.

          // *************** Implement String Rounding here ***********************
          // Check integerString + fractionString length of toPrecision before rounding.
          // Check length of fractionString from toFixed output before rounding.
          var integerLength = integerString.length;
          var fractionLength = fractionString.length;
          var digitCount = integerLength + fractionLength;
          var digits = integerString + fractionString;

          if (
            (maximumSignificantDigits &&
              digitCount === maximumSignificantDigits + 1) ||
            (!maximumSignificantDigits && fractionLength === fractionDigits + 1)
          ) {
            // Round digits.
            digits = stringRound(digits);

            if (digits.length === digitCount + 1) {
              integerLength = integerLength + 1;
            }

            // Discard final fractionDigit.
            if (fractionLength) {
              digits = digits.slice(0, -1);
            }

            // Separate integer and fraction.
            integerString = digits.slice(0, integerLength);
            fractionString = digits.slice(integerLength);
          }

          // Trim trailing zeroes from fractionString because toPrecision outputs
          // precision, not significant digits.
          if (maximumSignificantDigits) {
            fractionString = fractionString.replace(/0*$/, "");
          }

          // Handle exponent.
          var exponent = parseInt(exponentString, 10);

          if (exponent > 0) {
            if (fractionString.length <= exponent) {
              fractionString =
                fractionString + repeatZero(exponent - fractionString.length);

              integerString = integerString + fractionString;
              fractionString = "";
            } else {
              integerString = integerString + fractionString.slice(0, exponent);
              fractionString = fractionString.slice(exponent);
            }
          } else if (exponent < 0) {
            fractionString =
              repeatZero(Math.abs(exponent) - integerString.length) +
              integerString +
              fractionString;

            integerString = "0";
          }

          if (!maximumSignificantDigits) {
            // Trim or pad fraction when not using maximumSignificantDigits.
            fractionString = fractionString.slice(0, fractionDigits);

            if (fractionString.length < fractionDigits) {
              fractionString =
                fractionString +
                repeatZero(fractionDigits - fractionString.length);
            }

            // Pad integer when using minimumIntegerDigits
            // and not using maximumSignificantDigits.
            if (integerString.length < minimumIntegerDigits) {
              integerString =
                repeatZero(minimumIntegerDigits - integerString.length) +
                integerString;
            }
          }

          var formattedString = "";

          // Handle grouping.
          if (useGrouping) {
            temp = integerString;
            var group;

            while (temp.length) {
              if (grouping.length) {
                group = grouping.shift();
              }

              if (formattedString) {
                formattedString = groupingSeparator + formattedString;
              }

              formattedString = temp.slice(-group) + formattedString;

              temp = temp.slice(0, -group);
            }
          } else {
            formattedString = integerString;
          }

          // Add decimalSeparator and fraction.
          if (fractionString) {
            formattedString =
              formattedString + decimalSeparator + fractionString;
          }

          return formattedString;
        }

        // durationLabelCompare
        function durationLabelCompare(a, b) {
          if (a.label.length > b.label.length) {
            return -1;
          }

          if (a.label.length < b.label.length) {
            return 1;
          }

          // a must be equal to b
          return 0;
        }

        // durationGetLabels
        function durationGetLabels(token, localeData) {
          var labels = [];

          each(keys(localeData), function (localeDataKey) {
            if (localeDataKey.slice(0, 15) !== "_durationLabels") {
              return;
            }

            var labelType = localeDataKey.slice(15).toLowerCase();

            each(keys(localeData[localeDataKey]), function (labelKey) {
              if (labelKey.slice(0, 1) === token) {
                labels.push({
                  type: labelType,
                  key: labelKey,
                  label: localeData[localeDataKey][labelKey],
                });
              }
            });
          });

          return labels;
        }

        // durationPluralKey
        function durationPluralKey(token, integerValue, decimalValue) {
          // Singular for a value of `1`, but not for `1.0`.
          if (integerValue === 1 && decimalValue === null) {
            return token;
          }

          return token + token;
        }

        var engLocale = {
          durationLabelsStandard: {
            S: "millisecond",
            SS: "milliseconds",
            s: "second",
            ss: "seconds",
            m: "minute",
            mm: "minutes",
            h: "hour",
            hh: "hours",
            d: "day",
            dd: "days",
            w: "week",
            ww: "weeks",
            M: "month",
            MM: "months",
            y: "year",
            yy: "years",
          },
          durationLabelsShort: {
            S: "msec",
            SS: "msecs",
            s: "sec",
            ss: "secs",
            m: "min",
            mm: "mins",
            h: "hr",
            hh: "hrs",
            d: "dy",
            dd: "dys",
            w: "wk",
            ww: "wks",
            M: "mo",
            MM: "mos",
            y: "yr",
            yy: "yrs",
          },
          durationTimeTemplates: {
            HMS: "h:mm:ss",
            HM: "h:mm",
            MS: "m:ss",
          },
          durationLabelTypes: [
            { type: "standard", string: "__" },
            { type: "short", string: "_" },
          ],
          durationPluralKey: durationPluralKey,
        };

        // isArray
        function isArray(array) {
          return Object.prototype.toString.call(array) === "[object Array]";
        }

        // isObject
        function isObject(obj) {
          return Object.prototype.toString.call(obj) === "[object Object]";
        }

        // findLast
        function findLast(array, callback) {
          var index = array.length;

          while ((index -= 1)) {
            if (callback(array[index])) {
              return array[index];
            }
          }
        }

        // find
        function find(array, callback) {
          var index = 0;

          var max = (array && array.length) || 0;

          var match;

          if (typeof callback !== "function") {
            match = callback;
            callback = function (item) {
              return item === match;
            };
          }

          while (index < max) {
            if (callback(array[index])) {
              return array[index];
            }
            index += 1;
          }
        }

        // each
        function each(array, callback) {
          var index = 0,
            max = array.length;

          if (!array || !max) {
            return;
          }

          while (index < max) {
            if (callback(array[index], index) === false) {
              return;
            }
            index += 1;
          }
        }

        // map
        function map(array, callback) {
          var index = 0,
            max = array.length,
            ret = [];

          if (!array || !max) {
            return ret;
          }

          while (index < max) {
            ret[index] = callback(array[index], index);
            index += 1;
          }

          return ret;
        }

        // pluck
        function pluck(array, prop) {
          return map(array, function (item) {
            return item[prop];
          });
        }

        // compact
        function compact(array) {
          var ret = [];

          each(array, function (item) {
            if (item) {
              ret.push(item);
            }
          });

          return ret;
        }

        // unique
        function unique(array) {
          var ret = [];

          each(array, function (_a) {
            if (!find(ret, _a)) {
              ret.push(_a);
            }
          });

          return ret;
        }

        // intersection
        function intersection(a, b) {
          var ret = [];

          each(a, function (_a) {
            each(b, function (_b) {
              if (_a === _b) {
                ret.push(_a);
              }
            });
          });

          return unique(ret);
        }

        // rest
        function rest(array, callback) {
          var ret = [];

          each(array, function (item, index) {
            if (!callback(item)) {
              ret = array.slice(index);
              return false;
            }
          });

          return ret;
        }

        // initial
        function initial(array, callback) {
          var reversed = array.slice().reverse();

          return rest(reversed, callback).reverse();
        }

        // extend
        function extend(a, b) {
          for (var key in b) {
            if (b.hasOwnProperty(key)) {
              a[key] = b[key];
            }
          }

          return a;
        }

        // keys
        function keys(a) {
          var ret = [];

          for (var key in a) {
            if (a.hasOwnProperty(key)) {
              ret.push(key);
            }
          }

          return ret;
        }

        // any
        function any(array, callback) {
          var index = 0,
            max = array.length;

          if (!array || !max) {
            return false;
          }

          while (index < max) {
            if (callback(array[index], index) === true) {
              return true;
            }
            index += 1;
          }

          return false;
        }

        // flatten
        function flatten(array) {
          var ret = [];

          each(array, function (child) {
            ret = ret.concat(child);
          });

          return ret;
        }

        function toLocaleStringSupportsLocales() {
          var number = 0;
          try {
            number.toLocaleString("i");
          } catch (e) {
            return e.name === "RangeError";
          }
          return false;
        }

        function featureTestFormatterRounding(formatter) {
          return (
            formatter(3.55, "en", {
              useGrouping: false,
              minimumIntegerDigits: 1,
              minimumFractionDigits: 1,
              maximumFractionDigits: 1,
            }) === "3.6"
          );
        }

        function featureTestFormatter(formatter) {
          var passed = true;

          // Test minimumIntegerDigits.
          passed =
            passed && formatter(1, "en", { minimumIntegerDigits: 1 }) === "1";
          passed =
            passed && formatter(1, "en", { minimumIntegerDigits: 2 }) === "01";
          passed =
            passed && formatter(1, "en", { minimumIntegerDigits: 3 }) === "001";
          if (!passed) {
            return false;
          }

          // Test maximumFractionDigits and minimumFractionDigits.
          passed =
            passed &&
            formatter(99.99, "en", {
              maximumFractionDigits: 0,
              minimumFractionDigits: 0,
            }) === "100";
          passed =
            passed &&
            formatter(99.99, "en", {
              maximumFractionDigits: 1,
              minimumFractionDigits: 1,
            }) === "100.0";
          passed =
            passed &&
            formatter(99.99, "en", {
              maximumFractionDigits: 2,
              minimumFractionDigits: 2,
            }) === "99.99";
          passed =
            passed &&
            formatter(99.99, "en", {
              maximumFractionDigits: 3,
              minimumFractionDigits: 3,
            }) === "99.990";
          if (!passed) {
            return false;
          }

          // Test maximumSignificantDigits.
          passed =
            passed &&
            formatter(99.99, "en", { maximumSignificantDigits: 1 }) === "100";
          passed =
            passed &&
            formatter(99.99, "en", { maximumSignificantDigits: 2 }) === "100";
          passed =
            passed &&
            formatter(99.99, "en", { maximumSignificantDigits: 3 }) === "100";
          passed =
            passed &&
            formatter(99.99, "en", { maximumSignificantDigits: 4 }) === "99.99";
          passed =
            passed &&
            formatter(99.99, "en", { maximumSignificantDigits: 5 }) === "99.99";
          if (!passed) {
            return false;
          }

          // Test grouping.
          passed =
            passed && formatter(1000, "en", { useGrouping: true }) === "1,000";
          passed =
            passed && formatter(1000, "en", { useGrouping: false }) === "1000";
          if (!passed) {
            return false;
          }

          return true;
        }

        // durationsFormat(durations [, template] [, precision] [, settings])
        function durationsFormat() {
          var args = [].slice.call(arguments);
          var settings = {};
          var durations;

          // Parse arguments.
          each(args, function (arg, index) {
            if (!index) {
              if (!isArray(arg)) {
                throw "Expected array as the first argument to durationsFormat.";
              }

              durations = arg;
            }

            if (typeof arg === "string" || typeof arg === "function") {
              settings.template = arg;
              return;
            }

            if (typeof arg === "number") {
              settings.precision = arg;
              return;
            }

            if (isObject(arg)) {
              extend(settings, arg);
            }
          });

          if (!durations || !durations.length) {
            return [];
          }

          settings.returnMomentTypes = true;

          var formattedDurations = map(durations, function (dur) {
            return dur.format(settings);
          });

          // Merge token types from all durations.
          var outputTypes = intersection(
            types,
            unique(pluck(flatten(formattedDurations), "type"))
          );

          var largest = settings.largest;

          if (largest) {
            outputTypes = outputTypes.slice(0, largest);
          }

          settings.returnMomentTypes = false;
          settings.outputTypes = outputTypes;

          return map(durations, function (dur) {
            return dur.format(settings);
          });
        }

        // durationFormat([template] [, precision] [, settings])
        function durationFormat() {
          var args = [].slice.call(arguments);
          var settings = extend({}, this.format.defaults);

          // Keep a shadow copy of this moment for calculating remainders.
          // Perform all calculations on positive duration value, handle negative
          // sign at the very end.
          var asMilliseconds = this.asMilliseconds();
          var asMonths = this.asMonths();

          // Treat invalid durations as having a value of 0 milliseconds.
          if (typeof this.isValid === "function" && this.isValid() === false) {
            asMilliseconds = 0;
            asMonths = 0;
          }

          var isNegative = asMilliseconds < 0;

          // Two shadow copies are needed because of the way moment.js handles
          // duration arithmetic for years/months and for weeks/days/hours/minutes/seconds.
          var remainder = moment.duration(
            Math.abs(asMilliseconds),
            "milliseconds"
          );
          var remainderMonths = moment.duration(Math.abs(asMonths), "months");

          // Parse arguments.
          each(args, function (arg) {
            if (typeof arg === "string" || typeof arg === "function") {
              settings.template = arg;
              return;
            }

            if (typeof arg === "number") {
              settings.precision = arg;
              return;
            }

            if (isObject(arg)) {
              extend(settings, arg);
            }
          });

          var momentTokens = {
            years: "y",
            months: "M",
            weeks: "w",
            days: "d",
            hours: "h",
            minutes: "m",
            seconds: "s",
            milliseconds: "S",
          };

          var tokenDefs = {
            escape: /\[(.+?)\]/,
            years: /\*?[Yy]+/,
            months: /\*?M+/,
            weeks: /\*?[Ww]+/,
            days: /\*?[Dd]+/,
            hours: /\*?[Hh]+/,
            minutes: /\*?m+/,
            seconds: /\*?s+/,
            milliseconds: /\*?S+/,
            general: /.+?/,
          };

          // Types array is available in the template function.
          settings.types = types;

          var typeMap = function (token) {
            return find(types, function (type) {
              return tokenDefs[type].test(token);
            });
          };

          var tokenizer = new RegExp(
            map(types, function (type) {
              return tokenDefs[type].source;
            }).join("|"),
            "g"
          );

          // Current duration object is available in the template function.
          settings.duration = this;

          // Eval template function and cache template string.
          var template =
            typeof settings.template === "function"
              ? settings.template.apply(settings)
              : settings.template;

          // outputTypes and returnMomentTypes are settings to support durationsFormat().

          // outputTypes is an array of moment token types that determines
          // the tokens returned in formatted output. This option overrides
          // trim, largest, stopTrim, etc.
          var outputTypes = settings.outputTypes;

          // returnMomentTypes is a boolean that sets durationFormat to return
          // the processed momentTypes instead of formatted output.
          var returnMomentTypes = settings.returnMomentTypes;

          var largest = settings.largest;

          // Setup stopTrim array of token types.
          var stopTrim = [];

          if (!outputTypes) {
            if (isArray(settings.stopTrim)) {
              settings.stopTrim = settings.stopTrim.join("");
            }

            // Parse stopTrim string to create token types array.
            if (settings.stopTrim) {
              each(settings.stopTrim.match(tokenizer), function (token) {
                var type = typeMap(token);

                if (type === "escape" || type === "general") {
                  return;
                }

                stopTrim.push(type);
              });
            }
          }

          // Cache moment's locale data.
          var localeData = moment.localeData();

          if (!localeData) {
            localeData = {};
          }

          // Fall back to this plugin's `eng` extension.
          each(keys(engLocale), function (key) {
            if (typeof engLocale[key] === "function") {
              if (!localeData[key]) {
                localeData[key] = engLocale[key];
              }

              return;
            }

            if (!localeData["_" + key]) {
              localeData["_" + key] = engLocale[key];
            }
          });

          // Replace Duration Time Template strings.
          // For locale `eng`: `_HMS_`, `_HM_`, and `_MS_`.
          each(keys(localeData._durationTimeTemplates), function (item) {
            template = template.replace(
              "_" + item + "_",
              localeData._durationTimeTemplates[item]
            );
          });

          // Determine user's locale.
          var userLocale = settings.userLocale || moment.locale();

          var useLeftUnits = settings.useLeftUnits;
          var usePlural = settings.usePlural;
          var precision = settings.precision;
          var forceLength = settings.forceLength;
          var useGrouping = settings.useGrouping;
          var trunc = settings.trunc;

          // Use significant digits only when precision is greater than 0.
          var useSignificantDigits =
            settings.useSignificantDigits && precision > 0;
          var significantDigits = useSignificantDigits ? settings.precision : 0;
          var significantDigitsCache = significantDigits;

          var minValue = settings.minValue;
          var isMinValue = false;

          var maxValue = settings.maxValue;
          var isMaxValue = false;

          // formatNumber fallback options.
          var useToLocaleString = settings.useToLocaleString;
          var groupingSeparator = settings.groupingSeparator;
          var decimalSeparator = settings.decimalSeparator;
          var grouping = settings.grouping;

          useToLocaleString =
            useToLocaleString && (toLocaleStringWorks || intlNumberFormatWorks);

          // Trim options.
          var trim = settings.trim;

          if (isArray(trim)) {
            trim = trim.join(" ");
          }

          if (trim === null && (largest || maxValue || useSignificantDigits)) {
            trim = "all";
          }

          if (
            trim === null ||
            trim === true ||
            trim === "left" ||
            trim === "right"
          ) {
            trim = "large";
          }

          if (trim === false) {
            trim = "";
          }

          var trimIncludes = function (item) {
            return item.test(trim);
          };

          var rLarge = /large/;
          var rSmall = /small/;
          var rBoth = /both/;
          var rMid = /mid/;
          var rAll = /^all|[^sm]all/;
          var rFinal = /final/;

          var trimLarge =
            largest > 0 || any([rLarge, rBoth, rAll], trimIncludes);
          var trimSmall = any([rSmall, rBoth, rAll], trimIncludes);
          var trimMid = any([rMid, rAll], trimIncludes);
          var trimFinal = any([rFinal, rAll], trimIncludes);

          // Parse format string to create raw tokens array.
          var rawTokens = map(template.match(tokenizer), function (
            token,
            index
          ) {
            var type = typeMap(token);

            if (token.slice(0, 1) === "*") {
              token = token.slice(1);

              if (type !== "escape" && type !== "general") {
                stopTrim.push(type);
              }
            }

            return {
              index: index,
              length: token.length,
              text: "",

              // Replace escaped tokens with the non-escaped token text.
              token:
                type === "escape"
                  ? token.replace(tokenDefs.escape, "$1")
                  : token,

              // Ignore type on non-moment tokens.
              type: type === "escape" || type === "general" ? null : type,
            };
          });

          // Associate text tokens with moment tokens.
          var currentToken = {
            index: 0,
            length: 0,
            token: "",
            text: "",
            type: null,
          };

          var tokens = [];

          if (useLeftUnits) {
            rawTokens.reverse();
          }

          each(rawTokens, function (token) {
            if (token.type) {
              if (currentToken.type || currentToken.text) {
                tokens.push(currentToken);
              }

              currentToken = token;

              return;
            }

            if (useLeftUnits) {
              currentToken.text = token.token + currentToken.text;
            } else {
              currentToken.text += token.token;
            }
          });

          if (currentToken.type || currentToken.text) {
            tokens.push(currentToken);
          }

          if (useLeftUnits) {
            tokens.reverse();
          }

          // Find unique moment token types in the template in order of
          // descending magnitude.
          var momentTypes = intersection(
            types,
            unique(compact(pluck(tokens, "type")))
          );

          // Exit early if there are no moment token types.
          if (!momentTypes.length) {
            return pluck(tokens, "text").join("");
          }

          // Calculate values for each moment type in the template.
          // For processing the settings, values are associated with moment types.
          // Values will be assigned to tokens at the last step in order to
          // assume nothing about frequency or order of tokens in the template.
          momentTypes = map(momentTypes, function (momentType, index) {
            // Is this the least-magnitude moment token found?
            var isSmallest = index + 1 === momentTypes.length;

            // Is this the greatest-magnitude moment token found?
            var isLargest = !index;

            // Get the raw value in the current units.
            var rawValue;

            if (momentType === "years" || momentType === "months") {
              rawValue = remainderMonths.as(momentType);
            } else {
              rawValue = remainder.as(momentType);
            }

            var wholeValue = Math.floor(rawValue);
            var decimalValue = rawValue - wholeValue;

            var token = find(tokens, function (token) {
              return momentType === token.type;
            });

            if (isLargest && maxValue && rawValue > maxValue) {
              isMaxValue = true;
            }

            if (
              isSmallest &&
              minValue &&
              Math.abs(settings.duration.as(momentType)) < minValue
            ) {
              isMinValue = true;
            }

            // Note the length of the largest-magnitude moment token:
            // if it is greater than one and forceLength is not set,
            // then default forceLength to `true`.
            //
            // Rationale is this: If the template is "h:mm:ss" and the
            // moment value is 5 minutes, the user-friendly output is
            // "5:00", not "05:00". We shouldn't pad the `minutes` token
            // even though it has length of two if the template is "h:mm:ss";
            //
            // If the minutes output should always include the leading zero
            // even when the hour is trimmed then set `{ forceLength: true }`
            // to output "05:00". If the template is "hh:mm:ss", the user
            // clearly wanted everything padded so we should output "05:00";
            //
            // If the user wants the full padded output, they can use
            // template "hh:mm:ss" and set `{ trim: false }` to output
            // "00:05:00".
            if (isLargest && forceLength === null && token.length > 1) {
              forceLength = true;
            }

            // Update remainder.
            remainder.subtract(wholeValue, momentType);
            remainderMonths.subtract(wholeValue, momentType);

            return {
              rawValue: rawValue,
              wholeValue: wholeValue,
              // Decimal value is only retained for the least-magnitude
              // moment type in the format template.
              decimalValue: isSmallest ? decimalValue : 0,
              isSmallest: isSmallest,
              isLargest: isLargest,
              type: momentType,
              // Tokens can appear multiple times in a template string,
              // but all instances must share the same length.
              tokenLength: token.length,
            };
          });

          var truncMethod = trunc ? Math.floor : Math.round;
          var truncate = function (value, places) {
            var factor = Math.pow(10, places);
            return truncMethod(value * factor) / factor;
          };

          var foundFirst = false;
          var bubbled = false;

          var formatValue = function (momentType, index) {
            var formatOptions = {
              useGrouping: useGrouping,
              groupingSeparator: groupingSeparator,
              decimalSeparator: decimalSeparator,
              grouping: grouping,
              useToLocaleString: useToLocaleString,
            };

            if (useSignificantDigits) {
              if (significantDigits <= 0) {
                momentType.rawValue = 0;
                momentType.wholeValue = 0;
                momentType.decimalValue = 0;
              } else {
                formatOptions.maximumSignificantDigits = significantDigits;
                momentType.significantDigits = significantDigits;
              }
            }

            if (isMaxValue && !bubbled) {
              if (momentType.isLargest) {
                momentType.wholeValue = maxValue;
                momentType.decimalValue = 0;
              } else {
                momentType.wholeValue = 0;
                momentType.decimalValue = 0;
              }
            }

            if (isMinValue && !bubbled) {
              if (momentType.isSmallest) {
                momentType.wholeValue = minValue;
                momentType.decimalValue = 0;
              } else {
                momentType.wholeValue = 0;
                momentType.decimalValue = 0;
              }
            }

            if (
              momentType.isSmallest ||
              (momentType.significantDigits &&
                momentType.significantDigits -
                  momentType.wholeValue.toString().length <=
                  0)
            ) {
              // Apply precision to least significant token value.
              if (precision < 0) {
                momentType.value = truncate(momentType.wholeValue, precision);
              } else if (precision === 0) {
                momentType.value = truncMethod(
                  momentType.wholeValue + momentType.decimalValue
                );
              } else {
                // precision > 0
                if (useSignificantDigits) {
                  if (trunc) {
                    momentType.value = truncate(
                      momentType.rawValue,
                      significantDigits -
                        momentType.wholeValue.toString().length
                    );
                  } else {
                    momentType.value = momentType.rawValue;
                  }

                  if (momentType.wholeValue) {
                    significantDigits -= momentType.wholeValue.toString()
                      .length;
                  }
                } else {
                  formatOptions.fractionDigits = precision;

                  if (trunc) {
                    momentType.value =
                      momentType.wholeValue +
                      truncate(momentType.decimalValue, precision);
                  } else {
                    momentType.value =
                      momentType.wholeValue + momentType.decimalValue;
                  }
                }
              }
            } else {
              if (useSignificantDigits && momentType.wholeValue) {
                // Outer Math.round required here to handle floating point errors.
                momentType.value = Math.round(
                  truncate(
                    momentType.wholeValue,
                    momentType.significantDigits -
                      momentType.wholeValue.toString().length
                  )
                );

                significantDigits -= momentType.wholeValue.toString().length;
              } else {
                momentType.value = momentType.wholeValue;
              }
            }

            if (momentType.tokenLength > 1 && (forceLength || foundFirst)) {
              formatOptions.minimumIntegerDigits = momentType.tokenLength;

              if (
                bubbled &&
                formatOptions.maximumSignificantDigits < momentType.tokenLength
              ) {
                delete formatOptions.maximumSignificantDigits;
              }
            }

            if (
              !foundFirst &&
              (momentType.value > 0 ||
              trim === "" /* trim: false */ ||
                find(stopTrim, momentType.type) ||
                find(outputTypes, momentType.type))
            ) {
              foundFirst = true;
            }

            momentType.formattedValue = formatNumber(
              momentType.value,
              formatOptions,
              userLocale
            );

            formatOptions.useGrouping = false;
            formatOptions.decimalSeparator = ".";
            momentType.formattedValueEn = formatNumber(
              momentType.value,
              formatOptions,
              "en"
            );

            if (
              momentType.tokenLength === 2 &&
              momentType.type === "milliseconds"
            ) {
              momentType.formattedValueMS = formatNumber(
                momentType.value,
                {
                  minimumIntegerDigits: 3,
                  useGrouping: false,
                },
                "en"
              ).slice(0, 2);
            }

            return momentType;
          };

          // Calculate formatted values.
          momentTypes = map(momentTypes, formatValue);
          momentTypes = compact(momentTypes);

          // Bubble rounded values.
          if (momentTypes.length > 1) {
            var findType = function (type) {
              return find(momentTypes, function (momentType) {
                return momentType.type === type;
              });
            };

            var bubbleTypes = function (bubble) {
              var bubbleMomentType = findType(bubble.type);

              if (!bubbleMomentType) {
                return;
              }

              each(bubble.targets, function (target) {
                var targetMomentType = findType(target.type);

                if (!targetMomentType) {
                  return;
                }

                if (
                  parseInt(bubbleMomentType.formattedValueEn, 10) ===
                  target.value
                ) {
                  bubbleMomentType.rawValue = 0;
                  bubbleMomentType.wholeValue = 0;
                  bubbleMomentType.decimalValue = 0;
                  targetMomentType.rawValue += 1;
                  targetMomentType.wholeValue += 1;
                  targetMomentType.decimalValue = 0;
                  targetMomentType.formattedValueEn = targetMomentType.wholeValue.toString();
                  bubbled = true;
                }
              });
            };

            each(bubbles, bubbleTypes);
          }

          // Recalculate formatted values.
          if (bubbled) {
            foundFirst = false;
            significantDigits = significantDigitsCache;
            momentTypes = map(momentTypes, formatValue);
            momentTypes = compact(momentTypes);
          }

          if (outputTypes && !(isMaxValue && !settings.trim)) {
            momentTypes = map(momentTypes, function (momentType) {
              if (
                find(outputTypes, function (outputType) {
                  return momentType.type === outputType;
                })
              ) {
                return momentType;
              }

              return null;
            });

            momentTypes = compact(momentTypes);
          } else {
            // Trim Large.
            if (trimLarge) {
              momentTypes = rest(momentTypes, function (momentType) {
                // Stop trimming on:
                // - the smallest moment type
                // - a type marked for stopTrim
                // - a type that has a whole value
                return (
                  !momentType.isSmallest &&
                  !momentType.wholeValue &&
                  !find(stopTrim, momentType.type)
                );
              });
            }

            // Largest.
            if (largest && momentTypes.length) {
              momentTypes = momentTypes.slice(0, largest);
            }

            // Trim Small.
            if (trimSmall && momentTypes.length > 1) {
              momentTypes = initial(momentTypes, function (momentType) {
                // Stop trimming on:
                // - a type marked for stopTrim
                // - a type that has a whole value
                // - the largest momentType
                return (
                  !momentType.wholeValue &&
                  !find(stopTrim, momentType.type) &&
                  !momentType.isLargest
                );
              });
            }

            // Trim Mid.
            if (trimMid) {
              momentTypes = map(momentTypes, function (momentType, index) {
                if (
                  index > 0 &&
                  index < momentTypes.length - 1 &&
                  !momentType.wholeValue
                ) {
                  return null;
                }

                return momentType;
              });

              momentTypes = compact(momentTypes);
            }

            // Trim Final.
            if (
              trimFinal &&
              momentTypes.length === 1 &&
              !momentTypes[0].wholeValue &&
              !(
                !trunc &&
                momentTypes[0].isSmallest &&
                momentTypes[0].rawValue < minValue
              )
            ) {
              momentTypes = [];
            }
          }

          if (returnMomentTypes) {
            return momentTypes;
          }

          // Localize and pluralize unit labels.
          each(tokens, function (token) {
            var key = momentTokens[token.type];

            var momentType = find(momentTypes, function (momentType) {
              return momentType.type === token.type;
            });

            if (!key || !momentType) {
              return;
            }

            var values = momentType.formattedValueEn.split(".");

            values[0] = parseInt(values[0], 10);

            if (values[1]) {
              values[1] = parseFloat("0." + values[1], 10);
            } else {
              values[1] = null;
            }

            var pluralKey = localeData.durationPluralKey(
              key,
              values[0],
              values[1]
            );

            var labels = durationGetLabels(key, localeData);

            var autoLocalized = false;

            var pluralizedLabels = {};

            // Auto-Localized unit labels.
            each(localeData._durationLabelTypes, function (labelType) {
              var label = find(labels, function (label) {
                return label.type === labelType.type && label.key === pluralKey;
              });

              if (label) {
                pluralizedLabels[label.type] = label.label;

                if (stringIncludes(token.text, labelType.string)) {
                  token.text = token.text.replace(
                    labelType.string,
                    label.label
                  );
                  autoLocalized = true;
                }
              }
            });

            // Auto-pluralized unit labels.
            if (usePlural && !autoLocalized) {
              labels.sort(durationLabelCompare);

              each(labels, function (label) {
                if (pluralizedLabels[label.type] === label.label) {
                  if (stringIncludes(token.text, label.label)) {
                    // Stop checking this token if its label is already
                    // correctly pluralized.
                    return false;
                  }

                  // Skip this label if it is correct, but not present in
                  // the token's text.
                  return;
                }

                if (stringIncludes(token.text, label.label)) {
                  // Replece this token's label and stop checking.
                  token.text = token.text.replace(
                    label.label,
                    pluralizedLabels[label.type]
                  );
                  return false;
                }
              });
            }
          });

          // Build ouptut.
          tokens = map(tokens, function (token) {
            if (!token.type) {
              return token.text;
            }

            var momentType = find(momentTypes, function (momentType) {
              return momentType.type === token.type;
            });

            if (!momentType) {
              return "";
            }

            var out = "";

            if (useLeftUnits) {
              out += token.text;
            }

            if ((isNegative && isMaxValue) || (!isNegative && isMinValue)) {
              out += "< ";
              isMaxValue = false;
              isMinValue = false;
            }

            if ((isNegative && isMinValue) || (!isNegative && isMaxValue)) {
              out += "> ";
              isMaxValue = false;
              isMinValue = false;
            }

            if (
              isNegative &&
              (momentType.value > 0 ||
                trim === "" ||
                find(stopTrim, momentType.type) ||
                find(outputTypes, momentType.type))
            ) {
              out += "-";
              isNegative = false;
            }

            if (token.type === "milliseconds" && momentType.formattedValueMS) {
              out += momentType.formattedValueMS;
            } else {
              out += momentType.formattedValue;
            }

            if (!useLeftUnits) {
              out += token.text;
            }

            return out;
          });

          // Trim leading and trailing comma, space, colon, and dot.
          return tokens
            .join("")
            .replace(/(,| |:|\.)*$/, "")
            .replace(/^(,| |:|\.)*/, "");
        }

        // defaultFormatTemplate
        function defaultFormatTemplate() {
          var dur = this.duration;

          var findType = function findType(type) {
            return dur._data[type];
          };

          var firstType = find(this.types, findType);

          var lastType = findLast(this.types, findType);

          // Default template strings for each duration dimension type.
          switch (firstType) {
            case "milliseconds":
              return "S __";
            case "seconds": // Fallthrough.
            case "minutes":
              return "*_MS_";
            case "hours":
              return "_HMS_";
            case "days": // Possible Fallthrough.
              if (firstType === lastType) {
                return "d __";
              }
            case "weeks":
              if (firstType === lastType) {
                return "w __";
              }

              if (this.trim === null) {
                this.trim = "both";
              }

              return "w __, d __, h __";
            case "months": // Possible Fallthrough.
              if (firstType === lastType) {
                return "M __";
              }
            case "years":
              if (firstType === lastType) {
                return "y __";
              }

              if (this.trim === null) {
                this.trim = "both";
              }

              return "y __, M __, d __";
            default:
              if (this.trim === null) {
                this.trim = "both";
              }

              return "y __, d __, h __, m __, s __";
          }
        }

        // init
        function init(context) {
          if (!context) {
            throw "Moment Duration Format init cannot find moment instance.";
          }

          context.duration.format = durationsFormat;
          context.duration.fn.format = durationFormat;

          context.duration.fn.format.defaults = {
            // Many options are defaulted to `null` to distinguish between
            // 'not set' and 'set to `false`'

            // trim
            // Can be a string, a delimited list of strings, an array of strings,
            // or a boolean.
            // "large" - will trim largest-magnitude zero-value tokens until
            // finding a token with a value, a token identified as 'stopTrim', or
            // the final token of the format string.
            // "small" - will trim smallest-magnitude zero-value tokens until
            // finding a token with a value, a token identified as 'stopTrim', or
            // the final token of the format string.
            // "both" - will execute "large" trim then "small" trim.
            // "mid" - will trim any zero-value tokens that are not the first or
            // last tokens. Usually used in conjunction with "large" or "both".
            // e.g. "large mid" or "both mid".
            // "final" - will trim the final token if it is zero-value. Use this
            // option with "large" or "both" to output an empty string when
            // formatting a zero-value duration. e.g. "large final" or "both final".
            // "all" - Will trim all zero-value tokens. Shorthand for "both mid final".
            // "left" - maps to "large" to support plugin's version 1 API.
            // "right" - maps to "large" to support plugin's version 1 API.
            // `false` - template tokens are not trimmed.
            // `true` - treated as "large".
            // `null` - treated as "large".
            trim: null,

            // stopTrim
            // A moment token string, a delimited set of moment token strings,
            // or an array of moment token strings. Trimming will stop when a token
            // listed in this option is reached. A "*" character in the format
            // template string will also mark a moment token as stopTrim.
            // e.g. "d [days] *h:mm:ss" will always stop trimming at the 'hours' token.
            stopTrim: null,

            // largest
            // Set to a positive integer to output only the "n" largest-magnitude
            // moment tokens that have a value. All lesser-magnitude moment tokens
            // will be ignored. This option takes effect even if `trim` is set
            // to `false`.
            largest: null,

            // maxValue
            // Use `maxValue` to render generalized output for large duration values,
            // e.g. `"> 60 days"`. `maxValue` must be a positive integer and is
            /// applied to the greatest-magnitude moment token in the format template.
            maxValue: null,

            // minValue
            // Use `minValue` to render generalized output for small duration values,
            // e.g. `"< 5 minutes"`. `minValue` must be a positive integer and is
            // applied to the least-magnitude moment token in the format template.
            minValue: null,

            // precision
            // If a positive integer, number of decimal fraction digits to render.
            // If a negative integer, number of integer place digits to truncate to 0.
            // If `useSignificantDigits` is set to `true` and `precision` is a positive
            // integer, sets the maximum number of significant digits used in the
            // formatted output.
            precision: 0,

            // trunc
            // Default behavior rounds final token value. Set to `true` to
            // truncate final token value, which was the default behavior in
            // version 1 of this plugin.
            trunc: false,

            // forceLength
            // Force first moment token with a value to render at full length
            // even when template is trimmed and first moment token has length of 1.
            forceLength: null,

            // userLocale
            // Formatted numerical output is rendered using `toLocaleString`
            // and the locale of the user's environment. Set this option to render
            // numerical output using a different locale. Unit names are rendered
            // and detected using the locale set in moment.js, which can be different
            // from the locale of user's environment.
            userLocale: null,

            // usePlural
            // Will automatically singularize or pluralize unit names when they
            // appear in the text associated with each moment token. Standard and
            // short unit labels are singularized and pluralized, based on locale.
            // e.g. in english, "1 second" or "1 sec" would be rendered instead
            // of "1 seconds" or "1 secs". The default pluralization function
            // renders a plural label for a value with decimal precision.
            // e.g. "1.0 seconds" is never rendered as "1.0 second".
            // Label types and pluralization function are configurable in the
            // localeData extensions.
            usePlural: true,

            // useLeftUnits
            // The text to the right of each moment token in a format string
            // is treated as that token's units for the purposes of trimming,
            // singularizing, and auto-localizing.
            // e.g. "h [hours], m [minutes], s [seconds]".
            // To properly singularize or localize a format string such as
            // "[hours] h, [minutes] m, [seconds] s", where the units appear
            // to the left of each moment token, set useLeftUnits to `true`.
            // This plugin is not tested in the context of rtl text.
            useLeftUnits: false,

            // useGrouping
            // Enables locale-based digit grouping in the formatted output. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
            useGrouping: true,

            // useSignificantDigits
            // Treat the `precision` option as the maximum significant digits
            // to be rendered. Precision must be a positive integer. Significant
            // digits extend across unit types,
            // e.g. "6 hours 37.5 minutes" represents 4 significant digits.
            // Enabling this option causes token length to be ignored. See  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
            useSignificantDigits: false,

            // template
            // The template string used to format the duration. May be a function
            // or a string. Template functions are executed with the `this` binding
            // of the settings object so that template strings may be dynamically
            // generated based on the duration object (accessible via `this.duration`)
            // or any of the other settings. Leading and trailing space, comma,
            // period, and colon characters are trimmed from the resulting string.
            template: defaultFormatTemplate,

            // useToLocaleString
            // Set this option to `false` to ignore the `toLocaleString` feature
            // test and force the use of the `formatNumber` fallback function
            // included in this plugin.
            useToLocaleString: true,

            // formatNumber fallback options.
            // When `toLocaleString` is detected and passes the feature test, the
            // following options will have no effect: `toLocaleString` will be used
            // for formatting and the grouping separator, decimal separator, and
            // integer digit grouping will be determined by the user locale.

            // groupingSeparator
            // The integer digit grouping separator used when using the fallback
            // formatNumber function.
            groupingSeparator: ",",

            // decimalSeparator
            // The decimal separator used when using the fallback formatNumber
            // function.
            decimalSeparator: ".",

            // grouping
            // The integer digit grouping used when using the fallback formatNumber
            // function. Must be an array. The default value of `[3]` gives the
            // standard 3-digit thousand/million/billion digit groupings for the
            // "en" locale. Setting this option to `[3, 2]` would generate the
            // thousand/lakh/crore digit groupings used in the "en-IN" locale.
            grouping: [3],
          };

          context.updateLocale("en", engLocale);
        }

        // Run feature tests for `Number#toLocaleString`.
        var toLocaleStringFormatter = function (number, locale, options) {
          return number.toLocaleString(locale, options);
        };

        toLocaleStringWorks =
          toLocaleStringSupportsLocales() &&
          featureTestFormatter(toLocaleStringFormatter);
        toLocaleStringRoundingWorks =
          toLocaleStringWorks &&
          featureTestFormatterRounding(toLocaleStringFormatter);

        // Run feature tests for `Intl.NumberFormat#format`.
        var intlNumberFormatFormatter = function (number, locale, options) {
          if (
            typeof window !== "undefined" &&
            window &&
            window.Intl &&
            window.Intl.NumberFormat
          ) {
            return window.Intl.NumberFormat(locale, options).format(number);
          }
        };

        intlNumberFormatWorks = featureTestFormatter(intlNumberFormatFormatter);
        intlNumberFormatRoundingWorks =
          intlNumberFormatWorks &&
          featureTestFormatterRounding(intlNumberFormatFormatter);

        // Initialize duration format on the global moment instance.
        init(moment);

        // Return the init function so that duration format can be
        // initialized on other moment instances.
        return init;
      });

      /***/
    },

    /***/ "4681": /***/ function (module, exports, __webpack_require__) {
      "use strict";

      /*<replacement>*/

      var pna = __webpack_require__("966d");
      /*</replacement>*/

      // undocumented cb() API, needed for core, not for public API
      function destroy(err, cb) {
        var _this = this;

        var readableDestroyed =
          this._readableState && this._readableState.destroyed;
        var writableDestroyed =
          this._writableState && this._writableState.destroyed;

        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (
            err &&
            (!this._writableState || !this._writableState.errorEmitted)
          ) {
            pna.nextTick(emitErrorNT, this, err);
          }
          return this;
        }

        // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks

        if (this._readableState) {
          this._readableState.destroyed = true;
        }

        // if this is a duplex stream mark the writable part as destroyed as well
        if (this._writableState) {
          this._writableState.destroyed = true;
        }

        this._destroy(err || null, function (err) {
          if (!cb && err) {
            pna.nextTick(emitErrorNT, _this, err);
            if (_this._writableState) {
              _this._writableState.errorEmitted = true;
            }
          } else if (cb) {
            cb(err);
          }
        });

        return this;
      }

      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }

        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }

      function emitErrorNT(self, err) {
        self.emit("error", err);
      }

      module.exports = {
        destroy: destroy,
        undestroy: undestroy,
      };

      /***/
    },

    /***/ "512e": /***/ function (module, exports, __webpack_require__) {
      module.exports = /******/ (function (modules) {
        // webpackBootstrap
        /******/ // The module cache
        /******/ var installedModules = {}; // The require function
        /******/
        /******/ /******/ function __webpack_require__(moduleId) {
          /******/
          /******/ // Check if module is in cache
          /******/ if (installedModules[moduleId]) {
            /******/ return installedModules[moduleId].exports;
            /******/
          } // Create a new module (and put it into the cache)
          /******/ /******/ var module = (installedModules[moduleId] = {
            /******/ i: moduleId,
            /******/ l: false,
            /******/ exports: {},
            /******/
          }); // Execute the module function
          /******/
          /******/ /******/ modules[moduleId].call(
            module.exports,
            module,
            module.exports,
            __webpack_require__
          ); // Flag the module as loaded
          /******/
          /******/ /******/ module.l = true; // Return the exports of the module
          /******/
          /******/ /******/ return module.exports;
          /******/
        } // expose the modules object (__webpack_modules__)
        /******/
        /******/
        /******/ /******/ __webpack_require__.m = modules; // expose the module cache
        /******/
        /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
        /******/
        /******/ /******/ __webpack_require__.d = function (
          exports,
          name,
          getter
        ) {
          /******/ if (!__webpack_require__.o(exports, name)) {
            /******/ Object.defineProperty(exports, name, {
              enumerable: true,
              get: getter,
            });
            /******/
          }
          /******/
        }; // define __esModule on exports
        /******/
        /******/ /******/ __webpack_require__.r = function (exports) {
          /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            /******/ Object.defineProperty(exports, Symbol.toStringTag, {
              value: "Module",
            });
            /******/
          }
          /******/ Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          /******/
        }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
        /******/
        /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function (
          value,
          mode
        ) {
          /******/ if (mode & 1) value = __webpack_require__(value);
          /******/ if (mode & 8) return value;
          /******/ if (
            mode & 4 &&
            typeof value === "object" &&
            value &&
            value.__esModule
          )
            return value;
          /******/ var ns = Object.create(null);
          /******/ __webpack_require__.r(ns);
          /******/ Object.defineProperty(ns, "default", {
            enumerable: true,
            value: value,
          });
          /******/ if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(
                ns,
                key,
                function (key) {
                  return value[key];
                }.bind(null, key)
              );
          /******/ return ns;
          /******/
        }; // getDefaultExport function for compatibility with non-harmony modules
        /******/
        /******/ /******/ __webpack_require__.n = function (module) {
          /******/ var getter =
            module && module.__esModule
              ? /******/ function getDefault() {
                  return module["default"];
                }
              : /******/ function getModuleExports() {
                  return module;
                };
          /******/ __webpack_require__.d(getter, "a", getter);
          /******/ return getter;
          /******/
        }; // Object.prototype.hasOwnProperty.call
        /******/
        /******/ /******/ __webpack_require__.o = function (object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        }; // __webpack_public_path__
        /******/
        /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
        /******/
        /******/
        /******/ /******/ return __webpack_require__(
          (__webpack_require__.s = "fae3")
        );
        /******/
      })(
        /************************************************************************/
        /******/ {
          /***/ "00ee": /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var test = {};

            test[TO_STRING_TAG] = "z";

            module.exports = String(test) === "[object z]";

            /***/
          },

          /***/ "0366": /***/ function (module, exports, __webpack_require__) {
            var aFunction = __webpack_require__("1c0b");

            // optional / simple context binding
            module.exports = function (fn, that, length) {
              aFunction(fn);
              if (that === undefined) return fn;
              switch (length) {
                case 0:
                  return function () {
                    return fn.call(that);
                  };
                case 1:
                  return function (a) {
                    return fn.call(that, a);
                  };
                case 2:
                  return function (a, b) {
                    return fn.call(that, a, b);
                  };
                case 3:
                  return function (a, b, c) {
                    return fn.call(that, a, b, c);
                  };
              }
              return function (/* ...args */) {
                return fn.apply(that, arguments);
              };
            };

            /***/
          },

          /***/ "057f": /***/ function (module, exports, __webpack_require__) {
            /* eslint-disable es/no-object-getownpropertynames -- safe */
            var toIndexedObject = __webpack_require__("fc6a");
            var $getOwnPropertyNames = __webpack_require__("241c").f;

            var toString = {}.toString;

            var windowNames =
              typeof window == "object" && window && Object.getOwnPropertyNames
                ? Object.getOwnPropertyNames(window)
                : [];

            var getWindowNames = function (it) {
              try {
                return $getOwnPropertyNames(it);
              } catch (error) {
                return windowNames.slice();
              }
            };

            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            module.exports.f = function getOwnPropertyNames(it) {
              return windowNames && toString.call(it) == "[object Window]"
                ? getWindowNames(it)
                : $getOwnPropertyNames(toIndexedObject(it));
            };

            /***/
          },

          /***/ "06cf": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var propertyIsEnumerableModule = __webpack_require__("d1e7");
            var createPropertyDescriptor = __webpack_require__("5c6c");
            var toIndexedObject = __webpack_require__("fc6a");
            var toPrimitive = __webpack_require__("c04e");
            var has = __webpack_require__("5135");
            var IE8_DOM_DEFINE = __webpack_require__("0cfb");

            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

            // `Object.getOwnPropertyDescriptor` method
            // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
            exports.f = DESCRIPTORS
              ? $getOwnPropertyDescriptor
              : function getOwnPropertyDescriptor(O, P) {
                  O = toIndexedObject(O);
                  P = toPrimitive(P, true);
                  if (IE8_DOM_DEFINE)
                    try {
                      return $getOwnPropertyDescriptor(O, P);
                    } catch (error) {
                      /* empty */
                    }
                  if (has(O, P))
                    return createPropertyDescriptor(
                      !propertyIsEnumerableModule.f.call(O, P),
                      O[P]
                    );
                };

            /***/
          },

          /***/ "0cfb": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var fails = __webpack_require__("d039");
            var createElement = __webpack_require__("cc12");

            // Thank's IE8 for his funny defineProperty
            module.exports =
              !DESCRIPTORS &&
              !fails(function () {
                // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
                return (
                  Object.defineProperty(createElement("div"), "a", {
                    get: function () {
                      return 7;
                    },
                  }).a != 7
                );
              });

            /***/
          },

          /***/ "159b": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var DOMIterables = __webpack_require__("fdbc");
            var forEach = __webpack_require__("17c2");
            var createNonEnumerableProperty = __webpack_require__("9112");

            for (var COLLECTION_NAME in DOMIterables) {
              var Collection = global[COLLECTION_NAME];
              var CollectionPrototype = Collection && Collection.prototype;
              // some Chrome versions have non-configurable methods on DOMTokenList
              if (
                CollectionPrototype &&
                CollectionPrototype.forEach !== forEach
              )
                try {
                  createNonEnumerableProperty(
                    CollectionPrototype,
                    "forEach",
                    forEach
                  );
                } catch (error) {
                  CollectionPrototype.forEach = forEach;
                }
            }

            /***/
          },

          /***/ "17c2": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $forEach = __webpack_require__("b727").forEach;
            var arrayMethodIsStrict = __webpack_require__("a640");

            var STRICT_METHOD = arrayMethodIsStrict("forEach");

            // `Array.prototype.forEach` method implementation
            // https://tc39.es/ecma262/#sec-array.prototype.foreach
            module.exports = !STRICT_METHOD
              ? function forEach(callbackfn /* , thisArg */) {
                  return $forEach(
                    this,
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                  // eslint-disable-next-line es/no-array-prototype-foreach -- safe
                }
              : [].forEach;

            /***/
          },

          /***/ "1be4": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");

            module.exports = getBuiltIn("document", "documentElement");

            /***/
          },

          /***/ "1c0b": /***/ function (module, exports) {
            module.exports = function (it) {
              if (typeof it != "function") {
                throw TypeError(String(it) + " is not a function");
              }
              return it;
            };

            /***/
          },

          /***/ "1c7e": /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");

            var ITERATOR = wellKnownSymbol("iterator");
            var SAFE_CLOSING = false;

            try {
              var called = 0;
              var iteratorWithReturn = {
                next: function () {
                  return { done: !!called++ };
                },
                return: function () {
                  SAFE_CLOSING = true;
                },
              };
              iteratorWithReturn[ITERATOR] = function () {
                return this;
              };
              // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
              Array.from(iteratorWithReturn, function () {
                throw 2;
              });
            } catch (error) {
              /* empty */
            }

            module.exports = function (exec, SKIP_CLOSING) {
              if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
              var ITERATION_SUPPORT = false;
              try {
                var object = {};
                object[ITERATOR] = function () {
                  return {
                    next: function () {
                      return { done: (ITERATION_SUPPORT = true) };
                    },
                  };
                };
                exec(object);
              } catch (error) {
                /* empty */
              }
              return ITERATION_SUPPORT;
            };

            /***/
          },

          /***/ "1d80": /***/ function (module, exports) {
            // `RequireObjectCoercible` abstract operation
            // https://tc39.es/ecma262/#sec-requireobjectcoercible
            module.exports = function (it) {
              if (it == undefined)
                throw TypeError("Can't call method on " + it);
              return it;
            };

            /***/
          },

          /***/ "1dde": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");
            var wellKnownSymbol = __webpack_require__("b622");
            var V8_VERSION = __webpack_require__("2d00");

            var SPECIES = wellKnownSymbol("species");

            module.exports = function (METHOD_NAME) {
              // We can't use this feature detection in V8 since it causes
              // deoptimization and serious performance degradation
              // https://github.com/zloirock/core-js/issues/677
              return (
                V8_VERSION >= 51 ||
                !fails(function () {
                  var array = [];
                  var constructor = (array.constructor = {});
                  constructor[SPECIES] = function () {
                    return { foo: 1 };
                  };
                  return array[METHOD_NAME](Boolean).foo !== 1;
                })
              );
            };

            /***/
          },

          /***/ "23cb": /***/ function (module, exports, __webpack_require__) {
            var toInteger = __webpack_require__("a691");

            var max = Math.max;
            var min = Math.min;

            // Helper for a popular repeating case of the spec:
            // Let integer be ? ToInteger(index).
            // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
            module.exports = function (index, length) {
              var integer = toInteger(index);
              return integer < 0
                ? max(integer + length, 0)
                : min(integer, length);
            };

            /***/
          },

          /***/ "23e7": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
            var createNonEnumerableProperty = __webpack_require__("9112");
            var redefine = __webpack_require__("6eeb");
            var setGlobal = __webpack_require__("ce4e");
            var copyConstructorProperties = __webpack_require__("e893");
            var isForced = __webpack_require__("94ca");

            /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
            module.exports = function (options, source) {
              var TARGET = options.target;
              var GLOBAL = options.global;
              var STATIC = options.stat;
              var FORCED,
                target,
                key,
                targetProperty,
                sourceProperty,
                descriptor;
              if (GLOBAL) {
                target = global;
              } else if (STATIC) {
                target = global[TARGET] || setGlobal(TARGET, {});
              } else {
                target = (global[TARGET] || {}).prototype;
              }
              if (target)
                for (key in source) {
                  sourceProperty = source[key];
                  if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor(target, key);
                    targetProperty = descriptor && descriptor.value;
                  } else targetProperty = target[key];
                  FORCED = isForced(
                    GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
                    options.forced
                  );
                  // contained in target
                  if (!FORCED && targetProperty !== undefined) {
                    if (typeof sourceProperty === typeof targetProperty)
                      continue;
                    copyConstructorProperties(sourceProperty, targetProperty);
                  }
                  // add a flag to not completely full polyfills
                  if (options.sham || (targetProperty && targetProperty.sham)) {
                    createNonEnumerableProperty(sourceProperty, "sham", true);
                  }
                  // extend global
                  redefine(target, key, sourceProperty, options);
                }
            };

            /***/
          },

          /***/ "241c": /***/ function (module, exports, __webpack_require__) {
            var internalObjectKeys = __webpack_require__("ca84");
            var enumBugKeys = __webpack_require__("7839");

            var hiddenKeys = enumBugKeys.concat("length", "prototype");

            // `Object.getOwnPropertyNames` method
            // https://tc39.es/ecma262/#sec-object.getownpropertynames
            // eslint-disable-next-line es/no-object-getownpropertynames -- safe
            exports.f =
              Object.getOwnPropertyNames ||
              function getOwnPropertyNames(O) {
                return internalObjectKeys(O, hiddenKeys);
              };

            /***/
          },

          /***/ "2532": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var notARegExp = __webpack_require__("5a34");
            var requireObjectCoercible = __webpack_require__("1d80");
            var correctIsRegExpLogic = __webpack_require__("ab13");

            // `String.prototype.includes` method
            // https://tc39.es/ecma262/#sec-string.prototype.includes
            $(
              {
                target: "String",
                proto: true,
                forced: !correctIsRegExpLogic("includes"),
              },
              {
                includes: function includes(searchString /* , position = 0 */) {
                  return !!~String(requireObjectCoercible(this)).indexOf(
                    notARegExp(searchString),
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            /***/
          },

          /***/ "2a62": /***/ function (module, exports, __webpack_require__) {
            var anObject = __webpack_require__("825a");

            module.exports = function (iterator) {
              var returnMethod = iterator["return"];
              if (returnMethod !== undefined) {
                return anObject(returnMethod.call(iterator)).value;
              }
            };

            /***/
          },

          /***/ "2d00": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var userAgent = __webpack_require__("342f");

            var process = global.process;
            var versions = process && process.versions;
            var v8 = versions && versions.v8;
            var match, version;

            if (v8) {
              match = v8.split(".");
              version = match[0] < 4 ? 1 : match[0] + match[1];
            } else if (userAgent) {
              match = userAgent.match(/Edge\/(\d+)/);
              if (!match || match[1] >= 74) {
                match = userAgent.match(/Chrome\/(\d+)/);
                if (match) version = match[1];
              }
            }

            module.exports = version && +version;

            /***/
          },

          /***/ "342f": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");

            module.exports = getBuiltIn("navigator", "userAgent") || "";

            /***/
          },

          /***/ "35a1": /***/ function (module, exports, __webpack_require__) {
            var classof = __webpack_require__("f5df");
            var Iterators = __webpack_require__("3f8c");
            var wellKnownSymbol = __webpack_require__("b622");

            var ITERATOR = wellKnownSymbol("iterator");

            module.exports = function (it) {
              if (it != undefined)
                return (
                  it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)]
                );
            };

            /***/
          },

          /***/ "37e8": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var definePropertyModule = __webpack_require__("9bf2");
            var anObject = __webpack_require__("825a");
            var objectKeys = __webpack_require__("df75");

            // `Object.defineProperties` method
            // https://tc39.es/ecma262/#sec-object.defineproperties
            // eslint-disable-next-line es/no-object-defineproperties -- safe
            module.exports = DESCRIPTORS
              ? Object.defineProperties
              : function defineProperties(O, Properties) {
                  anObject(O);
                  var keys = objectKeys(Properties);
                  var length = keys.length;
                  var index = 0;
                  var key;
                  while (length > index)
                    definePropertyModule.f(
                      O,
                      (key = keys[index++]),
                      Properties[key]
                    );
                  return O;
                };

            /***/
          },

          /***/ "3bbe": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            module.exports = function (it) {
              if (!isObject(it) && it !== null) {
                throw TypeError("Can't set " + String(it) + " as a prototype");
              }
              return it;
            };

            /***/
          },

          /***/ "3ca3": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var charAt = __webpack_require__("6547").charAt;
            var InternalStateModule = __webpack_require__("69f3");
            var defineIterator = __webpack_require__("7dd0");

            var STRING_ITERATOR = "String Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(
              STRING_ITERATOR
            );

            // `String.prototype[@@iterator]` method
            // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
            defineIterator(
              String,
              "String",
              function (iterated) {
                setInternalState(this, {
                  type: STRING_ITERATOR,
                  string: String(iterated),
                  index: 0,
                });
                // `%StringIteratorPrototype%.next` method
                // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
              },
              function next() {
                var state = getInternalState(this);
                var string = state.string;
                var index = state.index;
                var point;
                if (index >= string.length)
                  return { value: undefined, done: true };
                point = charAt(string, index);
                state.index += point.length;
                return { value: point, done: false };
              }
            );

            /***/
          },

          /***/ "3f8c": /***/ function (module, exports) {
            module.exports = {};

            /***/
          },

          /***/ "428f": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");

            module.exports = global;

            /***/
          },

          /***/ "44ad": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");
            var classof = __webpack_require__("c6b6");

            var split = "".split;

            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            module.exports = fails(function () {
              // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
              // eslint-disable-next-line no-prototype-builtins -- safe
              return !Object("z").propertyIsEnumerable(0);
            })
              ? function (it) {
                  return classof(it) == "String"
                    ? split.call(it, "")
                    : Object(it);
                }
              : Object;

            /***/
          },

          /***/ "44d2": /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");
            var create = __webpack_require__("7c73");
            var definePropertyModule = __webpack_require__("9bf2");

            var UNSCOPABLES = wellKnownSymbol("unscopables");
            var ArrayPrototype = Array.prototype;

            // Array.prototype[@@unscopables]
            // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            if (ArrayPrototype[UNSCOPABLES] == undefined) {
              definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                configurable: true,
                value: create(null),
              });
            }

            // add a key to Array.prototype[@@unscopables]
            module.exports = function (key) {
              ArrayPrototype[UNSCOPABLES][key] = true;
            };

            /***/
          },

          /***/ "44e7": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");
            var classof = __webpack_require__("c6b6");
            var wellKnownSymbol = __webpack_require__("b622");

            var MATCH = wellKnownSymbol("match");

            // `IsRegExp` abstract operation
            // https://tc39.es/ecma262/#sec-isregexp
            module.exports = function (it) {
              var isRegExp;
              return (
                isObject(it) &&
                ((isRegExp = it[MATCH]) !== undefined
                  ? !!isRegExp
                  : classof(it) == "RegExp")
              );
            };

            /***/
          },

          /***/ "4930": /***/ function (module, exports, __webpack_require__) {
            /* eslint-disable es/no-symbol -- required for testing */
            var V8_VERSION = __webpack_require__("2d00");
            var fails = __webpack_require__("d039");

            // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
            module.exports =
              !!Object.getOwnPropertySymbols &&
              !fails(function () {
                var symbol = Symbol();
                // Chrome 38 Symbol has incorrect toString conversion
                // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
                return (
                  !String(symbol) ||
                  !(Object(symbol) instanceof Symbol) ||
                  // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
                  (!Symbol.sham && V8_VERSION && V8_VERSION < 41)
                );
              });

            /***/
          },

          /***/ "4d64": /***/ function (module, exports, __webpack_require__) {
            var toIndexedObject = __webpack_require__("fc6a");
            var toLength = __webpack_require__("50c4");
            var toAbsoluteIndex = __webpack_require__("23cb");

            // `Array.prototype.{ indexOf, includes }` methods implementation
            var createMethod = function (IS_INCLUDES) {
              return function ($this, el, fromIndex) {
                var O = toIndexedObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                // Array#includes uses SameValueZero equality algorithm
                // eslint-disable-next-line no-self-compare -- NaN check
                if (IS_INCLUDES && el != el)
                  while (length > index) {
                    value = O[index++];
                    // eslint-disable-next-line no-self-compare -- NaN check
                    if (value != value) return true;
                    // Array#indexOf ignores holes, Array#includes - not
                  }
                else
                  for (; length > index; index++) {
                    if ((IS_INCLUDES || index in O) && O[index] === el)
                      return IS_INCLUDES || index || 0;
                  }
                return !IS_INCLUDES && -1;
              };
            };

            module.exports = {
              // `Array.prototype.includes` method
              // https://tc39.es/ecma262/#sec-array.prototype.includes
              includes: createMethod(true),
              // `Array.prototype.indexOf` method
              // https://tc39.es/ecma262/#sec-array.prototype.indexof
              indexOf: createMethod(false),
            };

            /***/
          },

          /***/ "4de4": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var $filter = __webpack_require__("b727").filter;
            var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");

            // `Array.prototype.filter` method
            // https://tc39.es/ecma262/#sec-array.prototype.filter
            // with adding support of @@species
            $(
              { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
              {
                filter: function filter(callbackfn /* , thisArg */) {
                  return $filter(
                    this,
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            /***/
          },

          /***/ "4df4": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var bind = __webpack_require__("0366");
            var toObject = __webpack_require__("7b0b");
            var callWithSafeIterationClosing = __webpack_require__("9bdd");
            var isArrayIteratorMethod = __webpack_require__("e95a");
            var toLength = __webpack_require__("50c4");
            var createProperty = __webpack_require__("8418");
            var getIteratorMethod = __webpack_require__("35a1");

            // `Array.from` method implementation
            // https://tc39.es/ecma262/#sec-array.from
            module.exports = function from(
              arrayLike /* , mapfn = undefined, thisArg = undefined */
            ) {
              var O = toObject(arrayLike);
              var C = typeof this == "function" ? this : Array;
              var argumentsLength = arguments.length;
              var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
              var mapping = mapfn !== undefined;
              var iteratorMethod = getIteratorMethod(O);
              var index = 0;
              var length, result, step, iterator, next, value;
              if (mapping)
                mapfn = bind(
                  mapfn,
                  argumentsLength > 2 ? arguments[2] : undefined,
                  2
                );
              // if the target is not iterable or it's an array with the default iterator - use a simple case
              if (
                iteratorMethod != undefined &&
                !(C == Array && isArrayIteratorMethod(iteratorMethod))
              ) {
                iterator = iteratorMethod.call(O);
                next = iterator.next;
                result = new C();
                for (; !(step = next.call(iterator)).done; index++) {
                  value = mapping
                    ? callWithSafeIterationClosing(
                        iterator,
                        mapfn,
                        [step.value, index],
                        true
                      )
                    : step.value;
                  createProperty(result, index, value);
                }
              } else {
                length = toLength(O.length);
                result = new C(length);
                for (; length > index; index++) {
                  value = mapping ? mapfn(O[index], index) : O[index];
                  createProperty(result, index, value);
                }
              }
              result.length = index;
              return result;
            };

            /***/
          },

          /***/ "4fad": /***/ function (module, exports, __webpack_require__) {
            var $ = __webpack_require__("23e7");
            var $entries = __webpack_require__("6f53").entries;

            // `Object.entries` method
            // https://tc39.es/ecma262/#sec-object.entries
            $(
              { target: "Object", stat: true },
              {
                entries: function entries(O) {
                  return $entries(O);
                },
              }
            );

            /***/
          },

          /***/ "50c4": /***/ function (module, exports, __webpack_require__) {
            var toInteger = __webpack_require__("a691");

            var min = Math.min;

            // `ToLength` abstract operation
            // https://tc39.es/ecma262/#sec-tolength
            module.exports = function (argument) {
              return argument > 0
                ? min(toInteger(argument), 0x1fffffffffffff)
                : 0; // 2 ** 53 - 1 == 9007199254740991
            };

            /***/
          },

          /***/ "5135": /***/ function (module, exports, __webpack_require__) {
            var toObject = __webpack_require__("7b0b");

            var hasOwnProperty = {}.hasOwnProperty;

            module.exports =
              Object.hasOwn ||
              function hasOwn(it, key) {
                return hasOwnProperty.call(toObject(it), key);
              };

            /***/
          },

          /***/ "5692": /***/ function (module, exports, __webpack_require__) {
            var IS_PURE = __webpack_require__("c430");
            var store = __webpack_require__("c6cd");

            (module.exports = function (key, value) {
              return (
                store[key] || (store[key] = value !== undefined ? value : {})
              );
            })("versions", []).push({
              version: "3.15.2",
              mode: IS_PURE ? "pure" : "global",
              copyright: "© 2021 Denis Pushkarev (zloirock.ru)",
            });

            /***/
          },

          /***/ "56ef": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");
            var getOwnPropertyNamesModule = __webpack_require__("241c");
            var getOwnPropertySymbolsModule = __webpack_require__("7418");
            var anObject = __webpack_require__("825a");

            // all object keys, includes non-enumerable and symbols
            module.exports =
              getBuiltIn("Reflect", "ownKeys") ||
              function ownKeys(it) {
                var keys = getOwnPropertyNamesModule.f(anObject(it));
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                return getOwnPropertySymbols
                  ? keys.concat(getOwnPropertySymbols(it))
                  : keys;
              };

            /***/
          },

          /***/ "5899": /***/ function (module, exports) {
            // a string of all valid unicode whitespaces
            module.exports =
              "\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002" +
              "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

            /***/
          },

          /***/ "58a8": /***/ function (module, exports, __webpack_require__) {
            var requireObjectCoercible = __webpack_require__("1d80");
            var whitespaces = __webpack_require__("5899");

            var whitespace = "[" + whitespaces + "]";
            var ltrim = RegExp("^" + whitespace + whitespace + "*");
            var rtrim = RegExp(whitespace + whitespace + "*$");

            // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
            var createMethod = function (TYPE) {
              return function ($this) {
                var string = String(requireObjectCoercible($this));
                if (TYPE & 1) string = string.replace(ltrim, "");
                if (TYPE & 2) string = string.replace(rtrim, "");
                return string;
              };
            };

            module.exports = {
              // `String.prototype.{ trimLeft, trimStart }` methods
              // https://tc39.es/ecma262/#sec-string.prototype.trimstart
              start: createMethod(1),
              // `String.prototype.{ trimRight, trimEnd }` methods
              // https://tc39.es/ecma262/#sec-string.prototype.trimend
              end: createMethod(2),
              // `String.prototype.trim` method
              // https://tc39.es/ecma262/#sec-string.prototype.trim
              trim: createMethod(3),
            };

            /***/
          },

          /***/ "5a34": /***/ function (module, exports, __webpack_require__) {
            var isRegExp = __webpack_require__("44e7");

            module.exports = function (it) {
              if (isRegExp(it)) {
                throw TypeError(
                  "The method doesn't accept regular expressions"
                );
              }
              return it;
            };

            /***/
          },

          /***/ "5c6c": /***/ function (module, exports) {
            module.exports = function (bitmap, value) {
              return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value,
              };
            };

            /***/
          },

          /***/ "6547": /***/ function (module, exports, __webpack_require__) {
            var toInteger = __webpack_require__("a691");
            var requireObjectCoercible = __webpack_require__("1d80");

            // `String.prototype.{ codePointAt, at }` methods implementation
            var createMethod = function (CONVERT_TO_STRING) {
              return function ($this, pos) {
                var S = String(requireObjectCoercible($this));
                var position = toInteger(pos);
                var size = S.length;
                var first, second;
                if (position < 0 || position >= size)
                  return CONVERT_TO_STRING ? "" : undefined;
                first = S.charCodeAt(position);
                return first < 0xd800 ||
                  first > 0xdbff ||
                  position + 1 === size ||
                  (second = S.charCodeAt(position + 1)) < 0xdc00 ||
                  second > 0xdfff
                  ? CONVERT_TO_STRING
                    ? S.charAt(position)
                    : first
                  : CONVERT_TO_STRING
                  ? S.slice(position, position + 2)
                  : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
              };
            };

            module.exports = {
              // `String.prototype.codePointAt` method
              // https://tc39.es/ecma262/#sec-string.prototype.codepointat
              codeAt: createMethod(false),
              // `String.prototype.at` method
              // https://github.com/mathiasbynens/String.prototype.at
              charAt: createMethod(true),
            };

            /***/
          },

          /***/ "65f0": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");
            var isArray = __webpack_require__("e8b5");
            var wellKnownSymbol = __webpack_require__("b622");

            var SPECIES = wellKnownSymbol("species");

            // `ArraySpeciesCreate` abstract operation
            // https://tc39.es/ecma262/#sec-arrayspeciescreate
            module.exports = function (originalArray, length) {
              var C;
              if (isArray(originalArray)) {
                C = originalArray.constructor;
                // cross-realm fallback
                if (
                  typeof C == "function" &&
                  (C === Array || isArray(C.prototype))
                )
                  C = undefined;
                else if (isObject(C)) {
                  C = C[SPECIES];
                  if (C === null) C = undefined;
                }
              }
              return new (C === undefined ? Array : C)(
                length === 0 ? 0 : length
              );
            };

            /***/
          },

          /***/ "69f3": /***/ function (module, exports, __webpack_require__) {
            var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
            var global = __webpack_require__("da84");
            var isObject = __webpack_require__("861d");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var objectHas = __webpack_require__("5135");
            var shared = __webpack_require__("c6cd");
            var sharedKey = __webpack_require__("f772");
            var hiddenKeys = __webpack_require__("d012");

            var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
            var WeakMap = global.WeakMap;
            var set, get, has;

            var enforce = function (it) {
              return has(it) ? get(it) : set(it, {});
            };

            var getterFor = function (TYPE) {
              return function (it) {
                var state;
                if (!isObject(it) || (state = get(it)).type !== TYPE) {
                  throw TypeError(
                    "Incompatible receiver, " + TYPE + " required"
                  );
                }
                return state;
              };
            };

            if (NATIVE_WEAK_MAP || shared.state) {
              var store = shared.state || (shared.state = new WeakMap());
              var wmget = store.get;
              var wmhas = store.has;
              var wmset = store.set;
              set = function (it, metadata) {
                if (wmhas.call(store, it))
                  throw new TypeError(OBJECT_ALREADY_INITIALIZED);
                metadata.facade = it;
                wmset.call(store, it, metadata);
                return metadata;
              };
              get = function (it) {
                return wmget.call(store, it) || {};
              };
              has = function (it) {
                return wmhas.call(store, it);
              };
            } else {
              var STATE = sharedKey("state");
              hiddenKeys[STATE] = true;
              set = function (it, metadata) {
                if (objectHas(it, STATE))
                  throw new TypeError(OBJECT_ALREADY_INITIALIZED);
                metadata.facade = it;
                createNonEnumerableProperty(it, STATE, metadata);
                return metadata;
              };
              get = function (it) {
                return objectHas(it, STATE) ? it[STATE] : {};
              };
              has = function (it) {
                return objectHas(it, STATE);
              };
            }

            module.exports = {
              set: set,
              get: get,
              has: has,
              enforce: enforce,
              getterFor: getterFor,
            };

            /***/
          },

          /***/ "6eeb": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var has = __webpack_require__("5135");
            var setGlobal = __webpack_require__("ce4e");
            var inspectSource = __webpack_require__("8925");
            var InternalStateModule = __webpack_require__("69f3");

            var getInternalState = InternalStateModule.get;
            var enforceInternalState = InternalStateModule.enforce;
            var TEMPLATE = String(String).split("String");

            (module.exports = function (O, key, value, options) {
              var unsafe = options ? !!options.unsafe : false;
              var simple = options ? !!options.enumerable : false;
              var noTargetGet = options ? !!options.noTargetGet : false;
              var state;
              if (typeof value == "function") {
                if (typeof key == "string" && !has(value, "name")) {
                  createNonEnumerableProperty(value, "name", key);
                }
                state = enforceInternalState(value);
                if (!state.source) {
                  state.source = TEMPLATE.join(
                    typeof key == "string" ? key : ""
                  );
                }
              }
              if (O === global) {
                if (simple) O[key] = value;
                else setGlobal(key, value);
                return;
              } else if (!unsafe) {
                delete O[key];
              } else if (!noTargetGet && O[key]) {
                simple = true;
              }
              if (simple) O[key] = value;
              else createNonEnumerableProperty(O, key, value);
              // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
            })(Function.prototype, "toString", function toString() {
              return (
                (typeof this == "function" && getInternalState(this).source) ||
                inspectSource(this)
              );
            });

            /***/
          },

          /***/ "6f53": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var objectKeys = __webpack_require__("df75");
            var toIndexedObject = __webpack_require__("fc6a");
            var propertyIsEnumerable = __webpack_require__("d1e7").f;

            // `Object.{ entries, values }` methods implementation
            var createMethod = function (TO_ENTRIES) {
              return function (it) {
                var O = toIndexedObject(it);
                var keys = objectKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;
                while (length > i) {
                  key = keys[i++];
                  if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
                    result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
                  }
                }
                return result;
              };
            };

            module.exports = {
              // `Object.entries` method
              // https://tc39.es/ecma262/#sec-object.entries
              entries: createMethod(true),
              // `Object.values` method
              // https://tc39.es/ecma262/#sec-object.values
              values: createMethod(false),
            };

            /***/
          },

          /***/ "7156": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");
            var setPrototypeOf = __webpack_require__("d2bb");

            // makes subclassing work correct for wrapped built-ins
            module.exports = function ($this, dummy, Wrapper) {
              var NewTarget, NewTargetPrototype;
              if (
                // it can work only with native `setPrototypeOf`
                setPrototypeOf &&
                // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
                typeof (NewTarget = dummy.constructor) == "function" &&
                NewTarget !== Wrapper &&
                isObject((NewTargetPrototype = NewTarget.prototype)) &&
                NewTargetPrototype !== Wrapper.prototype
              )
                setPrototypeOf($this, NewTargetPrototype);
              return $this;
            };

            /***/
          },

          /***/ "7418": /***/ function (module, exports) {
            // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
            exports.f = Object.getOwnPropertySymbols;

            /***/
          },

          /***/ "746f": /***/ function (module, exports, __webpack_require__) {
            var path = __webpack_require__("428f");
            var has = __webpack_require__("5135");
            var wrappedWellKnownSymbolModule = __webpack_require__("e538");
            var defineProperty = __webpack_require__("9bf2").f;

            module.exports = function (NAME) {
              var Symbol = path.Symbol || (path.Symbol = {});
              if (!has(Symbol, NAME))
                defineProperty(Symbol, NAME, {
                  value: wrappedWellKnownSymbolModule.f(NAME),
                });
            };

            /***/
          },

          /***/ "7839": /***/ function (module, exports) {
            // IE8- don't enum bug keys
            module.exports = [
              "constructor",
              "hasOwnProperty",
              "isPrototypeOf",
              "propertyIsEnumerable",
              "toLocaleString",
              "toString",
              "valueOf",
            ];

            /***/
          },

          /***/ "7b0b": /***/ function (module, exports, __webpack_require__) {
            var requireObjectCoercible = __webpack_require__("1d80");

            // `ToObject` abstract operation
            // https://tc39.es/ecma262/#sec-toobject
            module.exports = function (argument) {
              return Object(requireObjectCoercible(argument));
            };

            /***/
          },

          /***/ "7c73": /***/ function (module, exports, __webpack_require__) {
            var anObject = __webpack_require__("825a");
            var defineProperties = __webpack_require__("37e8");
            var enumBugKeys = __webpack_require__("7839");
            var hiddenKeys = __webpack_require__("d012");
            var html = __webpack_require__("1be4");
            var documentCreateElement = __webpack_require__("cc12");
            var sharedKey = __webpack_require__("f772");

            var GT = ">";
            var LT = "<";
            var PROTOTYPE = "prototype";
            var SCRIPT = "script";
            var IE_PROTO = sharedKey("IE_PROTO");

            var EmptyConstructor = function () {
              /* empty */
            };

            var scriptTag = function (content) {
              return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
            };

            // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
            var NullProtoObjectViaActiveX = function (activeXDocument) {
              activeXDocument.write(scriptTag(""));
              activeXDocument.close();
              var temp = activeXDocument.parentWindow.Object;
              activeXDocument = null; // avoid memory leak
              return temp;
            };

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var NullProtoObjectViaIFrame = function () {
              // Thrash, waste and sodomy: IE GC bug
              var iframe = documentCreateElement("iframe");
              var JS = "java" + SCRIPT + ":";
              var iframeDocument;
              iframe.style.display = "none";
              html.appendChild(iframe);
              // https://github.com/zloirock/core-js/issues/475
              iframe.src = String(JS);
              iframeDocument = iframe.contentWindow.document;
              iframeDocument.open();
              iframeDocument.write(scriptTag("document.F=Object"));
              iframeDocument.close();
              return iframeDocument.F;
            };

            // Check for document.domain and active x support
            // No need to use active x approach when document.domain is not set
            // see https://github.com/es-shims/es5-shim/issues/150
            // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
            // avoid IE GC bug
            var activeXDocument;
            var NullProtoObject = function () {
              try {
                /* global ActiveXObject -- old IE */
                activeXDocument =
                  document.domain && new ActiveXObject("htmlfile");
              } catch (error) {
                /* ignore */
              }
              NullProtoObject = activeXDocument
                ? NullProtoObjectViaActiveX(activeXDocument)
                : NullProtoObjectViaIFrame();
              var length = enumBugKeys.length;
              while (length--)
                delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
              return NullProtoObject();
            };

            hiddenKeys[IE_PROTO] = true;

            // `Object.create` method
            // https://tc39.es/ecma262/#sec-object.create
            module.exports =
              Object.create ||
              function create(O, Properties) {
                var result;
                if (O !== null) {
                  EmptyConstructor[PROTOTYPE] = anObject(O);
                  result = new EmptyConstructor();
                  EmptyConstructor[PROTOTYPE] = null;
                  // add "__proto__" for Object.getPrototypeOf polyfill
                  result[IE_PROTO] = O;
                } else result = NullProtoObject();
                return Properties === undefined
                  ? result
                  : defineProperties(result, Properties);
              };

            /***/
          },

          /***/ "7db0": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var $find = __webpack_require__("b727").find;
            var addToUnscopables = __webpack_require__("44d2");

            var FIND = "find";
            var SKIPS_HOLES = true;

            // Shouldn't skip holes
            if (FIND in [])
              Array(1)[FIND](function () {
                SKIPS_HOLES = false;
              });

            // `Array.prototype.find` method
            // https://tc39.es/ecma262/#sec-array.prototype.find
            $(
              { target: "Array", proto: true, forced: SKIPS_HOLES },
              {
                find: function find(callbackfn /* , that = undefined */) {
                  return $find(
                    this,
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables(FIND);

            /***/
          },

          /***/ "7dd0": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var createIteratorConstructor = __webpack_require__("9ed3");
            var getPrototypeOf = __webpack_require__("e163");
            var setPrototypeOf = __webpack_require__("d2bb");
            var setToStringTag = __webpack_require__("d44e");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var redefine = __webpack_require__("6eeb");
            var wellKnownSymbol = __webpack_require__("b622");
            var IS_PURE = __webpack_require__("c430");
            var Iterators = __webpack_require__("3f8c");
            var IteratorsCore = __webpack_require__("ae93");

            var IteratorPrototype = IteratorsCore.IteratorPrototype;
            var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
            var ITERATOR = wellKnownSymbol("iterator");
            var KEYS = "keys";
            var VALUES = "values";
            var ENTRIES = "entries";

            var returnThis = function () {
              return this;
            };

            module.exports = function (
              Iterable,
              NAME,
              IteratorConstructor,
              next,
              DEFAULT,
              IS_SET,
              FORCED
            ) {
              createIteratorConstructor(IteratorConstructor, NAME, next);

              var getIterationMethod = function (KIND) {
                if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                  return IterablePrototype[KIND];
                switch (KIND) {
                  case KEYS:
                    return function keys() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case VALUES:
                    return function values() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case ENTRIES:
                    return function entries() {
                      return new IteratorConstructor(this, KIND);
                    };
                }
                return function () {
                  return new IteratorConstructor(this);
                };
              };

              var TO_STRING_TAG = NAME + " Iterator";
              var INCORRECT_VALUES_NAME = false;
              var IterablePrototype = Iterable.prototype;
              var nativeIterator =
                IterablePrototype[ITERATOR] ||
                IterablePrototype["@@iterator"] ||
                (DEFAULT && IterablePrototype[DEFAULT]);
              var defaultIterator =
                (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
                getIterationMethod(DEFAULT);
              var anyNativeIterator =
                NAME == "Array"
                  ? IterablePrototype.entries || nativeIterator
                  : nativeIterator;
              var CurrentIteratorPrototype, methods, KEY;

              // fix native
              if (anyNativeIterator) {
                CurrentIteratorPrototype = getPrototypeOf(
                  anyNativeIterator.call(new Iterable())
                );
                if (
                  IteratorPrototype !== Object.prototype &&
                  CurrentIteratorPrototype.next
                ) {
                  if (
                    !IS_PURE &&
                    getPrototypeOf(CurrentIteratorPrototype) !==
                      IteratorPrototype
                  ) {
                    if (setPrototypeOf) {
                      setPrototypeOf(
                        CurrentIteratorPrototype,
                        IteratorPrototype
                      );
                    } else if (
                      typeof CurrentIteratorPrototype[ITERATOR] != "function"
                    ) {
                      createNonEnumerableProperty(
                        CurrentIteratorPrototype,
                        ITERATOR,
                        returnThis
                      );
                    }
                  }
                  // Set @@toStringTag to native iterators
                  setToStringTag(
                    CurrentIteratorPrototype,
                    TO_STRING_TAG,
                    true,
                    true
                  );
                  if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                }
              }

              // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
              if (
                DEFAULT == VALUES &&
                nativeIterator &&
                nativeIterator.name !== VALUES
              ) {
                INCORRECT_VALUES_NAME = true;
                defaultIterator = function values() {
                  return nativeIterator.call(this);
                };
              }

              // define iterator
              if (
                (!IS_PURE || FORCED) &&
                IterablePrototype[ITERATOR] !== defaultIterator
              ) {
                createNonEnumerableProperty(
                  IterablePrototype,
                  ITERATOR,
                  defaultIterator
                );
              }
              Iterators[NAME] = defaultIterator;

              // export additional methods
              if (DEFAULT) {
                methods = {
                  values: getIterationMethod(VALUES),
                  keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                  entries: getIterationMethod(ENTRIES),
                };
                if (FORCED)
                  for (KEY in methods) {
                    if (
                      BUGGY_SAFARI_ITERATORS ||
                      INCORRECT_VALUES_NAME ||
                      !(KEY in IterablePrototype)
                    ) {
                      redefine(IterablePrototype, KEY, methods[KEY]);
                    }
                  }
                else
                  $(
                    {
                      target: NAME,
                      proto: true,
                      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME,
                    },
                    methods
                  );
              }

              return methods;
            };

            /***/
          },

          /***/ "7f9a": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var inspectSource = __webpack_require__("8925");

            var WeakMap = global.WeakMap;

            module.exports =
              typeof WeakMap === "function" &&
              /native code/.test(inspectSource(WeakMap));

            /***/
          },

          /***/ "825a": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            module.exports = function (it) {
              if (!isObject(it)) {
                throw TypeError(String(it) + " is not an object");
              }
              return it;
            };

            /***/
          },

          /***/ "83ab": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            // Detect IE8's incomplete defineProperty implementation
            module.exports = !fails(function () {
              // eslint-disable-next-line es/no-object-defineproperty -- required for testing
              return (
                Object.defineProperty({}, 1, {
                  get: function () {
                    return 7;
                  },
                })[1] != 7
              );
            });

            /***/
          },

          /***/ "8418": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var toPrimitive = __webpack_require__("c04e");
            var definePropertyModule = __webpack_require__("9bf2");
            var createPropertyDescriptor = __webpack_require__("5c6c");

            module.exports = function (object, key, value) {
              var propertyKey = toPrimitive(key);
              if (propertyKey in object)
                definePropertyModule.f(
                  object,
                  propertyKey,
                  createPropertyDescriptor(0, value)
                );
              else object[propertyKey] = value;
            };

            /***/
          },

          /***/ "861d": /***/ function (module, exports) {
            module.exports = function (it) {
              return typeof it === "object"
                ? it !== null
                : typeof it === "function";
            };

            /***/
          },

          /***/ "8875": /***/ function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__,
              __WEBPACK_AMD_DEFINE_ARRAY__,
              __WEBPACK_AMD_DEFINE_RESULT__; // addapted from the document.currentScript polyfill by Adam Miller
            // MIT license
            // source: https://github.com/amiller-gh/currentScript-polyfill

            // added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

            (function (root, factory) {
              if (true) {
                !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
                (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
                (__WEBPACK_AMD_DEFINE_RESULT__ =
                  typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
                    ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                        exports,
                        __WEBPACK_AMD_DEFINE_ARRAY__
                      )
                    : __WEBPACK_AMD_DEFINE_FACTORY__),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                  (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(typeof self !== "undefined" ? self : this, function () {
              function getCurrentScript() {
                var descriptor = Object.getOwnPropertyDescriptor(
                  document,
                  "currentScript"
                );
                // for chrome
                if (
                  !descriptor &&
                  "currentScript" in document &&
                  document.currentScript
                ) {
                  return document.currentScript;
                }

                // for other browsers with native support for currentScript
                if (
                  descriptor &&
                  descriptor.get !== getCurrentScript &&
                  document.currentScript
                ) {
                  return document.currentScript;
                }

                // IE 8-10 support script readyState
                // IE 11+ & Firefox support stack trace
                try {
                  throw new Error();
                } catch (err) {
                  // Find the second match for the "at" string to get file src url from stack.
                  var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
                    ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/gi,
                    stackDetails =
                      ieStackRegExp.exec(err.stack) ||
                      ffStackRegExp.exec(err.stack),
                    scriptLocation = (stackDetails && stackDetails[1]) || false,
                    line = (stackDetails && stackDetails[2]) || false,
                    currentLocation = document.location.href.replace(
                      document.location.hash,
                      ""
                    ),
                    pageSource,
                    inlineScriptSourceRegExp,
                    inlineScriptSource,
                    scripts = document.getElementsByTagName("script"); // Live NodeList collection

                  if (scriptLocation === currentLocation) {
                    pageSource = document.documentElement.outerHTML;
                    inlineScriptSourceRegExp = new RegExp(
                      "(?:[^\\n]+?\\n){0," +
                        (line - 2) +
                        "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*",
                      "i"
                    );
                    inlineScriptSource = pageSource
                      .replace(inlineScriptSourceRegExp, "$1")
                      .trim();
                  }

                  for (var i = 0; i < scripts.length; i++) {
                    // If ready state is interactive, return the script tag
                    if (scripts[i].readyState === "interactive") {
                      return scripts[i];
                    }

                    // If src matches, return the script tag
                    if (scripts[i].src === scriptLocation) {
                      return scripts[i];
                    }

                    // If inline source matches, return the script tag
                    if (
                      scriptLocation === currentLocation &&
                      scripts[i].innerHTML &&
                      scripts[i].innerHTML.trim() === inlineScriptSource
                    ) {
                      return scripts[i];
                    }
                  }

                  // If no match, return null
                  return null;
                }
              }

              return getCurrentScript;
            });

            /***/
          },

          /***/ "8925": /***/ function (module, exports, __webpack_require__) {
            var store = __webpack_require__("c6cd");

            var functionToString = Function.toString;

            // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
            if (typeof store.inspectSource != "function") {
              store.inspectSource = function (it) {
                return functionToString.call(it);
              };
            }

            module.exports = store.inspectSource;

            /***/
          },

          /***/ "90e3": /***/ function (module, exports) {
            var id = 0;
            var postfix = Math.random();

            module.exports = function (key) {
              return (
                "Symbol(" +
                String(key === undefined ? "" : key) +
                ")_" +
                (++id + postfix).toString(36)
              );
            };

            /***/
          },

          /***/ "9112": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var definePropertyModule = __webpack_require__("9bf2");
            var createPropertyDescriptor = __webpack_require__("5c6c");

            module.exports = DESCRIPTORS
              ? function (object, key, value) {
                  return definePropertyModule.f(
                    object,
                    key,
                    createPropertyDescriptor(1, value)
                  );
                }
              : function (object, key, value) {
                  object[key] = value;
                  return object;
                };

            /***/
          },

          /***/ "94ca": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            var replacement = /#|\.prototype\./;

            var isForced = function (feature, detection) {
              var value = data[normalize(feature)];
              return value == POLYFILL
                ? true
                : value == NATIVE
                ? false
                : typeof detection == "function"
                ? fails(detection)
                : !!detection;
            };

            var normalize = (isForced.normalize = function (string) {
              return String(string).replace(replacement, ".").toLowerCase();
            });

            var data = (isForced.data = {});
            var NATIVE = (isForced.NATIVE = "N");
            var POLYFILL = (isForced.POLYFILL = "P");

            module.exports = isForced;

            /***/
          },

          /***/ "9bdd": /***/ function (module, exports, __webpack_require__) {
            var anObject = __webpack_require__("825a");
            var iteratorClose = __webpack_require__("2a62");

            // call something on iterator step with safe closing on error
            module.exports = function (iterator, fn, value, ENTRIES) {
              try {
                return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
              } catch (error) {
                iteratorClose(iterator);
                throw error;
              }
            };

            /***/
          },

          /***/ "9bf2": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var IE8_DOM_DEFINE = __webpack_require__("0cfb");
            var anObject = __webpack_require__("825a");
            var toPrimitive = __webpack_require__("c04e");

            // eslint-disable-next-line es/no-object-defineproperty -- safe
            var $defineProperty = Object.defineProperty;

            // `Object.defineProperty` method
            // https://tc39.es/ecma262/#sec-object.defineproperty
            exports.f = DESCRIPTORS
              ? $defineProperty
              : function defineProperty(O, P, Attributes) {
                  anObject(O);
                  P = toPrimitive(P, true);
                  anObject(Attributes);
                  if (IE8_DOM_DEFINE)
                    try {
                      return $defineProperty(O, P, Attributes);
                    } catch (error) {
                      /* empty */
                    }
                  if ("get" in Attributes || "set" in Attributes)
                    throw TypeError("Accessors not supported");
                  if ("value" in Attributes) O[P] = Attributes.value;
                  return O;
                };

            /***/
          },

          /***/ "9ed3": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var IteratorPrototype = __webpack_require__("ae93")
              .IteratorPrototype;
            var create = __webpack_require__("7c73");
            var createPropertyDescriptor = __webpack_require__("5c6c");
            var setToStringTag = __webpack_require__("d44e");
            var Iterators = __webpack_require__("3f8c");

            var returnThis = function () {
              return this;
            };

            module.exports = function (IteratorConstructor, NAME, next) {
              var TO_STRING_TAG = NAME + " Iterator";
              IteratorConstructor.prototype = create(IteratorPrototype, {
                next: createPropertyDescriptor(1, next),
              });
              setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
              Iterators[TO_STRING_TAG] = returnThis;
              return IteratorConstructor;
            };

            /***/
          },

          /***/ a434: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var toAbsoluteIndex = __webpack_require__("23cb");
            var toInteger = __webpack_require__("a691");
            var toLength = __webpack_require__("50c4");
            var toObject = __webpack_require__("7b0b");
            var arraySpeciesCreate = __webpack_require__("65f0");
            var createProperty = __webpack_require__("8418");
            var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");

            var max = Math.max;
            var min = Math.min;
            var MAX_SAFE_INTEGER = 0x1fffffffffffff;
            var MAXIMUM_ALLOWED_LENGTH_EXCEEDED =
              "Maximum allowed length exceeded";

            // `Array.prototype.splice` method
            // https://tc39.es/ecma262/#sec-array.prototype.splice
            // with adding support of @@species
            $(
              { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
              {
                splice: function splice(start, deleteCount /* , ...items */) {
                  var O = toObject(this);
                  var len = toLength(O.length);
                  var actualStart = toAbsoluteIndex(start, len);
                  var argumentsLength = arguments.length;
                  var insertCount, actualDeleteCount, A, k, from, to;
                  if (argumentsLength === 0) {
                    insertCount = actualDeleteCount = 0;
                  } else if (argumentsLength === 1) {
                    insertCount = 0;
                    actualDeleteCount = len - actualStart;
                  } else {
                    insertCount = argumentsLength - 2;
                    actualDeleteCount = min(
                      max(toInteger(deleteCount), 0),
                      len - actualStart
                    );
                  }
                  if (
                    len + insertCount - actualDeleteCount >
                    MAX_SAFE_INTEGER
                  ) {
                    throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                  }
                  A = arraySpeciesCreate(O, actualDeleteCount);
                  for (k = 0; k < actualDeleteCount; k++) {
                    from = actualStart + k;
                    if (from in O) createProperty(A, k, O[from]);
                  }
                  A.length = actualDeleteCount;
                  if (insertCount < actualDeleteCount) {
                    for (k = actualStart; k < len - actualDeleteCount; k++) {
                      from = k + actualDeleteCount;
                      to = k + insertCount;
                      if (from in O) O[to] = O[from];
                      else delete O[to];
                    }
                    for (
                      k = len;
                      k > len - actualDeleteCount + insertCount;
                      k--
                    )
                      delete O[k - 1];
                  } else if (insertCount > actualDeleteCount) {
                    for (k = len - actualDeleteCount; k > actualStart; k--) {
                      from = k + actualDeleteCount - 1;
                      to = k + insertCount - 1;
                      if (from in O) O[to] = O[from];
                      else delete O[to];
                    }
                  }
                  for (k = 0; k < insertCount; k++) {
                    O[k + actualStart] = arguments[k + 2];
                  }
                  O.length = len - actualDeleteCount + insertCount;
                  return A;
                },
              }
            );

            /***/
          },

          /***/ a4d3: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var global = __webpack_require__("da84");
            var getBuiltIn = __webpack_require__("d066");
            var IS_PURE = __webpack_require__("c430");
            var DESCRIPTORS = __webpack_require__("83ab");
            var NATIVE_SYMBOL = __webpack_require__("4930");
            var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
            var fails = __webpack_require__("d039");
            var has = __webpack_require__("5135");
            var isArray = __webpack_require__("e8b5");
            var isObject = __webpack_require__("861d");
            var anObject = __webpack_require__("825a");
            var toObject = __webpack_require__("7b0b");
            var toIndexedObject = __webpack_require__("fc6a");
            var toPrimitive = __webpack_require__("c04e");
            var createPropertyDescriptor = __webpack_require__("5c6c");
            var nativeObjectCreate = __webpack_require__("7c73");
            var objectKeys = __webpack_require__("df75");
            var getOwnPropertyNamesModule = __webpack_require__("241c");
            var getOwnPropertyNamesExternal = __webpack_require__("057f");
            var getOwnPropertySymbolsModule = __webpack_require__("7418");
            var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
            var definePropertyModule = __webpack_require__("9bf2");
            var propertyIsEnumerableModule = __webpack_require__("d1e7");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var redefine = __webpack_require__("6eeb");
            var shared = __webpack_require__("5692");
            var sharedKey = __webpack_require__("f772");
            var hiddenKeys = __webpack_require__("d012");
            var uid = __webpack_require__("90e3");
            var wellKnownSymbol = __webpack_require__("b622");
            var wrappedWellKnownSymbolModule = __webpack_require__("e538");
            var defineWellKnownSymbol = __webpack_require__("746f");
            var setToStringTag = __webpack_require__("d44e");
            var InternalStateModule = __webpack_require__("69f3");
            var $forEach = __webpack_require__("b727").forEach;

            var HIDDEN = sharedKey("hidden");
            var SYMBOL = "Symbol";
            var PROTOTYPE = "prototype";
            var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(SYMBOL);
            var ObjectPrototype = Object[PROTOTYPE];
            var $Symbol = global.Symbol;
            var $stringify = getBuiltIn("JSON", "stringify");
            var nativeGetOwnPropertyDescriptor =
              getOwnPropertyDescriptorModule.f;
            var nativeDefineProperty = definePropertyModule.f;
            var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
            var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
            var AllSymbols = shared("symbols");
            var ObjectPrototypeSymbols = shared("op-symbols");
            var StringToSymbolRegistry = shared("string-to-symbol-registry");
            var SymbolToStringRegistry = shared("symbol-to-string-registry");
            var WellKnownSymbolsStore = shared("wks");
            var QObject = global.QObject;
            // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
            var USE_SETTER =
              !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
            var setSymbolDescriptor =
              DESCRIPTORS &&
              fails(function () {
                return (
                  nativeObjectCreate(
                    nativeDefineProperty({}, "a", {
                      get: function () {
                        return nativeDefineProperty(this, "a", { value: 7 }).a;
                      },
                    })
                  ).a != 7
                );
              })
                ? function (O, P, Attributes) {
                    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(
                      ObjectPrototype,
                      P
                    );
                    if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
                    nativeDefineProperty(O, P, Attributes);
                    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
                      nativeDefineProperty(
                        ObjectPrototype,
                        P,
                        ObjectPrototypeDescriptor
                      );
                    }
                  }
                : nativeDefineProperty;

            var wrap = function (tag, description) {
              var symbol = (AllSymbols[tag] = nativeObjectCreate(
                $Symbol[PROTOTYPE]
              ));
              setInternalState(symbol, {
                type: SYMBOL,
                tag: tag,
                description: description,
              });
              if (!DESCRIPTORS) symbol.description = description;
              return symbol;
            };

            var isSymbol = USE_SYMBOL_AS_UID
              ? function (it) {
                  return typeof it == "symbol";
                }
              : function (it) {
                  return Object(it) instanceof $Symbol;
                };

            var $defineProperty = function defineProperty(O, P, Attributes) {
              if (O === ObjectPrototype)
                $defineProperty(ObjectPrototypeSymbols, P, Attributes);
              anObject(O);
              var key = toPrimitive(P, true);
              anObject(Attributes);
              if (has(AllSymbols, key)) {
                if (!Attributes.enumerable) {
                  if (!has(O, HIDDEN))
                    nativeDefineProperty(
                      O,
                      HIDDEN,
                      createPropertyDescriptor(1, {})
                    );
                  O[HIDDEN][key] = true;
                } else {
                  if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                  Attributes = nativeObjectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false),
                  });
                }
                return setSymbolDescriptor(O, key, Attributes);
              }
              return nativeDefineProperty(O, key, Attributes);
            };

            var $defineProperties = function defineProperties(O, Properties) {
              anObject(O);
              var properties = toIndexedObject(Properties);
              var keys = objectKeys(properties).concat(
                $getOwnPropertySymbols(properties)
              );
              $forEach(keys, function (key) {
                if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
                  $defineProperty(O, key, properties[key]);
              });
              return O;
            };

            var $create = function create(O, Properties) {
              return Properties === undefined
                ? nativeObjectCreate(O)
                : $defineProperties(nativeObjectCreate(O), Properties);
            };

            var $propertyIsEnumerable = function propertyIsEnumerable(V) {
              var P = toPrimitive(V, true);
              var enumerable = nativePropertyIsEnumerable.call(this, P);
              if (
                this === ObjectPrototype &&
                has(AllSymbols, P) &&
                !has(ObjectPrototypeSymbols, P)
              )
                return false;
              return enumerable ||
                !has(this, P) ||
                !has(AllSymbols, P) ||
                (has(this, HIDDEN) && this[HIDDEN][P])
                ? enumerable
                : true;
            };

            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(
              O,
              P
            ) {
              var it = toIndexedObject(O);
              var key = toPrimitive(P, true);
              if (
                it === ObjectPrototype &&
                has(AllSymbols, key) &&
                !has(ObjectPrototypeSymbols, key)
              )
                return;
              var descriptor = nativeGetOwnPropertyDescriptor(it, key);
              if (
                descriptor &&
                has(AllSymbols, key) &&
                !(has(it, HIDDEN) && it[HIDDEN][key])
              ) {
                descriptor.enumerable = true;
              }
              return descriptor;
            };

            var $getOwnPropertyNames = function getOwnPropertyNames(O) {
              var names = nativeGetOwnPropertyNames(toIndexedObject(O));
              var result = [];
              $forEach(names, function (key) {
                if (!has(AllSymbols, key) && !has(hiddenKeys, key))
                  result.push(key);
              });
              return result;
            };

            var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
              var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
              var names = nativeGetOwnPropertyNames(
                IS_OBJECT_PROTOTYPE
                  ? ObjectPrototypeSymbols
                  : toIndexedObject(O)
              );
              var result = [];
              $forEach(names, function (key) {
                if (
                  has(AllSymbols, key) &&
                  (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))
                ) {
                  result.push(AllSymbols[key]);
                }
              });
              return result;
            };

            // `Symbol` constructor
            // https://tc39.es/ecma262/#sec-symbol-constructor
            if (!NATIVE_SYMBOL) {
              $Symbol = function Symbol() {
                if (this instanceof $Symbol)
                  throw TypeError("Symbol is not a constructor");
                var description =
                  !arguments.length || arguments[0] === undefined
                    ? undefined
                    : String(arguments[0]);
                var tag = uid(description);
                var setter = function (value) {
                  if (this === ObjectPrototype)
                    setter.call(ObjectPrototypeSymbols, value);
                  if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                    this[HIDDEN][tag] = false;
                  setSymbolDescriptor(
                    this,
                    tag,
                    createPropertyDescriptor(1, value)
                  );
                };
                if (DESCRIPTORS && USE_SETTER)
                  setSymbolDescriptor(ObjectPrototype, tag, {
                    configurable: true,
                    set: setter,
                  });
                return wrap(tag, description);
              };

              redefine($Symbol[PROTOTYPE], "toString", function toString() {
                return getInternalState(this).tag;
              });

              redefine($Symbol, "withoutSetter", function (description) {
                return wrap(uid(description), description);
              });

              propertyIsEnumerableModule.f = $propertyIsEnumerable;
              definePropertyModule.f = $defineProperty;
              getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
              getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
              getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

              wrappedWellKnownSymbolModule.f = function (name) {
                return wrap(wellKnownSymbol(name), name);
              };

              if (DESCRIPTORS) {
                // https://github.com/tc39/proposal-Symbol-description
                nativeDefineProperty($Symbol[PROTOTYPE], "description", {
                  configurable: true,
                  get: function description() {
                    return getInternalState(this).description;
                  },
                });
                if (!IS_PURE) {
                  redefine(
                    ObjectPrototype,
                    "propertyIsEnumerable",
                    $propertyIsEnumerable,
                    { unsafe: true }
                  );
                }
              }
            }

            $(
              {
                global: true,
                wrap: true,
                forced: !NATIVE_SYMBOL,
                sham: !NATIVE_SYMBOL,
              },
              {
                Symbol: $Symbol,
              }
            );

            $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
              defineWellKnownSymbol(name);
            });

            $(
              { target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL },
              {
                // `Symbol.for` method
                // https://tc39.es/ecma262/#sec-symbol.for
                for: function (key) {
                  var string = String(key);
                  if (has(StringToSymbolRegistry, string))
                    return StringToSymbolRegistry[string];
                  var symbol = $Symbol(string);
                  StringToSymbolRegistry[string] = symbol;
                  SymbolToStringRegistry[symbol] = string;
                  return symbol;
                },
                // `Symbol.keyFor` method
                // https://tc39.es/ecma262/#sec-symbol.keyfor
                keyFor: function keyFor(sym) {
                  if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol");
                  if (has(SymbolToStringRegistry, sym))
                    return SymbolToStringRegistry[sym];
                },
                useSetter: function () {
                  USE_SETTER = true;
                },
                useSimple: function () {
                  USE_SETTER = false;
                },
              }
            );

            $(
              {
                target: "Object",
                stat: true,
                forced: !NATIVE_SYMBOL,
                sham: !DESCRIPTORS,
              },
              {
                // `Object.create` method
                // https://tc39.es/ecma262/#sec-object.create
                create: $create,
                // `Object.defineProperty` method
                // https://tc39.es/ecma262/#sec-object.defineproperty
                defineProperty: $defineProperty,
                // `Object.defineProperties` method
                // https://tc39.es/ecma262/#sec-object.defineproperties
                defineProperties: $defineProperties,
                // `Object.getOwnPropertyDescriptor` method
                // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
              }
            );

            $(
              { target: "Object", stat: true, forced: !NATIVE_SYMBOL },
              {
                // `Object.getOwnPropertyNames` method
                // https://tc39.es/ecma262/#sec-object.getownpropertynames
                getOwnPropertyNames: $getOwnPropertyNames,
                // `Object.getOwnPropertySymbols` method
                // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
                getOwnPropertySymbols: $getOwnPropertySymbols,
              }
            );

            // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
            // https://bugs.chromium.org/p/v8/issues/detail?id=3443
            $(
              {
                target: "Object",
                stat: true,
                forced: fails(function () {
                  getOwnPropertySymbolsModule.f(1);
                }),
              },
              {
                getOwnPropertySymbols: function getOwnPropertySymbols(it) {
                  return getOwnPropertySymbolsModule.f(toObject(it));
                },
              }
            );

            // `JSON.stringify` method behavior with symbols
            // https://tc39.es/ecma262/#sec-json.stringify
            if ($stringify) {
              var FORCED_JSON_STRINGIFY =
                !NATIVE_SYMBOL ||
                fails(function () {
                  var symbol = $Symbol();
                  // MS Edge converts symbol values to JSON as {}
                  return (
                    $stringify([symbol]) != "[null]" ||
                    // WebKit converts symbol values to JSON as null
                    $stringify({ a: symbol }) != "{}" ||
                    // V8 throws on boxed symbols
                    $stringify(Object(symbol)) != "{}"
                  );
                });

              $(
                { target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY },
                {
                  // eslint-disable-next-line no-unused-vars -- required for `.length`
                  stringify: function stringify(it, replacer, space) {
                    var args = [it];
                    var index = 1;
                    var $replacer;
                    while (arguments.length > index)
                      args.push(arguments[index++]);
                    $replacer = replacer;
                    if (
                      (!isObject(replacer) && it === undefined) ||
                      isSymbol(it)
                    )
                      return; // IE8 returns string on undefined
                    if (!isArray(replacer))
                      replacer = function (key, value) {
                        if (typeof $replacer == "function")
                          value = $replacer.call(this, key, value);
                        if (!isSymbol(value)) return value;
                      };
                    args[1] = replacer;
                    return $stringify.apply(null, args);
                  },
                }
              );
            }

            // `Symbol.prototype[@@toPrimitive]` method
            // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
            if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
              createNonEnumerableProperty(
                $Symbol[PROTOTYPE],
                TO_PRIMITIVE,
                $Symbol[PROTOTYPE].valueOf
              );
            }
            // `Symbol.prototype[@@toStringTag]` property
            // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
            setToStringTag($Symbol, SYMBOL);

            hiddenKeys[HIDDEN] = true;

            /***/
          },

          /***/ a630: /***/ function (module, exports, __webpack_require__) {
            var $ = __webpack_require__("23e7");
            var from = __webpack_require__("4df4");
            var checkCorrectnessOfIteration = __webpack_require__("1c7e");

            var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (
              iterable
            ) {
              // eslint-disable-next-line es/no-array-from -- required for testing
              Array.from(iterable);
            });

            // `Array.from` method
            // https://tc39.es/ecma262/#sec-array.from
            $(
              { target: "Array", stat: true, forced: INCORRECT_ITERATION },
              {
                from: from,
              }
            );

            /***/
          },

          /***/ a640: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var fails = __webpack_require__("d039");

            module.exports = function (METHOD_NAME, argument) {
              var method = [][METHOD_NAME];
              return (
                !!method &&
                fails(function () {
                  // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
                  method.call(
                    null,
                    argument ||
                      function () {
                        throw 1;
                      },
                    1
                  );
                })
              );
            };

            /***/
          },

          /***/ a691: /***/ function (module, exports) {
            var ceil = Math.ceil;
            var floor = Math.floor;

            // `ToInteger` abstract operation
            // https://tc39.es/ecma262/#sec-tointeger
            module.exports = function (argument) {
              return isNaN((argument = +argument))
                ? 0
                : (argument > 0 ? floor : ceil)(argument);
            };

            /***/
          },

          /***/ a9e3: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var DESCRIPTORS = __webpack_require__("83ab");
            var global = __webpack_require__("da84");
            var isForced = __webpack_require__("94ca");
            var redefine = __webpack_require__("6eeb");
            var has = __webpack_require__("5135");
            var classof = __webpack_require__("c6b6");
            var inheritIfRequired = __webpack_require__("7156");
            var toPrimitive = __webpack_require__("c04e");
            var fails = __webpack_require__("d039");
            var create = __webpack_require__("7c73");
            var getOwnPropertyNames = __webpack_require__("241c").f;
            var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
            var defineProperty = __webpack_require__("9bf2").f;
            var trim = __webpack_require__("58a8").trim;

            var NUMBER = "Number";
            var NativeNumber = global[NUMBER];
            var NumberPrototype = NativeNumber.prototype;

            // Opera ~12 has broken Object#toString
            var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

            // `ToNumber` abstract operation
            // https://tc39.es/ecma262/#sec-tonumber
            var toNumber = function (argument) {
              var it = toPrimitive(argument, false);
              var first, third, radix, maxCode, digits, length, index, code;
              if (typeof it == "string" && it.length > 2) {
                it = trim(it);
                first = it.charCodeAt(0);
                if (first === 43 || first === 45) {
                  third = it.charCodeAt(2);
                  if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                } else if (first === 48) {
                  switch (it.charCodeAt(1)) {
                    case 66:
                    case 98:
                      radix = 2;
                      maxCode = 49;
                      break; // fast equal of /^0b[01]+$/i
                    case 79:
                    case 111:
                      radix = 8;
                      maxCode = 55;
                      break; // fast equal of /^0o[0-7]+$/i
                    default:
                      return +it;
                  }
                  digits = it.slice(2);
                  length = digits.length;
                  for (index = 0; index < length; index++) {
                    code = digits.charCodeAt(index);
                    // parseInt parses a string to a first unavailable symbol
                    // but ToNumber should return NaN if a string contains unavailable symbols
                    if (code < 48 || code > maxCode) return NaN;
                  }
                  return parseInt(digits, radix);
                }
              }
              return +it;
            };

            // `Number` constructor
            // https://tc39.es/ecma262/#sec-number-constructor
            if (
              isForced(
                NUMBER,
                !NativeNumber(" 0o1") ||
                  !NativeNumber("0b1") ||
                  NativeNumber("+0x1")
              )
            ) {
              var NumberWrapper = function Number(value) {
                var it = arguments.length < 1 ? 0 : value;
                var dummy = this;
                return dummy instanceof NumberWrapper &&
                  // check on 1..constructor(foo) case
                  (BROKEN_CLASSOF
                    ? fails(function () {
                        NumberPrototype.valueOf.call(dummy);
                      })
                    : classof(dummy) != NUMBER)
                  ? inheritIfRequired(
                      new NativeNumber(toNumber(it)),
                      dummy,
                      NumberWrapper
                    )
                  : toNumber(it);
              };
              for (
                var keys = DESCRIPTORS
                    ? getOwnPropertyNames(NativeNumber)
                    : // ES3:
                      (
                        "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY," +
                        // ES2015 (in case, if modules with ES2015 Number statics required before):
                        "EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER," +
                        "MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger," +
                        // ESNext
                        "fromString,range"
                      ).split(","),
                  j = 0,
                  key;
                keys.length > j;
                j++
              ) {
                if (
                  has(NativeNumber, (key = keys[j])) &&
                  !has(NumberWrapper, key)
                ) {
                  defineProperty(
                    NumberWrapper,
                    key,
                    getOwnPropertyDescriptor(NativeNumber, key)
                  );
                }
              }
              NumberWrapper.prototype = NumberPrototype;
              NumberPrototype.constructor = NumberWrapper;
              redefine(global, NUMBER, NumberWrapper);
            }

            /***/
          },

          /***/ ab13: /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");

            var MATCH = wellKnownSymbol("match");

            module.exports = function (METHOD_NAME) {
              var regexp = /./;
              try {
                "/./"[METHOD_NAME](regexp);
              } catch (error1) {
                try {
                  regexp[MATCH] = false;
                  return "/./"[METHOD_NAME](regexp);
                } catch (error2) {
                  /* empty */
                }
              }
              return false;
            };

            /***/
          },

          /***/ ae93: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var fails = __webpack_require__("d039");
            var getPrototypeOf = __webpack_require__("e163");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var has = __webpack_require__("5135");
            var wellKnownSymbol = __webpack_require__("b622");
            var IS_PURE = __webpack_require__("c430");

            var ITERATOR = wellKnownSymbol("iterator");
            var BUGGY_SAFARI_ITERATORS = false;

            var returnThis = function () {
              return this;
            };

            // `%IteratorPrototype%` object
            // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
            var IteratorPrototype,
              PrototypeOfArrayIteratorPrototype,
              arrayIterator;

            /* eslint-disable es/no-array-prototype-keys -- safe */
            if ([].keys) {
              arrayIterator = [].keys();
              // Safari 8 has buggy iterators w/o `next`
              if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
              else {
                PrototypeOfArrayIteratorPrototype = getPrototypeOf(
                  getPrototypeOf(arrayIterator)
                );
                if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                  IteratorPrototype = PrototypeOfArrayIteratorPrototype;
              }
            }

            var NEW_ITERATOR_PROTOTYPE =
              IteratorPrototype == undefined ||
              fails(function () {
                var test = {};
                // FF44- legacy iterators case
                return IteratorPrototype[ITERATOR].call(test) !== test;
              });

            if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};

            // `%IteratorPrototype%[@@iterator]()` method
            // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
            if (
              (!IS_PURE || NEW_ITERATOR_PROTOTYPE) &&
              !has(IteratorPrototype, ITERATOR)
            ) {
              createNonEnumerableProperty(
                IteratorPrototype,
                ITERATOR,
                returnThis
              );
            }

            module.exports = {
              IteratorPrototype: IteratorPrototype,
              BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
            };

            /***/
          },

          /***/ b041: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var classof = __webpack_require__("f5df");

            // `Object.prototype.toString` method implementation
            // https://tc39.es/ecma262/#sec-object.prototype.tostring
            module.exports = TO_STRING_TAG_SUPPORT
              ? {}.toString
              : function toString() {
                  return "[object " + classof(this) + "]";
                };

            /***/
          },

          /***/ b0c0: /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var defineProperty = __webpack_require__("9bf2").f;

            var FunctionPrototype = Function.prototype;
            var FunctionPrototypeToString = FunctionPrototype.toString;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = "name";

            // Function instances `.name` property
            // https://tc39.es/ecma262/#sec-function-instances-name
            if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
              defineProperty(FunctionPrototype, NAME, {
                configurable: true,
                get: function () {
                  try {
                    return FunctionPrototypeToString.call(this).match(
                      nameRE
                    )[1];
                  } catch (error) {
                    return "";
                  }
                },
              });
            }

            /***/
          },

          /***/ b622: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var shared = __webpack_require__("5692");
            var has = __webpack_require__("5135");
            var uid = __webpack_require__("90e3");
            var NATIVE_SYMBOL = __webpack_require__("4930");
            var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

            var WellKnownSymbolsStore = shared("wks");
            var Symbol = global.Symbol;
            var createWellKnownSymbol = USE_SYMBOL_AS_UID
              ? Symbol
              : (Symbol && Symbol.withoutSetter) || uid;

            module.exports = function (name) {
              if (
                !has(WellKnownSymbolsStore, name) ||
                !(
                  NATIVE_SYMBOL ||
                  typeof WellKnownSymbolsStore[name] == "string"
                )
              ) {
                if (NATIVE_SYMBOL && has(Symbol, name)) {
                  WellKnownSymbolsStore[name] = Symbol[name];
                } else {
                  WellKnownSymbolsStore[name] = createWellKnownSymbol(
                    "Symbol." + name
                  );
                }
              }
              return WellKnownSymbolsStore[name];
            };

            /***/
          },

          /***/ b64b: /***/ function (module, exports, __webpack_require__) {
            var $ = __webpack_require__("23e7");
            var toObject = __webpack_require__("7b0b");
            var nativeKeys = __webpack_require__("df75");
            var fails = __webpack_require__("d039");

            var FAILS_ON_PRIMITIVES = fails(function () {
              nativeKeys(1);
            });

            // `Object.keys` method
            // https://tc39.es/ecma262/#sec-object.keys
            $(
              { target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES },
              {
                keys: function keys(it) {
                  return nativeKeys(toObject(it));
                },
              }
            );

            /***/
          },

          /***/ b727: /***/ function (module, exports, __webpack_require__) {
            var bind = __webpack_require__("0366");
            var IndexedObject = __webpack_require__("44ad");
            var toObject = __webpack_require__("7b0b");
            var toLength = __webpack_require__("50c4");
            var arraySpeciesCreate = __webpack_require__("65f0");

            var push = [].push;

            // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
            var createMethod = function (TYPE) {
              var IS_MAP = TYPE == 1;
              var IS_FILTER = TYPE == 2;
              var IS_SOME = TYPE == 3;
              var IS_EVERY = TYPE == 4;
              var IS_FIND_INDEX = TYPE == 6;
              var IS_FILTER_OUT = TYPE == 7;
              var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
              return function ($this, callbackfn, that, specificCreate) {
                var O = toObject($this);
                var self = IndexedObject(O);
                var boundFunction = bind(callbackfn, that, 3);
                var length = toLength(self.length);
                var index = 0;
                var create = specificCreate || arraySpeciesCreate;
                var target = IS_MAP
                  ? create($this, length)
                  : IS_FILTER || IS_FILTER_OUT
                  ? create($this, 0)
                  : undefined;
                var value, result;
                for (; length > index; index++)
                  if (NO_HOLES || index in self) {
                    value = self[index];
                    result = boundFunction(value, index, O);
                    if (TYPE) {
                      if (IS_MAP) target[index] = result;
                      // map
                      else if (result)
                        switch (TYPE) {
                          case 3:
                            return true; // some
                          case 5:
                            return value; // find
                          case 6:
                            return index; // findIndex
                          case 2:
                            push.call(target, value); // filter
                        }
                      else
                        switch (TYPE) {
                          case 4:
                            return false; // every
                          case 7:
                            push.call(target, value); // filterOut
                        }
                    }
                  }
                return IS_FIND_INDEX
                  ? -1
                  : IS_SOME || IS_EVERY
                  ? IS_EVERY
                  : target;
              };
            };

            module.exports = {
              // `Array.prototype.forEach` method
              // https://tc39.es/ecma262/#sec-array.prototype.foreach
              forEach: createMethod(0),
              // `Array.prototype.map` method
              // https://tc39.es/ecma262/#sec-array.prototype.map
              map: createMethod(1),
              // `Array.prototype.filter` method
              // https://tc39.es/ecma262/#sec-array.prototype.filter
              filter: createMethod(2),
              // `Array.prototype.some` method
              // https://tc39.es/ecma262/#sec-array.prototype.some
              some: createMethod(3),
              // `Array.prototype.every` method
              // https://tc39.es/ecma262/#sec-array.prototype.every
              every: createMethod(4),
              // `Array.prototype.find` method
              // https://tc39.es/ecma262/#sec-array.prototype.find
              find: createMethod(5),
              // `Array.prototype.findIndex` method
              // https://tc39.es/ecma262/#sec-array.prototype.findIndex
              findIndex: createMethod(6),
              // `Array.prototype.filterOut` method
              // https://github.com/tc39/proposal-array-filtering
              filterOut: createMethod(7),
            };

            /***/
          },

          /***/ c04e: /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            // `ToPrimitive` abstract operation
            // https://tc39.es/ecma262/#sec-toprimitive
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function (input, PREFERRED_STRING) {
              if (!isObject(input)) return input;
              var fn, val;
              if (
                PREFERRED_STRING &&
                typeof (fn = input.toString) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              if (
                typeof (fn = input.valueOf) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              if (
                !PREFERRED_STRING &&
                typeof (fn = input.toString) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              throw TypeError("Can't convert object to primitive value");
            };

            /***/
          },

          /***/ c430: /***/ function (module, exports) {
            module.exports = false;

            /***/
          },

          /***/ c6b6: /***/ function (module, exports) {
            var toString = {}.toString;

            module.exports = function (it) {
              return toString.call(it).slice(8, -1);
            };

            /***/
          },

          /***/ c6cd: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var setGlobal = __webpack_require__("ce4e");

            var SHARED = "__core-js_shared__";
            var store = global[SHARED] || setGlobal(SHARED, {});

            module.exports = store;

            /***/
          },

          /***/ c740: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var $findIndex = __webpack_require__("b727").findIndex;
            var addToUnscopables = __webpack_require__("44d2");

            var FIND_INDEX = "findIndex";
            var SKIPS_HOLES = true;

            // Shouldn't skip holes
            if (FIND_INDEX in [])
              Array(1)[FIND_INDEX](function () {
                SKIPS_HOLES = false;
              });

            // `Array.prototype.findIndex` method
            // https://tc39.es/ecma262/#sec-array.prototype.findindex
            $(
              { target: "Array", proto: true, forced: SKIPS_HOLES },
              {
                findIndex: function findIndex(
                  callbackfn /* , that = undefined */
                ) {
                  return $findIndex(
                    this,
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables(FIND_INDEX);

            /***/
          },

          /***/ c8ba: /***/ function (module, exports) {
            var g;

            // This works in non-strict mode
            g = (function () {
              return this;
            })();

            try {
              // This works if eval is allowed (see CSP)
              g = g || new Function("return this")();
            } catch (e) {
              // This works if the window reference is available
              if (typeof window === "object") g = window;
            }

            // g can still be undefined, but nothing to do about it...
            // We return undefined, instead of nothing here, so it's
            // easier to handle this case. if(!global) { ...}

            module.exports = g;

            /***/
          },

          /***/ ca84: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var toIndexedObject = __webpack_require__("fc6a");
            var indexOf = __webpack_require__("4d64").indexOf;
            var hiddenKeys = __webpack_require__("d012");

            module.exports = function (object, names) {
              var O = toIndexedObject(object);
              var i = 0;
              var result = [];
              var key;
              for (key in O)
                !has(hiddenKeys, key) && has(O, key) && result.push(key);
              // Don't enum bug & hidden keys
              while (names.length > i)
                if (has(O, (key = names[i++]))) {
                  ~indexOf(result, key) || result.push(key);
                }
              return result;
            };

            /***/
          },

          /***/ caad: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var $includes = __webpack_require__("4d64").includes;
            var addToUnscopables = __webpack_require__("44d2");

            // `Array.prototype.includes` method
            // https://tc39.es/ecma262/#sec-array.prototype.includes
            $(
              { target: "Array", proto: true },
              {
                includes: function includes(el /* , fromIndex = 0 */) {
                  return $includes(
                    this,
                    el,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables("includes");

            /***/
          },

          /***/ cc12: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var isObject = __webpack_require__("861d");

            var document = global.document;
            // typeof document.createElement is 'object' in old IE
            var EXISTS = isObject(document) && isObject(document.createElement);

            module.exports = function (it) {
              return EXISTS ? document.createElement(it) : {};
            };

            /***/
          },

          /***/ ce4e: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var createNonEnumerableProperty = __webpack_require__("9112");

            module.exports = function (key, value) {
              try {
                createNonEnumerableProperty(global, key, value);
              } catch (error) {
                global[key] = value;
              }
              return value;
            };

            /***/
          },

          /***/ d012: /***/ function (module, exports) {
            module.exports = {};

            /***/
          },

          /***/ d039: /***/ function (module, exports) {
            module.exports = function (exec) {
              try {
                return !!exec();
              } catch (error) {
                return true;
              }
            };

            /***/
          },

          /***/ d066: /***/ function (module, exports, __webpack_require__) {
            var path = __webpack_require__("428f");
            var global = __webpack_require__("da84");

            var aFunction = function (variable) {
              return typeof variable == "function" ? variable : undefined;
            };

            module.exports = function (namespace, method) {
              return arguments.length < 2
                ? aFunction(path[namespace]) || aFunction(global[namespace])
                : (path[namespace] && path[namespace][method]) ||
                    (global[namespace] && global[namespace][method]);
            };

            /***/
          },

          /***/ d1e7: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $propertyIsEnumerable = {}.propertyIsEnumerable;
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

            // Nashorn ~ JDK8 bug
            var NASHORN_BUG =
              getOwnPropertyDescriptor &&
              !$propertyIsEnumerable.call({ 1: 2 }, 1);

            // `Object.prototype.propertyIsEnumerable` method implementation
            // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
            exports.f = NASHORN_BUG
              ? function propertyIsEnumerable(V) {
                  var descriptor = getOwnPropertyDescriptor(this, V);
                  return !!descriptor && descriptor.enumerable;
                }
              : $propertyIsEnumerable;

            /***/
          },

          /***/ d28b: /***/ function (module, exports, __webpack_require__) {
            var defineWellKnownSymbol = __webpack_require__("746f");

            // `Symbol.iterator` well-known symbol
            // https://tc39.es/ecma262/#sec-symbol.iterator
            defineWellKnownSymbol("iterator");

            /***/
          },

          /***/ d2bb: /***/ function (module, exports, __webpack_require__) {
            /* eslint-disable no-proto -- safe */
            var anObject = __webpack_require__("825a");
            var aPossiblePrototype = __webpack_require__("3bbe");

            // `Object.setPrototypeOf` method
            // https://tc39.es/ecma262/#sec-object.setprototypeof
            // Works with __proto__ only. Old v8 can't work with null proto objects.
            // eslint-disable-next-line es/no-object-setprototypeof -- safe
            module.exports =
              Object.setPrototypeOf ||
              ("__proto__" in {}
                ? (function () {
                    var CORRECT_SETTER = false;
                    var test = {};
                    var setter;
                    try {
                      // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
                      setter = Object.getOwnPropertyDescriptor(
                        Object.prototype,
                        "__proto__"
                      ).set;
                      setter.call(test, []);
                      CORRECT_SETTER = test instanceof Array;
                    } catch (error) {
                      /* empty */
                    }
                    return function setPrototypeOf(O, proto) {
                      anObject(O);
                      aPossiblePrototype(proto);
                      if (CORRECT_SETTER) setter.call(O, proto);
                      else O.__proto__ = proto;
                      return O;
                    };
                  })()
                : undefined);

            /***/
          },

          /***/ d3b7: /***/ function (module, exports, __webpack_require__) {
            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var redefine = __webpack_require__("6eeb");
            var toString = __webpack_require__("b041");

            // `Object.prototype.toString` method
            // https://tc39.es/ecma262/#sec-object.prototype.tostring
            if (!TO_STRING_TAG_SUPPORT) {
              redefine(Object.prototype, "toString", toString, {
                unsafe: true,
              });
            }

            /***/
          },

          /***/ d44e: /***/ function (module, exports, __webpack_require__) {
            var defineProperty = __webpack_require__("9bf2").f;
            var has = __webpack_require__("5135");
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");

            module.exports = function (it, TAG, STATIC) {
              if (
                it &&
                !has((it = STATIC ? it : it.prototype), TO_STRING_TAG)
              ) {
                defineProperty(it, TO_STRING_TAG, {
                  configurable: true,
                  value: TAG,
                });
              }
            };

            /***/
          },

          /***/ d81d: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var $map = __webpack_require__("b727").map;
            var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");

            // `Array.prototype.map` method
            // https://tc39.es/ecma262/#sec-array.prototype.map
            // with adding support of @@species
            $(
              { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
              {
                map: function map(callbackfn /* , thisArg */) {
                  return $map(
                    this,
                    callbackfn,
                    arguments.length > 1 ? arguments[1] : undefined
                  );
                },
              }
            );

            /***/
          },

          /***/ da84: /***/ function (module, exports, __webpack_require__) {
            /* WEBPACK VAR INJECTION */ (function (global) {
              var check = function (it) {
                return it && it.Math == Math && it;
              };

              // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
              module.exports =
                // eslint-disable-next-line es/no-global-this -- safe
                check(typeof globalThis == "object" && globalThis) ||
                check(typeof window == "object" && window) ||
                // eslint-disable-next-line no-restricted-globals -- safe
                check(typeof self == "object" && self) ||
                check(typeof global == "object" && global) ||
                // eslint-disable-next-line no-new-func -- fallback
                (function () {
                  return this;
                })() ||
                Function("return this")();

              /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__("c8ba")));

            /***/
          },

          /***/ dbb4: /***/ function (module, exports, __webpack_require__) {
            var $ = __webpack_require__("23e7");
            var DESCRIPTORS = __webpack_require__("83ab");
            var ownKeys = __webpack_require__("56ef");
            var toIndexedObject = __webpack_require__("fc6a");
            var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
            var createProperty = __webpack_require__("8418");

            // `Object.getOwnPropertyDescriptors` method
            // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
            $(
              { target: "Object", stat: true, sham: !DESCRIPTORS },
              {
                getOwnPropertyDescriptors: function getOwnPropertyDescriptors(
                  object
                ) {
                  var O = toIndexedObject(object);
                  var getOwnPropertyDescriptor =
                    getOwnPropertyDescriptorModule.f;
                  var keys = ownKeys(O);
                  var result = {};
                  var index = 0;
                  var key, descriptor;
                  while (keys.length > index) {
                    descriptor = getOwnPropertyDescriptor(
                      O,
                      (key = keys[index++])
                    );
                    if (descriptor !== undefined)
                      createProperty(result, key, descriptor);
                  }
                  return result;
                },
              }
            );

            /***/
          },

          /***/ ddb0: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var DOMIterables = __webpack_require__("fdbc");
            var ArrayIteratorMethods = __webpack_require__("e260");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var wellKnownSymbol = __webpack_require__("b622");

            var ITERATOR = wellKnownSymbol("iterator");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var ArrayValues = ArrayIteratorMethods.values;

            for (var COLLECTION_NAME in DOMIterables) {
              var Collection = global[COLLECTION_NAME];
              var CollectionPrototype = Collection && Collection.prototype;
              if (CollectionPrototype) {
                // some Chrome versions have non-configurable methods on DOMTokenList
                if (CollectionPrototype[ITERATOR] !== ArrayValues)
                  try {
                    createNonEnumerableProperty(
                      CollectionPrototype,
                      ITERATOR,
                      ArrayValues
                    );
                  } catch (error) {
                    CollectionPrototype[ITERATOR] = ArrayValues;
                  }
                if (!CollectionPrototype[TO_STRING_TAG]) {
                  createNonEnumerableProperty(
                    CollectionPrototype,
                    TO_STRING_TAG,
                    COLLECTION_NAME
                  );
                }
                if (DOMIterables[COLLECTION_NAME])
                  for (var METHOD_NAME in ArrayIteratorMethods) {
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (
                      CollectionPrototype[METHOD_NAME] !==
                      ArrayIteratorMethods[METHOD_NAME]
                    )
                      try {
                        createNonEnumerableProperty(
                          CollectionPrototype,
                          METHOD_NAME,
                          ArrayIteratorMethods[METHOD_NAME]
                        );
                      } catch (error) {
                        CollectionPrototype[METHOD_NAME] =
                          ArrayIteratorMethods[METHOD_NAME];
                      }
                  }
              }
            }

            /***/
          },

          /***/ df75: /***/ function (module, exports, __webpack_require__) {
            var internalObjectKeys = __webpack_require__("ca84");
            var enumBugKeys = __webpack_require__("7839");

            // `Object.keys` method
            // https://tc39.es/ecma262/#sec-object.keys
            // eslint-disable-next-line es/no-object-keys -- safe
            module.exports =
              Object.keys ||
              function keys(O) {
                return internalObjectKeys(O, enumBugKeys);
              };

            /***/
          },

          /***/ e01a: /***/ function (module, exports, __webpack_require__) {
            "use strict";
            // `Symbol.prototype.description` getter
            // https://tc39.es/ecma262/#sec-symbol.prototype.description

            var $ = __webpack_require__("23e7");
            var DESCRIPTORS = __webpack_require__("83ab");
            var global = __webpack_require__("da84");
            var has = __webpack_require__("5135");
            var isObject = __webpack_require__("861d");
            var defineProperty = __webpack_require__("9bf2").f;
            var copyConstructorProperties = __webpack_require__("e893");

            var NativeSymbol = global.Symbol;

            if (
              DESCRIPTORS &&
              typeof NativeSymbol == "function" &&
              (!("description" in NativeSymbol.prototype) ||
                // Safari 12 bug
                NativeSymbol().description !== undefined)
            ) {
              var EmptyStringDescriptionStore = {};
              // wrap Symbol constructor for correct work with undefined description
              var SymbolWrapper = function Symbol() {
                var description =
                  arguments.length < 1 || arguments[0] === undefined
                    ? undefined
                    : String(arguments[0]);
                var result =
                  this instanceof SymbolWrapper
                    ? new NativeSymbol(description)
                    : // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                    description === undefined
                    ? NativeSymbol()
                    : NativeSymbol(description);
                if (description === "")
                  EmptyStringDescriptionStore[result] = true;
                return result;
              };
              copyConstructorProperties(SymbolWrapper, NativeSymbol);
              var symbolPrototype = (SymbolWrapper.prototype =
                NativeSymbol.prototype);
              symbolPrototype.constructor = SymbolWrapper;

              var symbolToString = symbolPrototype.toString;
              var native = String(NativeSymbol("test")) == "Symbol(test)";
              var regexp = /^Symbol\((.*)\)[^)]+$/;
              defineProperty(symbolPrototype, "description", {
                configurable: true,
                get: function description() {
                  var symbol = isObject(this) ? this.valueOf() : this;
                  var string = symbolToString.call(symbol);
                  if (has(EmptyStringDescriptionStore, symbol)) return "";
                  var desc = native
                    ? string.slice(7, -1)
                    : string.replace(regexp, "$1");
                  return desc === "" ? undefined : desc;
                },
              });

              $(
                { global: true, forced: true },
                {
                  Symbol: SymbolWrapper,
                }
              );
            }

            /***/
          },

          /***/ e163: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var toObject = __webpack_require__("7b0b");
            var sharedKey = __webpack_require__("f772");
            var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

            var IE_PROTO = sharedKey("IE_PROTO");
            var ObjectPrototype = Object.prototype;

            // `Object.getPrototypeOf` method
            // https://tc39.es/ecma262/#sec-object.getprototypeof
            // eslint-disable-next-line es/no-object-getprototypeof -- safe
            module.exports = CORRECT_PROTOTYPE_GETTER
              ? Object.getPrototypeOf
              : function (O) {
                  O = toObject(O);
                  if (has(O, IE_PROTO)) return O[IE_PROTO];
                  if (
                    typeof O.constructor == "function" &&
                    O instanceof O.constructor
                  ) {
                    return O.constructor.prototype;
                  }
                  return O instanceof Object ? ObjectPrototype : null;
                };

            /***/
          },

          /***/ e177: /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            module.exports = !fails(function () {
              function F() {
                /* empty */
              }
              F.prototype.constructor = null;
              // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
              return Object.getPrototypeOf(new F()) !== F.prototype;
            });

            /***/
          },

          /***/ e260: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var toIndexedObject = __webpack_require__("fc6a");
            var addToUnscopables = __webpack_require__("44d2");
            var Iterators = __webpack_require__("3f8c");
            var InternalStateModule = __webpack_require__("69f3");
            var defineIterator = __webpack_require__("7dd0");

            var ARRAY_ITERATOR = "Array Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(
              ARRAY_ITERATOR
            );

            // `Array.prototype.entries` method
            // https://tc39.es/ecma262/#sec-array.prototype.entries
            // `Array.prototype.keys` method
            // https://tc39.es/ecma262/#sec-array.prototype.keys
            // `Array.prototype.values` method
            // https://tc39.es/ecma262/#sec-array.prototype.values
            // `Array.prototype[@@iterator]` method
            // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
            // `CreateArrayIterator` internal method
            // https://tc39.es/ecma262/#sec-createarrayiterator
            module.exports = defineIterator(
              Array,
              "Array",
              function (iterated, kind) {
                setInternalState(this, {
                  type: ARRAY_ITERATOR,
                  target: toIndexedObject(iterated), // target
                  index: 0, // next index
                  kind: kind, // kind
                });
                // `%ArrayIteratorPrototype%.next` method
                // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
              },
              function () {
                var state = getInternalState(this);
                var target = state.target;
                var kind = state.kind;
                var index = state.index++;
                if (!target || index >= target.length) {
                  state.target = undefined;
                  return { value: undefined, done: true };
                }
                if (kind == "keys") return { value: index, done: false };
                if (kind == "values")
                  return { value: target[index], done: false };
                return { value: [index, target[index]], done: false };
              },
              "values"
            );

            // argumentsList[@@iterator] is %ArrayProto_values%
            // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
            // https://tc39.es/ecma262/#sec-createmappedargumentsobject
            Iterators.Arguments = Iterators.Array;

            // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables("keys");
            addToUnscopables("values");
            addToUnscopables("entries");

            /***/
          },

          /***/ e439: /***/ function (module, exports, __webpack_require__) {
            var $ = __webpack_require__("23e7");
            var fails = __webpack_require__("d039");
            var toIndexedObject = __webpack_require__("fc6a");
            var nativeGetOwnPropertyDescriptor = __webpack_require__("06cf").f;
            var DESCRIPTORS = __webpack_require__("83ab");

            var FAILS_ON_PRIMITIVES = fails(function () {
              nativeGetOwnPropertyDescriptor(1);
            });
            var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

            // `Object.getOwnPropertyDescriptor` method
            // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
            $(
              {
                target: "Object",
                stat: true,
                forced: FORCED,
                sham: !DESCRIPTORS,
              },
              {
                getOwnPropertyDescriptor: function getOwnPropertyDescriptor(
                  it,
                  key
                ) {
                  return nativeGetOwnPropertyDescriptor(
                    toIndexedObject(it),
                    key
                  );
                },
              }
            );

            /***/
          },

          /***/ e538: /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");

            exports.f = wellKnownSymbol;

            /***/
          },

          /***/ e66f: /***/ function (module, exports, __webpack_require__) {
            // extracted by mini-css-extract-plugin
            /***/
          },

          /***/ e893: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var ownKeys = __webpack_require__("56ef");
            var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
            var definePropertyModule = __webpack_require__("9bf2");

            module.exports = function (target, source) {
              var keys = ownKeys(source);
              var defineProperty = definePropertyModule.f;
              var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (!has(target, key))
                  defineProperty(
                    target,
                    key,
                    getOwnPropertyDescriptor(source, key)
                  );
              }
            };

            /***/
          },

          /***/ e8b5: /***/ function (module, exports, __webpack_require__) {
            var classof = __webpack_require__("c6b6");

            // `IsArray` abstract operation
            // https://tc39.es/ecma262/#sec-isarray
            // eslint-disable-next-line es/no-array-isarray -- safe
            module.exports =
              Array.isArray ||
              function isArray(arg) {
                return classof(arg) == "Array";
              };

            /***/
          },

          /***/ e90c: /***/ function (
            module,
            __webpack_exports__,
            __webpack_require__
          ) {
            "use strict";
            /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_splitpanes_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
              "e66f"
            );
            /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_splitpanes_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_splitpanes_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__
            );
            /* unused harmony reexport * */

            /***/
          },

          /***/ e95a: /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");
            var Iterators = __webpack_require__("3f8c");

            var ITERATOR = wellKnownSymbol("iterator");
            var ArrayPrototype = Array.prototype;

            // check on default Array iterator
            module.exports = function (it) {
              return (
                it !== undefined &&
                (Iterators.Array === it || ArrayPrototype[ITERATOR] === it)
              );
            };

            /***/
          },

          /***/ f5df: /***/ function (module, exports, __webpack_require__) {
            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var classofRaw = __webpack_require__("c6b6");
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            // ES3 wrong here
            var CORRECT_ARGUMENTS =
              classofRaw(
                (function () {
                  return arguments;
                })()
              ) == "Arguments";

            // fallback for IE11 Script Access Denied error
            var tryGet = function (it, key) {
              try {
                return it[key];
              } catch (error) {
                /* empty */
              }
            };

            // getting tag from ES6+ `Object.prototype.toString`
            module.exports = TO_STRING_TAG_SUPPORT
              ? classofRaw
              : function (it) {
                  var O, tag, result;
                  return it === undefined
                    ? "Undefined"
                    : it === null
                    ? "Null"
                    : // @@toStringTag case
                    typeof (tag = tryGet((O = Object(it)), TO_STRING_TAG)) ==
                      "string"
                    ? tag
                    : // builtinTag case
                    CORRECT_ARGUMENTS
                    ? classofRaw(O)
                    : // ES3 arguments fallback
                    (result = classofRaw(O)) == "Object" &&
                      typeof O.callee == "function"
                    ? "Arguments"
                    : result;
                };

            /***/
          },

          /***/ f772: /***/ function (module, exports, __webpack_require__) {
            var shared = __webpack_require__("5692");
            var uid = __webpack_require__("90e3");

            var keys = shared("keys");

            module.exports = function (key) {
              return keys[key] || (keys[key] = uid(key));
            };

            /***/
          },

          /***/ fae3: /***/ function (
            module,
            __webpack_exports__,
            __webpack_require__
          ) {
            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);

            // EXPORTS
            __webpack_require__.d(
              __webpack_exports__,
              "Splitpanes",
              function () {
                return /* reexport */ splitpanes;
              }
            );
            __webpack_require__.d(__webpack_exports__, "Pane", function () {
              return /* reexport */ splitpanes_pane;
            });

            // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
            // This file is imported into lib/wc client bundles.

            if (typeof window !== "undefined") {
              var currentScript = window.document.currentScript;
              if (true) {
                var getCurrentScript = __webpack_require__("8875");
                currentScript = getCurrentScript();

                // for backward compatibility, because previously we directly included the polyfill
                if (!("currentScript" in document)) {
                  Object.defineProperty(document, "currentScript", {
                    get: getCurrentScript,
                  });
                }
              }

              var src =
                currentScript &&
                currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
              if (src) {
                __webpack_require__.p = src[1]; // eslint-disable-line
              }
            }

            // Indicate to webpack that this file can be concatenated
            /* harmony default export */ var setPublicPath = null;

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js
            var es_object_keys = __webpack_require__("b64b");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
            var es_symbol = __webpack_require__("a4d3");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
            var es_array_filter = __webpack_require__("4de4");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js
            var es_object_get_own_property_descriptor = __webpack_require__(
              "e439"
            );

            // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
            var web_dom_collections_for_each = __webpack_require__("159b");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js
            var es_object_get_own_property_descriptors = __webpack_require__(
              "dbb4"
            );

            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true,
                });
              } else {
                obj[key] = value;
              }

              return obj;
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

            function ownKeys(object, enumerableOnly) {
              var keys = Object.keys(object);

              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);

                if (enumerableOnly) {
                  symbols = symbols.filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(
                      object,
                      sym
                    ).enumerable;
                  });
                }

                keys.push.apply(keys, symbols);
              }

              return keys;
            }

            function _objectSpread2(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i] != null ? arguments[i] : {};

                if (i % 2) {
                  ownKeys(Object(source), true).forEach(function (key) {
                    _defineProperty(target, key, source[key]);
                  });
                } else if (Object.getOwnPropertyDescriptors) {
                  Object.defineProperties(
                    target,
                    Object.getOwnPropertyDescriptors(source)
                  );
                } else {
                  ownKeys(Object(source)).forEach(function (key) {
                    Object.defineProperty(
                      target,
                      key,
                      Object.getOwnPropertyDescriptor(source, key)
                    );
                  });
                }
              }

              return target;
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
            function _arrayWithHoles(arr) {
              if (Array.isArray(arr)) return arr;
            }
            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
            var es_symbol_description = __webpack_require__("e01a");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
            var es_object_to_string = __webpack_require__("d3b7");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
            var es_symbol_iterator = __webpack_require__("d28b");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
            var es_string_iterator = __webpack_require__("3ca3");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
            var web_dom_collections_iterator = __webpack_require__("ddb0");

            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

            function _iterableToArrayLimit(arr, i) {
              var _i =
                arr == null
                  ? null
                  : (typeof Symbol !== "undefined" && arr[Symbol.iterator]) ||
                    arr["@@iterator"];

              if (_i == null) return;
              var _arr = [];
              var _n = true;
              var _d = false;

              var _s, _e;

              try {
                for (
                  _i = _i.call(arr);
                  !(_n = (_s = _i.next()).done);
                  _n = true
                ) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }
            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
            var es_array_slice = __webpack_require__("fb6a");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
            var es_function_name = __webpack_require__("b0c0");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js
            var es_array_from = __webpack_require__("a630");

            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

            function _unsupportedIterableToArray(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (
                n === "Arguments" ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
              )
                return _arrayLikeToArray(o, minLen);
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
            function _nonIterableRest() {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js

            function _slicedToArray(arr, i) {
              return (
                _arrayWithHoles(arr) ||
                _iterableToArrayLimit(arr, i) ||
                _unsupportedIterableToArray(arr, i) ||
                _nonIterableRest()
              );
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null) return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;

              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
              }

              return target;
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

            function _objectWithoutProperties(source, excluded) {
              if (source == null) return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key, i;

              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key = sourceSymbolKeys[i];
                  if (excluded.indexOf(key) >= 0) continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key))
                    continue;
                  target[key] = source[key];
                }
              }

              return target;
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr)) return _arrayLikeToArray(arr);
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

            function _iterableToArray(iter) {
              if (
                (typeof Symbol !== "undefined" &&
                  iter[Symbol.iterator] != null) ||
                iter["@@iterator"] != null
              )
                return Array.from(iter);
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
            function _nonIterableSpread() {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

            function _toConsumableArray(arr) {
              return (
                _arrayWithoutHoles(arr) ||
                _iterableToArray(arr) ||
                _unsupportedIterableToArray(arr) ||
                _nonIterableSpread()
              );
            }
            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
            var es_array_map = __webpack_require__("d81d");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js
            var es_array_find = __webpack_require__("7db0");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
            var es_array_includes = __webpack_require__("caad");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
            var es_string_includes = __webpack_require__("2532");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.entries.js
            var es_object_entries = __webpack_require__("4fad");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
            var es_array_splice = __webpack_require__("a434");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js
            var es_array_find_index = __webpack_require__("c740");

            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/splitpanes/splitpanes.vue?vue&type=script&lang=js&

            var _excluded = ["target"];

            /* harmony default export */ var splitpanesvue_type_script_lang_js_ = {
              name: "splitpanes",
              props: {
                horizontal: {
                  type: Boolean,
                },
                pushOtherPanes: {
                  type: Boolean,
                  default: true,
                },
                dblClickSplitter: {
                  type: Boolean,
                  default: true,
                },
                rtl: {
                  type: Boolean,
                  default: false,
                },
                // Right to left direction.
                firstSplitter: {
                  type: Boolean,
                },
              },
              provide: function provide() {
                return {
                  requestUpdate: this.requestUpdate,
                  onPaneAdd: this.onPaneAdd,
                  onPaneRemove: this.onPaneRemove,
                  onPaneClick: this.onPaneClick,
                };
              },
              data: function data() {
                return {
                  container: null,
                  ready: false,
                  panes: [],
                  touch: {
                    mouseDown: false,
                    dragging: false,
                    activeSplitter: null,
                  },
                  splitterTaps: {
                    // Used to detect double click on touch devices.
                    splitter: null,
                    timeoutId: null,
                  },
                };
              },
              computed: {
                panesCount: function panesCount() {
                  return this.panes.length;
                },
                // Indexed panes by `_uid` of Pane components for fast lookup.
                // Every time a pane is destroyed this index is recomputed.
                indexedPanes: function indexedPanes() {
                  return this.panes.reduce(function (obj, pane) {
                    return (obj[pane.id] = pane) && obj;
                  }, {});
                },
              },
              methods: {
                updatePaneComponents: function updatePaneComponents() {
                  var _this = this;

                  // On update refresh the size of each pane through the registered `update` method (in onPaneAdd).
                  this.panes.forEach(function (pane) {
                    pane.update &&
                      pane.update(
                        _defineProperty(
                          {},
                          _this.horizontal ? "height" : "width",
                          "".concat(_this.indexedPanes[pane.id].size, "%")
                        )
                      );
                  });
                },
                bindEvents: function bindEvents() {
                  document.addEventListener("mousemove", this.onMouseMove, {
                    passive: false,
                  });
                  document.addEventListener("mouseup", this.onMouseUp); // Passive: false to prevent scrolling while touch dragging.

                  if ("ontouchstart" in window) {
                    document.addEventListener("touchmove", this.onMouseMove, {
                      passive: false,
                    });
                    document.addEventListener("touchend", this.onMouseUp);
                  }
                },
                unbindEvents: function unbindEvents() {
                  document.removeEventListener("mousemove", this.onMouseMove, {
                    passive: false,
                  });
                  document.removeEventListener("mouseup", this.onMouseUp);

                  if ("ontouchstart" in window) {
                    document.removeEventListener(
                      "touchmove",
                      this.onMouseMove,
                      {
                        passive: false,
                      }
                    );
                    document.removeEventListener("touchend", this.onMouseUp);
                  }
                },
                onMouseDown: function onMouseDown(event, splitterIndex) {
                  this.bindEvents();
                  this.touch.mouseDown = true;
                  this.touch.activeSplitter = splitterIndex;
                },
                onMouseMove: function onMouseMove(event) {
                  if (this.touch.mouseDown) {
                    // Prevent scrolling while touch dragging (only works with an active event, eg. passive: false).
                    event.preventDefault();
                    this.touch.dragging = true;
                    this.calculatePanesSize(this.getCurrentMouseDrag(event));
                    this.$emit(
                      "resize",
                      this.panes.map(function (pane) {
                        return {
                          min: pane.min,
                          max: pane.max,
                          size: pane.size,
                        };
                      })
                    );
                  }
                },
                onMouseUp: function onMouseUp() {
                  var _this2 = this;

                  if (this.touch.dragging) {
                    this.$emit(
                      "resized",
                      this.panes.map(function (pane) {
                        return {
                          min: pane.min,
                          max: pane.max,
                          size: pane.size,
                        };
                      })
                    );
                  }

                  this.touch.mouseDown = false; // Keep dragging flag until click event is finished (click happens immediately after mouseup)
                  // in order to prevent emitting `splitter-click` event if splitter was dragged.

                  setTimeout(function () {
                    _this2.touch.dragging = false;

                    _this2.unbindEvents();
                  }, 100);
                },
                // If touch device, detect double tap manually (2 taps separated by less than 500ms).
                onSplitterClick: function onSplitterClick(
                  event,
                  splitterIndex
                ) {
                  var _this3 = this;

                  if ("ontouchstart" in window) {
                    event.preventDefault(); // Detect splitter double taps if the option is on.

                    if (this.dblClickSplitter) {
                      if (this.splitterTaps.splitter === splitterIndex) {
                        clearTimeout(this.splitterTaps.timeoutId);
                        this.splitterTaps.timeoutId = null;
                        this.onSplitterDblClick(event, splitterIndex);
                        this.splitterTaps.splitter = null; // Reset for the next tap check.
                      } else {
                        this.splitterTaps.splitter = splitterIndex;
                        this.splitterTaps.timeoutId = setTimeout(function () {
                          _this3.splitterTaps.splitter = null;
                        }, 500);
                      }
                    }
                  }

                  if (!this.touch.dragging)
                    this.$emit("splitter-click", this.panes[splitterIndex]);
                },
                // On splitter dbl click or dbl tap maximize this pane.
                onSplitterDblClick: function onSplitterDblClick(
                  event,
                  splitterIndex
                ) {
                  var totalMinSizes = 0;
                  this.panes = this.panes.map(function (pane, i) {
                    pane.size = i === splitterIndex ? pane.max : pane.min;
                    if (i !== splitterIndex) totalMinSizes += pane.min;
                    return pane;
                  });
                  this.panes[splitterIndex].size -= totalMinSizes;
                  this.$emit("pane-maximize", this.panes[splitterIndex]);
                },
                onPaneClick: function onPaneClick(event, paneId) {
                  this.$emit("pane-click", this.indexedPanes[paneId]);
                },
                // Get the cursor position relative to the splitpane container.
                getCurrentMouseDrag: function getCurrentMouseDrag(event) {
                  var rect = this.container.getBoundingClientRect();

                  var _ref =
                      "ontouchstart" in window && event.touches
                        ? event.touches[0]
                        : event,
                    clientX = _ref.clientX,
                    clientY = _ref.clientY;

                  return {
                    x: clientX - rect.left,
                    y: clientY - rect.top,
                  };
                },
                // Returns the drag percentage of the splitter relative to the 2 panes it's inbetween.
                // if the sum of size of the 2 cells is 60%, the dragPercentage range will be 0 to 100% of this 60%.
                getCurrentDragPercentage: function getCurrentDragPercentage(
                  drag
                ) {
                  drag = drag[this.horizontal ? "y" : "x"]; // In the code bellow 'size' refers to 'width' for vertical and 'height' for horizontal layout.

                  var containerSize = this.container[
                    this.horizontal ? "clientHeight" : "clientWidth"
                  ];
                  if (this.rtl && !this.horizontal) drag = containerSize - drag;
                  return (drag * 100) / containerSize;
                },
                calculatePanesSize: function calculatePanesSize(drag) {
                  var splitterIndex = this.touch.activeSplitter;
                  var sums = {
                    prevPanesSize: this.sumPrevPanesSize(splitterIndex),
                    nextPanesSize: this.sumNextPanesSize(splitterIndex),
                    prevReachedMinPanes: 0,
                    nextReachedMinPanes: 0,
                  };
                  var minDrag =
                    0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize);
                  var maxDrag =
                    100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize);
                  var dragPercentage = Math.max(
                    Math.min(this.getCurrentDragPercentage(drag), maxDrag),
                    minDrag
                  ); // If not pushing other panes, panes to resize are right before and right after splitter.

                  var panesToResize = [splitterIndex, splitterIndex + 1];
                  var paneBefore = this.panes[panesToResize[0]] || null;
                  var paneAfter = this.panes[panesToResize[1]] || null;
                  var paneBeforeMaxReached =
                    paneBefore.max < 100 &&
                    dragPercentage >= paneBefore.max + sums.prevPanesSize;
                  var paneAfterMaxReached =
                    paneAfter.max < 100 &&
                    dragPercentage <=
                      100 -
                        (paneAfter.max +
                          this.sumNextPanesSize(splitterIndex + 1)); // Prevent dragging beyond pane max.

                  if (paneBeforeMaxReached || paneAfterMaxReached) {
                    if (paneBeforeMaxReached) {
                      paneBefore.size = paneBefore.max;
                      paneAfter.size = Math.max(
                        100 -
                          paneBefore.max -
                          sums.prevPanesSize -
                          sums.nextPanesSize,
                        0
                      );
                    } else {
                      paneBefore.size = Math.max(
                        100 -
                          paneAfter.max -
                          sums.prevPanesSize -
                          this.sumNextPanesSize(splitterIndex + 1),
                        0
                      );
                      paneAfter.size = paneAfter.max;
                    }

                    return;
                  } // When pushOtherPanes = true, find the closest expanded pane on each side of the splitter.

                  if (this.pushOtherPanes) {
                    var vars = this.doPushOtherPanes(sums, dragPercentage);
                    if (!vars) return; // Prevent other calculation.

                    sums = vars.sums;
                    panesToResize = vars.panesToResize;
                    paneBefore = this.panes[panesToResize[0]] || null;
                    paneAfter = this.panes[panesToResize[1]] || null;
                  }

                  if (paneBefore !== null) {
                    paneBefore.size = Math.min(
                      Math.max(
                        dragPercentage -
                          sums.prevPanesSize -
                          sums.prevReachedMinPanes,
                        paneBefore.min
                      ),
                      paneBefore.max
                    );
                  }

                  if (paneAfter !== null) {
                    paneAfter.size = Math.min(
                      Math.max(
                        100 -
                          dragPercentage -
                          sums.nextPanesSize -
                          sums.nextReachedMinPanes,
                        paneAfter.min
                      ),
                      paneAfter.max
                    );
                  }
                },
                doPushOtherPanes: function doPushOtherPanes(
                  sums,
                  dragPercentage
                ) {
                  var _this4 = this;

                  var splitterIndex = this.touch.activeSplitter;
                  var panesToResize = [splitterIndex, splitterIndex + 1]; // Pushing Down.
                  // Going smaller than the current pane min size: take the previous expanded pane.

                  if (
                    dragPercentage <
                    sums.prevPanesSize + this.panes[panesToResize[0]].min
                  ) {
                    panesToResize[0] = this.findPrevExpandedPane(
                      splitterIndex
                    ).index;
                    sums.prevReachedMinPanes = 0; // If pushing a n-2 or less pane, from splitter, then make sure all in between is at min size.

                    if (panesToResize[0] < splitterIndex) {
                      this.panes.forEach(function (pane, i) {
                        if (i > panesToResize[0] && i <= splitterIndex) {
                          pane.size = pane.min;
                          sums.prevReachedMinPanes += pane.min;
                        }
                      });
                    }

                    sums.prevPanesSize = this.sumPrevPanesSize(
                      panesToResize[0]
                    ); // If nothing else to push down, cancel dragging.

                    if (panesToResize[0] === undefined) {
                      sums.prevReachedMinPanes = 0;
                      this.panes[0].size = this.panes[0].min;
                      this.panes.forEach(function (pane, i) {
                        if (i > 0 && i <= splitterIndex) {
                          pane.size = pane.min;
                          sums.prevReachedMinPanes += pane.min;
                        }
                      });
                      this.panes[panesToResize[1]].size =
                        100 -
                        sums.prevReachedMinPanes -
                        this.panes[0].min -
                        sums.prevPanesSize -
                        sums.nextPanesSize;
                      return null;
                    }
                  } // Pushing Up.
                  // Pushing up beyond min size is reached: take the next expanded pane.

                  if (
                    dragPercentage >
                    100 - sums.nextPanesSize - this.panes[panesToResize[1]].min
                  ) {
                    panesToResize[1] = this.findNextExpandedPane(
                      splitterIndex
                    ).index;
                    sums.nextReachedMinPanes = 0; // If pushing a n+2 or more pane, from splitter, then make sure all in between is at min size.

                    if (panesToResize[1] > splitterIndex + 1) {
                      this.panes.forEach(function (pane, i) {
                        if (i > splitterIndex && i < panesToResize[1]) {
                          pane.size = pane.min;
                          sums.nextReachedMinPanes += pane.min;
                        }
                      });
                    }

                    sums.nextPanesSize = this.sumNextPanesSize(
                      panesToResize[1] - 1
                    ); // If nothing else to push up, cancel dragging.

                    if (panesToResize[1] === undefined) {
                      sums.nextReachedMinPanes = 0;
                      this.panes[this.panesCount - 1].size = this.panes[
                        this.panesCount - 1
                      ].min;
                      this.panes.forEach(function (pane, i) {
                        if (
                          i < _this4.panesCount - 1 &&
                          i >= splitterIndex + 1
                        ) {
                          pane.size = pane.min;
                          sums.nextReachedMinPanes += pane.min;
                        }
                      });
                      this.panes[panesToResize[0]].size =
                        100 -
                        sums.prevPanesSize -
                        sums.nextReachedMinPanes -
                        this.panes[this.panesCount - 1].min -
                        sums.nextPanesSize;
                      return null;
                    }
                  }

                  return {
                    sums: sums,
                    panesToResize: panesToResize,
                  };
                },
                sumPrevPanesSize: function sumPrevPanesSize(splitterIndex) {
                  return this.panes.reduce(function (total, pane, i) {
                    return total + (i < splitterIndex ? pane.size : 0);
                  }, 0);
                },
                sumNextPanesSize: function sumNextPanesSize(splitterIndex) {
                  return this.panes.reduce(function (total, pane, i) {
                    return total + (i > splitterIndex + 1 ? pane.size : 0);
                  }, 0);
                },
                // Return the previous pane from siblings which has a size (width for vert or height for horz) of more than 0.
                findPrevExpandedPane: function findPrevExpandedPane(
                  splitterIndex
                ) {
                  var pane = _toConsumableArray(this.panes)
                    .reverse()
                    .find(function (p) {
                      return p.index < splitterIndex && p.size > p.min;
                    });

                  return pane || {};
                },
                // Return the next pane from siblings which has a size (width for vert or height for horz) of more than 0.
                findNextExpandedPane: function findNextExpandedPane(
                  splitterIndex
                ) {
                  var pane = this.panes.find(function (p) {
                    return p.index > splitterIndex + 1 && p.size > p.min;
                  });
                  return pane || {};
                },
                checkSplitpanesNodes: function checkSplitpanesNodes() {
                  var children = Array.from(this.container.children);
                  children.forEach(function (child) {
                    var isPane = child.classList.contains("splitpanes__pane");
                    var isSplitter = child.classList.contains(
                      "splitpanes__splitter"
                    ); // Node is not a Pane or a splitter: remove it.

                    if (!isPane && !isSplitter) {
                      child.parentNode.removeChild(child); // el.remove() doesn't work on IE11.
                      // eslint-disable-next-line no-console

                      console.warn(
                        "Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed."
                      );
                      return;
                    }
                  });
                },
                addSplitter: function addSplitter(paneIndex, nextPaneNode) {
                  var _this5 = this;

                  var isVeryFirst =
                    arguments.length > 2 && arguments[2] !== undefined
                      ? arguments[2]
                      : false;
                  var splitterIndex = paneIndex - 1;
                  var elm = document.createElement("div");
                  elm.classList.add("splitpanes__splitter");

                  if (!isVeryFirst) {
                    elm.onmousedown = function (event) {
                      return _this5.onMouseDown(event, splitterIndex);
                    };

                    if (
                      typeof window !== "undefined" &&
                      "ontouchstart" in window
                    ) {
                      elm.ontouchstart = function (event) {
                        return _this5.onMouseDown(event, splitterIndex);
                      };
                    }

                    elm.onclick = function (event) {
                      return _this5.onSplitterClick(event, splitterIndex + 1);
                    };
                  }

                  if (this.dblClickSplitter) {
                    elm.ondblclick = function (event) {
                      return _this5.onSplitterDblClick(
                        event,
                        splitterIndex + 1
                      );
                    };
                  }

                  nextPaneNode.parentNode.insertBefore(elm, nextPaneNode);
                },
                removeSplitter: function removeSplitter(node) {
                  node.onmousedown = undefined;
                  node.onclick = undefined;
                  node.ondblclick = undefined;
                  node.parentNode.removeChild(node); // el.remove() doesn't work on IE11.
                },
                redoSplitters: function redoSplitters() {
                  var _this6 = this;

                  var children = Array.from(this.container.children);
                  children.forEach(function (el) {
                    if (el.className.includes("splitpanes__splitter"))
                      _this6.removeSplitter(el);
                  });
                  var paneIndex = 0;
                  children.forEach(function (el) {
                    if (el.className.includes("splitpanes__pane")) {
                      if (!paneIndex && _this6.firstSplitter)
                        _this6.addSplitter(paneIndex, el, true);
                      else if (paneIndex) _this6.addSplitter(paneIndex, el);
                      paneIndex++;
                    }
                  });
                },
                // Called by Pane component on programmatic resize.
                requestUpdate: function requestUpdate(_ref2) {
                  var target = _ref2.target,
                    args = _objectWithoutProperties(_ref2, _excluded);

                  var pane = this.indexedPanes[target._uid];
                  Object.entries(args).forEach(function (_ref3) {
                    var _ref4 = _slicedToArray(_ref3, 2),
                      key = _ref4[0],
                      value = _ref4[1];

                    return (pane[key] = value);
                  });
                },
                onPaneAdd: function onPaneAdd(pane) {
                  var _this7 = this;

                  // 1. Add pane to array at the same index it was inserted in the <splitpanes> tag.
                  var index = -1;
                  Array.from(pane.$el.parentNode.children).some(function (el) {
                    if (el.className.includes("splitpanes__pane")) index++;
                    return el === pane.$el;
                  });
                  var min = parseFloat(pane.minSize);
                  var max = parseFloat(pane.maxSize);
                  this.panes.splice(index, 0, {
                    id: pane._uid,
                    index: index,
                    min: isNaN(min) ? 0 : min,
                    max: isNaN(max) ? 100 : max,
                    size: pane.size === null ? null : parseFloat(pane.size),
                    givenSize: pane.size,
                    update: pane.update,
                  }); // Redo indexes after insertion for other shifted panes.

                  this.panes.forEach(function (p, i) {
                    return (p.index = i);
                  });

                  if (this.ready) {
                    this.$nextTick(function () {
                      // 2. Add the splitter.
                      _this7.redoSplitters(); // 3. Resize the panes.

                      _this7.resetPaneSizes({
                        addedPane: _this7.panes[index],
                      }); // 4. Fire `pane-add` event.

                      _this7.$emit("pane-add", {
                        index: index,
                        panes: _this7.panes.map(function (pane) {
                          return {
                            min: pane.min,
                            max: pane.max,
                            size: pane.size,
                          };
                        }),
                      });
                    });
                  }
                },
                onPaneRemove: function onPaneRemove(pane) {
                  var _this8 = this;

                  // 1. Remove the pane from array and redo indexes.
                  var index = this.panes.findIndex(function (p) {
                    return p.id === pane._uid;
                  });
                  var removed = this.panes.splice(index, 1)[0];
                  this.panes.forEach(function (p, i) {
                    return (p.index = i);
                  });
                  this.$nextTick(function () {
                    // 2. Remove the splitter.
                    _this8.redoSplitters(); // 3. Resize the panes.

                    _this8.resetPaneSizes({
                      removedPane: _objectSpread2(
                        _objectSpread2({}, removed),
                        {},
                        {
                          index: index,
                        }
                      ),
                    }); // 4. Fire `pane-remove` event.

                    _this8.$emit("pane-remove", {
                      removed: removed,
                      panes: _this8.panes.map(function (pane) {
                        return {
                          min: pane.min,
                          max: pane.max,
                          size: pane.size,
                        };
                      }),
                    });
                  });
                },
                resetPaneSizes: function resetPaneSizes() {
                  var changedPanes =
                    arguments.length > 0 && arguments[0] !== undefined
                      ? arguments[0]
                      : {};
                  if (!changedPanes.addedPane && !changedPanes.removedPane)
                    this.initialPanesSizing();
                  else if (
                    this.panes.some(function (pane) {
                      return (
                        pane.givenSize !== null || pane.min || pane.max < 100
                      );
                    })
                  )
                    this.equalizeAfterAddOrRemove(changedPanes);
                  else this.equalize();
                  if (this.ready)
                    this.$emit(
                      "resized",
                      this.panes.map(function (pane) {
                        return {
                          min: pane.min,
                          max: pane.max,
                          size: pane.size,
                        };
                      })
                    );
                },
                equalize: function equalize() {
                  var equalSpace = 100 / this.panesCount;
                  var leftToAllocate = 0;
                  var ungrowable = [];
                  var unshrinkable = [];
                  this.panes.forEach(function (pane) {
                    pane.size = Math.max(
                      Math.min(equalSpace, pane.max),
                      pane.min
                    );
                    leftToAllocate -= pane.size;
                    if (pane.size >= pane.max) ungrowable.push(pane.id);
                    if (pane.size <= pane.min) unshrinkable.push(pane.id);
                  });
                  if (leftToAllocate > 0.1)
                    this.readjustSizes(
                      leftToAllocate,
                      ungrowable,
                      unshrinkable
                    );
                },
                initialPanesSizing: function initialPanesSizing() {
                  var _this9 = this;

                  var equalSpace = 100 / this.panesCount;
                  var leftToAllocate = 100;
                  var ungrowable = [];
                  var unshrinkable = [];
                  var definedSizes = 0; // Check if pre-allocated space is 100%.

                  this.panes.forEach(function (pane) {
                    leftToAllocate -= pane.size;
                    if (pane.size !== null) definedSizes++;
                    if (pane.size >= pane.max) ungrowable.push(pane.id);
                    if (pane.size <= pane.min) unshrinkable.push(pane.id);
                  }); // set pane sizes if not set.

                  var leftToAllocate2 = 100;

                  if (leftToAllocate > 0.1) {
                    this.panes.forEach(function (pane) {
                      if (pane.size === null) {
                        pane.size = Math.max(
                          Math.min(
                            leftToAllocate / (_this9.panesCount - definedSizes),
                            pane.max
                          ),
                          pane.min
                        );
                      }

                      leftToAllocate2 -= pane.size;
                    });
                    if (leftToAllocate2 > 0.1)
                      this.readjustSizes(
                        leftToAllocate,
                        ungrowable,
                        unshrinkable
                      );
                  }
                },
                equalizeAfterAddOrRemove: function equalizeAfterAddOrRemove() {
                  var _ref5 =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : {},
                    addedPane = _ref5.addedPane,
                    removedPane = _ref5.removedPane;

                  var equalSpace = 100 / this.panesCount;
                  var leftToAllocate = 0;
                  var ungrowable = [];
                  var unshrinkable = [];

                  if (addedPane && addedPane.givenSize !== null) {
                    equalSpace =
                      (100 - addedPane.givenSize) / (this.panesCount - 1);
                  } // Check if pre-allocated space is 100%.

                  this.panes.forEach(function (pane) {
                    leftToAllocate -= pane.size;
                    if (pane.size >= pane.max) ungrowable.push(pane.id);
                    if (pane.size <= pane.min) unshrinkable.push(pane.id);
                  });
                  if (Math.abs(leftToAllocate) < 0.1) return; // Ok.

                  this.panes.forEach(function (pane) {
                    if (
                      addedPane &&
                      addedPane.givenSize !== null &&
                      addedPane.id === pane.id
                    ) {
                    } else pane.size = Math.max(Math.min(equalSpace, pane.max), pane.min);

                    leftToAllocate -= pane.size;
                    if (pane.size >= pane.max) ungrowable.push(pane.id);
                    if (pane.size <= pane.min) unshrinkable.push(pane.id);
                  });
                  if (leftToAllocate > 0.1)
                    this.readjustSizes(
                      leftToAllocate,
                      ungrowable,
                      unshrinkable
                    );
                },

                /* recalculatePaneSizes ({ addedPane, removedPane } = {}) {
      let leftToAllocate = 100
      let equalSpaceToAllocate = leftToAllocate / this.panesCount
      let ungrowable = []
      let unshrinkable = []
       // When adding a pane with no size, apply min-size if defined otherwise divide another pane
      // (next or prev) in 2.
      // if (addedPane && addedPane.size === null) {
      //   if (addedPane.min) addedPane.size = addedPane.min
      //   else {
      //     const paneToDivide = this.panes[addedPane.index + 1] || this.panes[addedPane.index - 1]
      //     if (paneToDivide) {
      //       // @todo: Dividing that pane in 2 could be incorrect if becoming lower than its min size.
      //       addedPane.size = paneToDivide.size / 2
      //       paneToDivide.size /= 2
      //     }
      //   }
      // }
       this.panes.forEach((pane, i) => {
        // Added pane - reduce the size of the next pane.
        if (addedPane && addedPane.index + 1 === i) {
          pane.size = Math.max(Math.min(100 - this.sumPrevPanesSize(i) - this.sumNextPanesSize(i + 1), pane.max), pane.min)
          // @todo: if could not allocate correctly, try to allocate in the next pane straight away,
          // then still do the second loop if not correct.
        }
         // Removed pane - increase the size of the next pane.
        else if (removedPane && removedPane.index === i) {
          pane.size = Math.max(Math.min(100 - this.sumPrevPanesSize(i) - this.sumNextPanesSize(i + 1), pane.max), pane.min)
          // @todo: if could not allocate correctly, try to allocate in the next pane straight away,
          // then still do the second loop if not correct.
        }
         // Initial load and on demand recalculation.
        else if (!addedPane && !removedPane && pane.size === null) {
          pane.size = Math.max(Math.min(equalSpaceToAllocate, pane.max), pane.min)
        }
         leftToAllocate -= pane.size
         if (pane.size >= pane.max) ungrowable.push(pane.id)
        if (pane.size <= pane.min) unshrinkable.push(pane.id)
      })
       // Do one more loop to adjust sizes if still wrong.
      // > 0.1: Prevent maths rounding issues due to bytes.
      if (Math.abs(leftToAllocate) > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable)
    }, */
                // Second loop to adjust sizes now that we know more about the panes constraints.
                readjustSizes: function readjustSizes(
                  leftToAllocate,
                  ungrowable,
                  unshrinkable
                ) {
                  var _this10 = this;

                  var equalSpaceToAllocate;
                  if (leftToAllocate > 0)
                    equalSpaceToAllocate =
                      leftToAllocate / (this.panesCount - ungrowable.length);
                  else
                    equalSpaceToAllocate =
                      leftToAllocate / (this.panesCount - unshrinkable.length);
                  this.panes.forEach(function (pane, i) {
                    if (leftToAllocate > 0 && !ungrowable.includes(pane.id)) {
                      // Need to diff the size before and after to get the exact allocated space.
                      var newPaneSize = Math.max(
                        Math.min(pane.size + equalSpaceToAllocate, pane.max),
                        pane.min
                      );
                      var allocated = newPaneSize - pane.size;
                      leftToAllocate -= allocated;
                      pane.size = newPaneSize;
                    } else if (!unshrinkable.includes(pane.id)) {
                      // Need to diff the size before and after to get the exact allocated space.
                      var _newPaneSize = Math.max(
                        Math.min(pane.size + equalSpaceToAllocate, pane.max),
                        pane.min
                      );

                      var _allocated = _newPaneSize - pane.size;

                      leftToAllocate -= _allocated;
                      pane.size = _newPaneSize;
                    } // Update each pane through the registered `update` method.

                    pane.update(
                      _defineProperty(
                        {},
                        _this10.horizontal ? "height" : "width",
                        "".concat(_this10.indexedPanes[pane.id].size, "%")
                      )
                    );
                  });

                  if (Math.abs(leftToAllocate) > 0.1) {
                    // > 0.1: Prevent maths rounding issues due to bytes.
                    // Don't emit on hot reload when Vue destroys panes.
                    this.$nextTick(function () {
                      if (_this10.ready) {
                        // eslint-disable-next-line no-console
                        console.warn(
                          "Splitpanes: Could not resize panes correctly due to their constraints."
                        );
                      }
                    });
                  }
                },
                /* distributeEmptySpace () {
      let growablePanes = []
      let collapsedPanesCount = 0
      let growableAmount = 0 // Total of how much the current panes can grow to fill blank space.
      let spaceToDistribute = 100 - this.panes.reduce((sum, pane) => (sum += pane.size) && sum, 0)
      // Do a first loop to determine if we can distribute the new blank space between all the
      // expandedPanes, without expanding the collapsed ones.
      this.panes.forEach(pane => {
        if (pane.size < pane.max) growablePanes.push(pane)
         if (!pane.size) collapsedPanesCount++
        else growableAmount += pane.max - pane.size
      })
       // If the blank space to distribute is too great for the expanded panes, also expand collapsed ones.
      let expandCollapsedPanes = growableAmount < spaceToDistribute
       // New space to distribute equally.
      let growablePanesCount = (growablePanes.length - (expandCollapsedPanes ? 0 : collapsedPanesCount))
      let equalSpaceToDistribute = spaceToDistribute / growablePanesCount
      // if (growablePanesCount === 1) equalSpace = 100 / this.panesCount
      let spaceLeftToDistribute = spaceToDistribute
       // Now add the equalSpaceToDistribute to each pane size accordingly.
      growablePanes.forEach(pane => {
        if (pane.size < pane.max && (pane.size || (!pane.size && expandCollapsedPanes))) {
          const newSize = Math.min(pane.size + equalSpaceToDistribute, pane.max)
          let allocatedSpace = (newSize - pane.size)
          spaceLeftToDistribute -= allocatedSpace
          pane.size = newSize
          // If the equalSpaceToDistribute is not fully added to the current pane, distribute the remainder
          // to the next panes.
          // Also fix decimal issue due to bites - E.g. calculating 8.33 and getting 8.3299999999999
          if (equalSpaceToDistribute - allocatedSpace > 0.1) equalSpaceToDistribute = spaceLeftToDistribute / (--growablePanesCount)
        }
      })
       /* Disabled otherwise will show up on hot reload.
      // if there is still space to allocate show warning message.
      if (this.panesCount && ~~spaceLeftToDistribute) {
        // eslint-disable-next-line no-console
        console.warn('Splitpanes: Could not distribute all the empty space between panes due to their constraints.')
      } *\/
       this.$emit('resized', this.panes.map(pane => ({ min: pane.min, max: pane.max, size: pane.size })))
    } */
              },
              watch: {
                panes: {
                  // Every time a pane is updated, update the panes accordingly.
                  deep: true,
                  immediate: false,
                  handler: function handler() {
                    this.updatePaneComponents();
                  },
                },
                horizontal: function horizontal() {
                  this.updatePaneComponents();
                },
                firstSplitter: function firstSplitter() {
                  this.redoSplitters();
                },
                dblClickSplitter: function dblClickSplitter(enable) {
                  var _this11 = this;

                  var splitters = _toConsumableArray(
                    this.container.querySelectorAll(".splitpanes__splitter")
                  );

                  splitters.forEach(function (splitter, i) {
                    splitter.ondblclick = enable
                      ? function (event) {
                          return _this11.onSplitterDblClick(event, i);
                        }
                      : undefined;
                  });
                },
              },
              beforeDestroy: function beforeDestroy() {
                // Prevent emitting console warnings on hot reloading.
                this.ready = false;
              },
              mounted: function mounted() {
                this.container = this.$refs.container;
                this.checkSplitpanesNodes();
                this.redoSplitters();
                this.resetPaneSizes();
                this.$emit("ready");
                this.ready = true;
              },
              render: function render(h) {
                return h(
                  "div",
                  {
                    ref: "container",
                    class: [
                      "splitpanes",
                      "splitpanes--".concat(
                        this.horizontal ? "horizontal" : "vertical"
                      ),
                      {
                        "splitpanes--dragging": this.touch.dragging,
                      },
                    ],
                  },
                  this.$slots.default
                );
              },
            };
            // CONCATENATED MODULE: ./src/components/splitpanes/splitpanes.vue?vue&type=script&lang=js&
            /* harmony default export */ var splitpanes_splitpanesvue_type_script_lang_js_ = splitpanesvue_type_script_lang_js_;
            // EXTERNAL MODULE: ./src/components/splitpanes/splitpanes.vue?vue&type=style&index=0&lang=scss&
            var splitpanesvue_type_style_index_0_lang_scss_ = __webpack_require__(
              "e90c"
            );

            // CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
            /* globals __VUE_SSR_CONTEXT__ */

            // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
            // This module is a runtime utility for cleaner component module output and will
            // be included in the final webpack user bundle.

            function normalizeComponent(
              scriptExports,
              render,
              staticRenderFns,
              functionalTemplate,
              injectStyles,
              scopeId,
              moduleIdentifier /* server only */,
              shadowMode /* vue-cli only */
            ) {
              // Vue.extend constructor export interop
              var options =
                typeof scriptExports === "function"
                  ? scriptExports.options
                  : scriptExports;

              // render functions
              if (render) {
                options.render = render;
                options.staticRenderFns = staticRenderFns;
                options._compiled = true;
              }

              // functional template
              if (functionalTemplate) {
                options.functional = true;
              }

              // scopedId
              if (scopeId) {
                options._scopeId = "data-v-" + scopeId;
              }

              var hook;
              if (moduleIdentifier) {
                // server build
                hook = function (context) {
                  // 2.3 injection
                  context =
                    context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent &&
                      this.parent.$vnode &&
                      this.parent.$vnode.ssrContext); // functional
                  // 2.2 with runInNewContext: true
                  if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                    context = __VUE_SSR_CONTEXT__;
                  }
                  // inject component styles
                  if (injectStyles) {
                    injectStyles.call(this, context);
                  }
                  // register component module identifier for async chunk inferrence
                  if (context && context._registeredComponents) {
                    context._registeredComponents.add(moduleIdentifier);
                  }
                };
                // used by ssr in case component is cached and beforeCreate
                // never gets called
                options._ssrRegister = hook;
              } else if (injectStyles) {
                hook = shadowMode
                  ? function () {
                      injectStyles.call(
                        this,
                        (options.functional ? this.parent : this).$root.$options
                          .shadowRoot
                      );
                    }
                  : injectStyles;
              }

              if (hook) {
                if (options.functional) {
                  // for template-only hot-reload because in that case the render fn doesn't
                  // go through the normalizer
                  options._injectStyles = hook;
                  // register for functional component in vue file
                  var originalRender = options.render;
                  options.render = function renderWithStyleInjection(
                    h,
                    context
                  ) {
                    hook.call(context);
                    return originalRender(h, context);
                  };
                } else {
                  // inject component registration as beforeCreate hook
                  var existing = options.beforeCreate;
                  options.beforeCreate = existing
                    ? [].concat(existing, hook)
                    : [hook];
                }
              }

              return {
                exports: scriptExports,
                options: options,
              };
            }

            // CONCATENATED MODULE: ./src/components/splitpanes/splitpanes.vue
            var render, staticRenderFns;

            /* normalize component */

            var component = normalizeComponent(
              splitpanes_splitpanesvue_type_script_lang_js_,
              render,
              staticRenderFns,
              false,
              null,
              null,
              null
            );

            /* harmony default export */ var splitpanes = component.exports;
            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"dee509c6-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/splitpanes/pane.vue?vue&type=template&id=27ec55ea&
            var panevue_type_template_id_27ec55ea_render = function () {
              var _vm = this;
              var _h = _vm.$createElement;
              var _c = _vm._self._c || _h;
              return _c(
                "div",
                {
                  staticClass: "splitpanes__pane",
                  style: _vm.style,
                  on: {
                    click: function ($event) {
                      return _vm.onPaneClick($event, _vm._uid);
                    },
                  },
                },
                [_vm._t("default")],
                2
              );
            };
            var panevue_type_template_id_27ec55ea_staticRenderFns = [];

            // CONCATENATED MODULE: ./src/components/splitpanes/pane.vue?vue&type=template&id=27ec55ea&

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js
            var es_number_constructor = __webpack_require__("a9e3");

            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/splitpanes/pane.vue?vue&type=script&lang=js&

            //
            //
            //
            //
            //
            //
            /* harmony default export */ var panevue_type_script_lang_js_ = {
              name: "pane",
              inject: [
                "requestUpdate",
                "onPaneAdd",
                "onPaneRemove",
                "onPaneClick",
              ],
              props: {
                size: {
                  type: [Number, String],
                  default: null,
                },
                minSize: {
                  type: [Number, String],
                  default: 0,
                },
                maxSize: {
                  type: [Number, String],
                  default: 100,
                },
              },
              data: function data() {
                return {
                  style: {},
                };
              },
              mounted: function mounted() {
                this.onPaneAdd(this);
              },
              beforeDestroy: function beforeDestroy() {
                this.onPaneRemove(this);
              },
              methods: {
                // Called from the splitpanes component.
                update: function update(style) {
                  this.style = style;
                },
              },
              computed: {
                sizeNumber: function sizeNumber() {
                  return this.size || this.size === 0
                    ? parseFloat(this.size)
                    : null;
                },
                minSizeNumber: function minSizeNumber() {
                  return parseFloat(this.minSize);
                },
                maxSizeNumber: function maxSizeNumber() {
                  return parseFloat(this.maxSize);
                },
              },
              watch: {
                sizeNumber: function sizeNumber(size) {
                  this.requestUpdate({
                    target: this,
                    size: size,
                  });
                },
                minSizeNumber: function minSizeNumber(min) {
                  this.requestUpdate({
                    target: this,
                    min: min,
                  });
                },
                maxSizeNumber: function maxSizeNumber(max) {
                  this.requestUpdate({
                    target: this,
                    max: max,
                  });
                },
              },
            };
            // CONCATENATED MODULE: ./src/components/splitpanes/pane.vue?vue&type=script&lang=js&
            /* harmony default export */ var splitpanes_panevue_type_script_lang_js_ = panevue_type_script_lang_js_;
            // CONCATENATED MODULE: ./src/components/splitpanes/pane.vue

            /* normalize component */

            var pane_component = normalizeComponent(
              splitpanes_panevue_type_script_lang_js_,
              panevue_type_template_id_27ec55ea_render,
              panevue_type_template_id_27ec55ea_staticRenderFns,
              false,
              null,
              null,
              null
            );

            /* harmony default export */ var splitpanes_pane =
              pane_component.exports;
            // CONCATENATED MODULE: ./src/components/splitpanes/index.js

            // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib-no-default.js

            /***/
          },

          /***/ fb6a: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var isObject = __webpack_require__("861d");
            var isArray = __webpack_require__("e8b5");
            var toAbsoluteIndex = __webpack_require__("23cb");
            var toLength = __webpack_require__("50c4");
            var toIndexedObject = __webpack_require__("fc6a");
            var createProperty = __webpack_require__("8418");
            var wellKnownSymbol = __webpack_require__("b622");
            var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");

            var SPECIES = wellKnownSymbol("species");
            var nativeSlice = [].slice;
            var max = Math.max;

            // `Array.prototype.slice` method
            // https://tc39.es/ecma262/#sec-array.prototype.slice
            // fallback for not array-like ES3 strings and DOM objects
            $(
              { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
              {
                slice: function slice(start, end) {
                  var O = toIndexedObject(this);
                  var length = toLength(O.length);
                  var k = toAbsoluteIndex(start, length);
                  var fin = toAbsoluteIndex(
                    end === undefined ? length : end,
                    length
                  );
                  // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                  var Constructor, result, n;
                  if (isArray(O)) {
                    Constructor = O.constructor;
                    // cross-realm fallback
                    if (
                      typeof Constructor == "function" &&
                      (Constructor === Array || isArray(Constructor.prototype))
                    ) {
                      Constructor = undefined;
                    } else if (isObject(Constructor)) {
                      Constructor = Constructor[SPECIES];
                      if (Constructor === null) Constructor = undefined;
                    }
                    if (Constructor === Array || Constructor === undefined) {
                      return nativeSlice.call(O, k, fin);
                    }
                  }
                  result = new (Constructor === undefined
                    ? Array
                    : Constructor)(max(fin - k, 0));
                  for (n = 0; k < fin; k++, n++)
                    if (k in O) createProperty(result, n, O[k]);
                  result.length = n;
                  return result;
                },
              }
            );

            /***/
          },

          /***/ fc6a: /***/ function (module, exports, __webpack_require__) {
            // toObject with fallback for non-array-like ES3 strings
            var IndexedObject = __webpack_require__("44ad");
            var requireObjectCoercible = __webpack_require__("1d80");

            module.exports = function (it) {
              return IndexedObject(requireObjectCoercible(it));
            };

            /***/
          },

          /***/ fdbc: /***/ function (module, exports) {
            // iterable DOM collections
            // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
            module.exports = {
              CSSRuleList: 0,
              CSSStyleDeclaration: 0,
              CSSValueList: 0,
              ClientRectList: 0,
              DOMRectList: 0,
              DOMStringList: 0,
              DOMTokenList: 1,
              DataTransferItemList: 0,
              FileList: 0,
              HTMLAllCollection: 0,
              HTMLCollection: 0,
              HTMLFormElement: 0,
              HTMLSelectElement: 0,
              MediaList: 0,
              MimeTypeArray: 0,
              NamedNodeMap: 0,
              NodeList: 1,
              PaintRequestList: 0,
              Plugin: 0,
              PluginArray: 0,
              SVGLengthList: 0,
              SVGNumberList: 0,
              SVGPathSegList: 0,
              SVGPointList: 0,
              SVGStringList: 0,
              SVGTransformList: 0,
              SourceBufferList: 0,
              StyleSheetList: 0,
              TextTrackCueList: 0,
              TextTrackList: 0,
              TouchList: 0,
            };

            /***/
          },

          /***/ fdbf: /***/ function (module, exports, __webpack_require__) {
            /* eslint-disable es/no-symbol -- required for testing */
            var NATIVE_SYMBOL = __webpack_require__("4930");

            module.exports =
              NATIVE_SYMBOL &&
              !Symbol.sham &&
              typeof Symbol.iterator == "symbol";

            /***/
          },

          /******/
        }
      );
      //# sourceMappingURL=splitpanes.common.js.map

      /***/
    },

    /***/ "5ad2": /***/ function (module, exports) {
      /*
Language: JSON
Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: http://www.json.org
Category: common, protocols
*/

      function json(hljs) {
        const LITERALS = {
          literal: "true false null",
        };
        const ALLOWED_COMMENTS = [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
        ];
        const TYPES = [hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE];
        const VALUE_CONTAINER = {
          end: ",",
          endsWithParent: true,
          excludeEnd: true,
          contains: TYPES,
          keywords: LITERALS,
        };
        const OBJECT = {
          begin: /\{/,
          end: /\}/,
          contains: [
            {
              className: "attr",
              begin: /"/,
              end: /"/,
              contains: [hljs.BACKSLASH_ESCAPE],
              illegal: "\\n",
            },
            hljs.inherit(VALUE_CONTAINER, {
              begin: /:/,
            }),
          ].concat(ALLOWED_COMMENTS),
          illegal: "\\S",
        };
        const ARRAY = {
          begin: "\\[",
          end: "\\]",
          contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
          illegal: "\\S",
        };
        TYPES.push(OBJECT, ARRAY);
        ALLOWED_COMMENTS.forEach(function (rule) {
          TYPES.push(rule);
        });
        return {
          name: "JSON",
          contains: TYPES,
          keywords: LITERALS,
          illegal: "\\S",
        };
      }

      module.exports = json;

      /***/
    },

    /***/ "5e1a": /***/ function (module, exports, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Buffer = __webpack_require__("8707").Buffer;
      var util = __webpack_require__(1);

      function copyBuffer(src, target, offset) {
        src.copy(target, offset);
      }

      module.exports = (function () {
        function BufferList() {
          _classCallCheck(this, BufferList);

          this.head = null;
          this.tail = null;
          this.length = 0;
        }

        BufferList.prototype.push = function push(v) {
          var entry = { data: v, next: null };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        };

        BufferList.prototype.unshift = function unshift(v) {
          var entry = { data: v, next: this.head };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        };

        BufferList.prototype.shift = function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        };

        BufferList.prototype.clear = function clear() {
          this.head = this.tail = null;
          this.length = 0;
        };

        BufferList.prototype.join = function join(s) {
          if (this.length === 0) return "";
          var p = this.head;
          var ret = "" + p.data;
          while ((p = p.next)) {
            ret += s + p.data;
          }
          return ret;
        };

        BufferList.prototype.concat = function concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          if (this.length === 1) return this.head.data;
          var ret = Buffer.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        };

        return BufferList;
      })();

      if (util && util.inspect && util.inspect.custom) {
        module.exports.prototype[util.inspect.custom] = function () {
          var obj = util.inspect({ length: this.length });
          return this.constructor.name + " " + obj;
        };
      }

      /***/
    },

    /***/ "6018": /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__
    ) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (global) {
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "a",
          function () {
            return TippyComponent;
          }
        );
        /* unused harmony export tippy */
        /**!
         * @fileOverview Kickass library to create and place poppers near their reference elements.
         * @version 1.16.1
         * @license
         * Copyright (c) 2016 Federico Zivolo and contributors
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in all
         * copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         * SOFTWARE.
         */
        var isBrowser =
          typeof window !== "undefined" &&
          typeof document !== "undefined" &&
          typeof navigator !== "undefined";

        var timeoutDuration = (function () {
          var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
          for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
            if (
              isBrowser &&
              navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0
            ) {
              return 1;
            }
          }
          return 0;
        })();

        function microtaskDebounce(fn) {
          var called = false;
          return function () {
            if (called) {
              return;
            }
            called = true;
            window.Promise.resolve().then(function () {
              called = false;
              fn();
            });
          };
        }

        function taskDebounce(fn) {
          var scheduled = false;
          return function () {
            if (!scheduled) {
              scheduled = true;
              setTimeout(function () {
                scheduled = false;
                fn();
              }, timeoutDuration);
            }
          };
        }

        var supportsMicroTasks = isBrowser && window.Promise;

        /**
         * Create a debounced version of a method, that's asynchronously deferred
         * but called in the minimum time possible.
         *
         * @method
         * @memberof Popper.Utils
         * @argument {Function} fn
         * @returns {Function}
         */
        var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

        /**
         * Check if the given variable is a function
         * @method
         * @memberof Popper.Utils
         * @argument {Any} functionToCheck - variable to check
         * @returns {Boolean} answer to: is a function?
         */
        function isFunction(functionToCheck) {
          var getType = {};
          return (
            functionToCheck &&
            getType.toString.call(functionToCheck) === "[object Function]"
          );
        }

        /**
         * Get CSS computed property of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Eement} element
         * @argument {String} property
         */
        function getStyleComputedProperty(element, property) {
          if (element.nodeType !== 1) {
            return [];
          }
          // NOTE: 1 DOM access here
          var window = element.ownerDocument.defaultView;
          var css = window.getComputedStyle(element, null);
          return property ? css[property] : css;
        }

        /**
         * Returns the parentNode or the host of the element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} parent
         */
        function getParentNode(element) {
          if (element.nodeName === "HTML") {
            return element;
          }
          return element.parentNode || element.host;
        }

        /**
         * Returns the scrolling parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} scroll parent
         */
        function getScrollParent(element) {
          // Return body, `getScroll` will take care to get the correct `scrollTop` from it
          if (!element) {
            return document.body;
          }

          switch (element.nodeName) {
            case "HTML":
            case "BODY":
              return element.ownerDocument.body;
            case "#document":
              return element.body;
          }

          // Firefox want us to check `-x` and `-y` variations as well

          var _getStyleComputedProp = getStyleComputedProperty(element),
            overflow = _getStyleComputedProp.overflow,
            overflowX = _getStyleComputedProp.overflowX,
            overflowY = _getStyleComputedProp.overflowY;

          if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
          }

          return getScrollParent(getParentNode(element));
        }

        /**
         * Returns the reference node of the reference object, or the reference object itself.
         * @method
         * @memberof Popper.Utils
         * @param {Element|Object} reference - the reference element (the popper will be relative to this)
         * @returns {Element} parent
         */
        function getReferenceNode(reference) {
          return reference && reference.referenceNode
            ? reference.referenceNode
            : reference;
        }

        var isIE11 =
          isBrowser && !!(window.MSInputMethodContext && document.documentMode);
        var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

        /**
         * Determines if the browser is Internet Explorer
         * @method
         * @memberof Popper.Utils
         * @param {Number} version to check
         * @returns {Boolean} isIE
         */
        function isIE(version) {
          if (version === 11) {
            return isIE11;
          }
          if (version === 10) {
            return isIE10;
          }
          return isIE11 || isIE10;
        }

        /**
         * Returns the offset parent of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} offset parent
         */
        function getOffsetParent(element) {
          if (!element) {
            return document.documentElement;
          }

          var noOffsetParent = isIE(10) ? document.body : null;

          // NOTE: 1 DOM access here
          var offsetParent = element.offsetParent || null;
          // Skip hidden elements which don't have an offsetParent
          while (
            offsetParent === noOffsetParent &&
            element.nextElementSibling
          ) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
          }

          var nodeName = offsetParent && offsetParent.nodeName;

          if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
            return element
              ? element.ownerDocument.documentElement
              : document.documentElement;
          }

          // .offsetParent will return the closest TH, TD or TABLE in case
          // no offsetParent is present, I hate this job...
          if (
            ["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 &&
            getStyleComputedProperty(offsetParent, "position") === "static"
          ) {
            return getOffsetParent(offsetParent);
          }

          return offsetParent;
        }

        function isOffsetContainer(element) {
          var nodeName = element.nodeName;

          if (nodeName === "BODY") {
            return false;
          }
          return (
            nodeName === "HTML" ||
            getOffsetParent(element.firstElementChild) === element
          );
        }

        /**
         * Finds the root node (document, shadowDOM root) of the given element
         * @method
         * @memberof Popper.Utils
         * @argument {Element} node
         * @returns {Element} root node
         */
        function getRoot(node) {
          if (node.parentNode !== null) {
            return getRoot(node.parentNode);
          }

          return node;
        }

        /**
         * Finds the offset parent common to the two provided nodes
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element1
         * @argument {Element} element2
         * @returns {Element} common offset parent
         */
        function findCommonOffsetParent(element1, element2) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (
            !element1 ||
            !element1.nodeType ||
            !element2 ||
            !element2.nodeType
          ) {
            return document.documentElement;
          }

          // Here we make sure to give as "start" the element that comes first in the DOM
          var order =
            element1.compareDocumentPosition(element2) &
            Node.DOCUMENT_POSITION_FOLLOWING;
          var start = order ? element1 : element2;
          var end = order ? element2 : element1;

          // Get common ancestor container
          var range = document.createRange();
          range.setStart(start, 0);
          range.setEnd(end, 0);
          var commonAncestorContainer = range.commonAncestorContainer;

          // Both nodes are inside #document

          if (
            (element1 !== commonAncestorContainer &&
              element2 !== commonAncestorContainer) ||
            start.contains(end)
          ) {
            if (isOffsetContainer(commonAncestorContainer)) {
              return commonAncestorContainer;
            }

            return getOffsetParent(commonAncestorContainer);
          }

          // one of the nodes is inside shadowDOM, find which one
          var element1root = getRoot(element1);
          if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
          } else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
          }
        }

        /**
         * Gets the scroll value of the given element in the given side (top and left)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {String} side `top` or `left`
         * @returns {number} amount of scrolled pixels
         */
        function getScroll(element) {
          var side =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "top";

          var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
          var nodeName = element.nodeName;

          if (nodeName === "BODY" || nodeName === "HTML") {
            var html = element.ownerDocument.documentElement;
            var scrollingElement =
              element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
          }

          return element[upperSide];
        }

        /*
         * Sum or subtract the element scroll values (left and top) from a given rect object
         * @method
         * @memberof Popper.Utils
         * @param {Object} rect - Rect object you want to change
         * @param {HTMLElement} element - The element from the function reads the scroll values
         * @param {Boolean} subtract - set to true if you want to subtract the scroll values
         * @return {Object} rect - The modifier rect object
         */
        function includeScroll(rect, element) {
          var subtract =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;

          var scrollTop = getScroll(element, "top");
          var scrollLeft = getScroll(element, "left");
          var modifier = subtract ? -1 : 1;
          rect.top += scrollTop * modifier;
          rect.bottom += scrollTop * modifier;
          rect.left += scrollLeft * modifier;
          rect.right += scrollLeft * modifier;
          return rect;
        }

        /*
         * Helper to detect borders of a given element
         * @method
         * @memberof Popper.Utils
         * @param {CSSStyleDeclaration} styles
         * Result of `getStyleComputedProperty` on the given element
         * @param {String} axis - `x` or `y`
         * @return {number} borders - The borders size of the given axis
         */

        function getBordersSize(styles, axis) {
          var sideA = axis === "x" ? "Left" : "Top";
          var sideB = sideA === "Left" ? "Right" : "Bottom";

          return (
            parseFloat(styles["border" + sideA + "Width"]) +
            parseFloat(styles["border" + sideB + "Width"])
          );
        }

        function getSize(axis, body, html, computedStyle) {
          return Math.max(
            body["offset" + axis],
            body["scroll" + axis],
            html["client" + axis],
            html["offset" + axis],
            html["scroll" + axis],
            isIE(10)
              ? parseInt(html["offset" + axis]) +
                  parseInt(
                    computedStyle[
                      "margin" + (axis === "Height" ? "Top" : "Left")
                    ]
                  ) +
                  parseInt(
                    computedStyle[
                      "margin" + (axis === "Height" ? "Bottom" : "Right")
                    ]
                  )
              : 0
          );
        }

        function getWindowSizes(document) {
          var body = document.body;
          var html = document.documentElement;
          var computedStyle = isIE(10) && getComputedStyle(html);

          return {
            height: getSize("Height", body, html, computedStyle),
            width: getSize("Width", body, html, computedStyle),
          };
        }

        var classCallCheck = function (instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };

        var createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        })();

        var defineProperty = function (obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }

          return obj;
        };

        var _extends =
          Object.assign ||
          function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];

              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }

            return target;
          };

        /**
         * Given element offsets, generate an output similar to getBoundingClientRect
         * @method
         * @memberof Popper.Utils
         * @argument {Object} offsets
         * @returns {Object} ClientRect like output
         */
        function getClientRect(offsets) {
          return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height,
          });
        }

        /**
         * Get bounding client rect of given element
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} element
         * @return {Object} client rect
         */
        function getBoundingClientRect(element) {
          var rect = {};

          // IE10 10 FIX: Please, don't ask, the element isn't
          // considered in DOM in some circumstances...
          // This isn't reproducible in IE10 compatibility mode of IE11
          try {
            if (isIE(10)) {
              rect = element.getBoundingClientRect();
              var scrollTop = getScroll(element, "top");
              var scrollLeft = getScroll(element, "left");
              rect.top += scrollTop;
              rect.left += scrollLeft;
              rect.bottom += scrollTop;
              rect.right += scrollLeft;
            } else {
              rect = element.getBoundingClientRect();
            }
          } catch (e) {}

          var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top,
          };

          // subtract scrollbar size from sizes
          var sizes =
            element.nodeName === "HTML"
              ? getWindowSizes(element.ownerDocument)
              : {};
          var width = sizes.width || element.clientWidth || result.width;
          var height = sizes.height || element.clientHeight || result.height;

          var horizScrollbar = element.offsetWidth - width;
          var vertScrollbar = element.offsetHeight - height;

          // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
          // we make this check conditional for performance reasons
          if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, "x");
            vertScrollbar -= getBordersSize(styles, "y");

            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
          }

          return getClientRect(result);
        }

        function getOffsetRectRelativeToArbitraryNode(children, parent) {
          var fixedPosition =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : false;

          var isIE10 = isIE(10);
          var isHTML = parent.nodeName === "HTML";
          var childrenRect = getBoundingClientRect(children);
          var parentRect = getBoundingClientRect(parent);
          var scrollParent = getScrollParent(children);

          var styles = getStyleComputedProperty(parent);
          var borderTopWidth = parseFloat(styles.borderTopWidth);
          var borderLeftWidth = parseFloat(styles.borderLeftWidth);

          // In cases where the parent is fixed, we must ignore negative scroll in offset calc
          if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
          }
          var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height,
          });
          offsets.marginTop = 0;
          offsets.marginLeft = 0;

          // Subtract margins of documentElement in case it's being used as parent
          // we do this only on HTML because it's the only element that behaves
          // differently when margins are applied to it. The margins are included in
          // the box of the documentElement, in the other cases not.
          if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop);
            var marginLeft = parseFloat(styles.marginLeft);

            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;

            // Attach marginTop and marginLeft because in some circumstances we may need them
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
          }

          if (
            isIE10 && !fixedPosition
              ? parent.contains(scrollParent)
              : parent === scrollParent && scrollParent.nodeName !== "BODY"
          ) {
            offsets = includeScroll(offsets, parent);
          }

          return offsets;
        }

        function getViewportOffsetRectRelativeToArtbitraryNode(element) {
          var excludeScroll =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;

          var html = element.ownerDocument.documentElement;
          var relativeOffset = getOffsetRectRelativeToArbitraryNode(
            element,
            html
          );
          var width = Math.max(html.clientWidth, window.innerWidth || 0);
          var height = Math.max(html.clientHeight, window.innerHeight || 0);

          var scrollTop = !excludeScroll ? getScroll(html) : 0;
          var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;

          var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height,
          };

          return getClientRect(offset);
        }

        /**
         * Check if the given element is fixed or is inside a fixed parent
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @argument {Element} customContainer
         * @returns {Boolean} answer to "isFixed?"
         */
        function isFixed(element) {
          var nodeName = element.nodeName;
          if (nodeName === "BODY" || nodeName === "HTML") {
            return false;
          }
          if (getStyleComputedProperty(element, "position") === "fixed") {
            return true;
          }
          var parentNode = getParentNode(element);
          if (!parentNode) {
            return false;
          }
          return isFixed(parentNode);
        }

        /**
         * Finds the first parent of an element that has a transformed property defined
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Element} first transformed parent or documentElement
         */

        function getFixedPositionOffsetParent(element) {
          // This check is needed to avoid errors in case one of the elements isn't defined for any reason
          if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
          }
          var el = element.parentElement;
          while (el && getStyleComputedProperty(el, "transform") === "none") {
            el = el.parentElement;
          }
          return el || document.documentElement;
        }

        /**
         * Computed the boundaries limits and return them
         * @method
         * @memberof Popper.Utils
         * @param {HTMLElement} popper
         * @param {HTMLElement} reference
         * @param {number} padding
         * @param {HTMLElement} boundariesElement - Element used to define the boundaries
         * @param {Boolean} fixedPosition - Is in fixed position mode
         * @returns {Object} Coordinates of the boundaries
         */
        function getBoundaries(popper, reference, padding, boundariesElement) {
          var fixedPosition =
            arguments.length > 4 && arguments[4] !== undefined
              ? arguments[4]
              : false;

          // NOTE: 1 DOM access here

          var boundaries = { top: 0, left: 0 };
          var offsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference));

          // Handle viewport case
          if (boundariesElement === "viewport") {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(
              offsetParent,
              fixedPosition
            );
          } else {
            // Handle other cases based on DOM element used as boundaries
            var boundariesNode = void 0;
            if (boundariesElement === "scrollParent") {
              boundariesNode = getScrollParent(getParentNode(reference));
              if (boundariesNode.nodeName === "BODY") {
                boundariesNode = popper.ownerDocument.documentElement;
              }
            } else if (boundariesElement === "window") {
              boundariesNode = popper.ownerDocument.documentElement;
            } else {
              boundariesNode = boundariesElement;
            }

            var offsets = getOffsetRectRelativeToArbitraryNode(
              boundariesNode,
              offsetParent,
              fixedPosition
            );

            // In case of HTML, we need a different computation
            if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
              var _getWindowSizes = getWindowSizes(popper.ownerDocument),
                height = _getWindowSizes.height,
                width = _getWindowSizes.width;

              boundaries.top += offsets.top - offsets.marginTop;
              boundaries.bottom = height + offsets.top;
              boundaries.left += offsets.left - offsets.marginLeft;
              boundaries.right = width + offsets.left;
            } else {
              // for all the other DOM elements, this one is good
              boundaries = offsets;
            }
          }

          // Add paddings
          padding = padding || 0;
          var isPaddingNumber = typeof padding === "number";
          boundaries.left += isPaddingNumber ? padding : padding.left || 0;
          boundaries.top += isPaddingNumber ? padding : padding.top || 0;
          boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
          boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

          return boundaries;
        }

        function getArea(_ref) {
          var width = _ref.width,
            height = _ref.height;

          return width * height;
        }

        /**
         * Utility used to transform the `auto` placement to the placement with more
         * available space.
         * @method
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function computeAutoPlacement(
          placement,
          refRect,
          popper,
          reference,
          boundariesElement
        ) {
          var padding =
            arguments.length > 5 && arguments[5] !== undefined
              ? arguments[5]
              : 0;

          if (placement.indexOf("auto") === -1) {
            return placement;
          }

          var boundaries = getBoundaries(
            popper,
            reference,
            padding,
            boundariesElement
          );

          var rects = {
            top: {
              width: boundaries.width,
              height: refRect.top - boundaries.top,
            },
            right: {
              width: boundaries.right - refRect.right,
              height: boundaries.height,
            },
            bottom: {
              width: boundaries.width,
              height: boundaries.bottom - refRect.bottom,
            },
            left: {
              width: refRect.left - boundaries.left,
              height: boundaries.height,
            },
          };

          var sortedAreas = Object.keys(rects)
            .map(function (key) {
              return _extends(
                {
                  key: key,
                },
                rects[key],
                {
                  area: getArea(rects[key]),
                }
              );
            })
            .sort(function (a, b) {
              return b.area - a.area;
            });

          var filteredAreas = sortedAreas.filter(function (_ref2) {
            var width = _ref2.width,
              height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
          });

          var computedPlacement =
            filteredAreas.length > 0
              ? filteredAreas[0].key
              : sortedAreas[0].key;

          var variation = placement.split("-")[1];

          return computedPlacement + (variation ? "-" + variation : "");
        }

        /**
         * Get offsets to the reference element
         * @method
         * @memberof Popper.Utils
         * @param {Object} state
         * @param {Element} popper - the popper element
         * @param {Element} reference - the reference element (the popper will be relative to this)
         * @param {Element} fixedPosition - is in fixed position mode
         * @returns {Object} An object containing the offsets which will be applied to the popper
         */
        function getReferenceOffsets(state, popper, reference) {
          var fixedPosition =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : null;

          var commonOffsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference));
          return getOffsetRectRelativeToArbitraryNode(
            reference,
            commonOffsetParent,
            fixedPosition
          );
        }

        /**
         * Get the outer sizes of the given element (offset size + margins)
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element
         * @returns {Object} object containing width and height properties
         */
        function getOuterSizes(element) {
          var window = element.ownerDocument.defaultView;
          var styles = window.getComputedStyle(element);
          var x =
            parseFloat(styles.marginTop || 0) +
            parseFloat(styles.marginBottom || 0);
          var y =
            parseFloat(styles.marginLeft || 0) +
            parseFloat(styles.marginRight || 0);
          var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x,
          };
          return result;
        }

        /**
         * Get the opposite placement of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement
         * @returns {String} flipped placement
         */
        function getOppositePlacement(placement) {
          var hash = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom",
          };
          return placement.replace(/left|right|bottom|top/g, function (
            matched
          ) {
            return hash[matched];
          });
        }

        /**
         * Get offsets to the popper
         * @method
         * @memberof Popper.Utils
         * @param {Object} position - CSS position the Popper will get applied
         * @param {HTMLElement} popper - the popper element
         * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
         * @param {String} placement - one of the valid placement options
         * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
         */
        function getPopperOffsets(popper, referenceOffsets, placement) {
          placement = placement.split("-")[0];

          // Get popper node sizes
          var popperRect = getOuterSizes(popper);

          // Add position, width and height to our offsets object
          var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height,
          };

          // depending by the popper placement we have to compute its offsets slightly differently
          var isHoriz = ["right", "left"].indexOf(placement) !== -1;
          var mainSide = isHoriz ? "top" : "left";
          var secondarySide = isHoriz ? "left" : "top";
          var measurement = isHoriz ? "height" : "width";
          var secondaryMeasurement = !isHoriz ? "height" : "width";

          popperOffsets[mainSide] =
            referenceOffsets[mainSide] +
            referenceOffsets[measurement] / 2 -
            popperRect[measurement] / 2;
          if (placement === secondarySide) {
            popperOffsets[secondarySide] =
              referenceOffsets[secondarySide] -
              popperRect[secondaryMeasurement];
          } else {
            popperOffsets[secondarySide] =
              referenceOffsets[getOppositePlacement(secondarySide)];
          }

          return popperOffsets;
        }

        /**
         * Mimics the `find` method of Array
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */
        function find(arr, check) {
          // use native find if supported
          if (Array.prototype.find) {
            return arr.find(check);
          }

          // use `filter` to obtain the same behavior of `find`
          return arr.filter(check)[0];
        }

        /**
         * Return the index of the matching object
         * @method
         * @memberof Popper.Utils
         * @argument {Array} arr
         * @argument prop
         * @argument value
         * @returns index or -1
         */
        function findIndex(arr, prop, value) {
          // use native findIndex if supported
          if (Array.prototype.findIndex) {
            return arr.findIndex(function (cur) {
              return cur[prop] === value;
            });
          }

          // use `find` + `indexOf` if `findIndex` isn't supported
          var match = find(arr, function (obj) {
            return obj[prop] === value;
          });
          return arr.indexOf(match);
        }

        /**
         * Loop trough the list of modifiers and run them in order,
         * each of them will then edit the data object.
         * @method
         * @memberof Popper.Utils
         * @param {dataObject} data
         * @param {Array} modifiers
         * @param {String} ends - Optional modifier name used as stopper
         * @returns {dataObject}
         */
        function runModifiers(modifiers, data, ends) {
          var modifiersToRun =
            ends === undefined
              ? modifiers
              : modifiers.slice(0, findIndex(modifiers, "name", ends));

          modifiersToRun.forEach(function (modifier) {
            if (modifier["function"]) {
              // eslint-disable-line dot-notation
              console.warn(
                "`modifier.function` is deprecated, use `modifier.fn`!"
              );
            }
            var fn = modifier["function"] || modifier.fn; // eslint-disable-line dot-notation
            if (modifier.enabled && isFunction(fn)) {
              // Add properties to offsets to make them a complete clientRect object
              // we do this before each modifier to make sure the previous one doesn't
              // mess with these values
              data.offsets.popper = getClientRect(data.offsets.popper);
              data.offsets.reference = getClientRect(data.offsets.reference);

              data = fn(data, modifier);
            }
          });

          return data;
        }

        /**
         * Updates the position of the popper, computing the new offsets and applying
         * the new style.<br />
         * Prefer `scheduleUpdate` over `update` because of performance reasons.
         * @method
         * @memberof Popper
         */
        function update() {
          // if popper is destroyed, don't perform any further update
          if (this.state.isDestroyed) {
            return;
          }

          var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {},
          };

          // compute reference element offsets
          data.offsets.reference = getReferenceOffsets(
            this.state,
            this.popper,
            this.reference,
            this.options.positionFixed
          );

          // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value
          data.placement = computeAutoPlacement(
            this.options.placement,
            data.offsets.reference,
            this.popper,
            this.reference,
            this.options.modifiers.flip.boundariesElement,
            this.options.modifiers.flip.padding
          );

          // store the computed placement inside `originalPlacement`
          data.originalPlacement = data.placement;

          data.positionFixed = this.options.positionFixed;

          // compute the popper offsets
          data.offsets.popper = getPopperOffsets(
            this.popper,
            data.offsets.reference,
            data.placement
          );

          data.offsets.popper.position = this.options.positionFixed
            ? "fixed"
            : "absolute";

          // run the modifiers
          data = runModifiers(this.modifiers, data);

          // the first `update` will call `onCreate` callback
          // the other ones will call `onUpdate` callback
          if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
          } else {
            this.options.onUpdate(data);
          }
        }

        /**
         * Helper used to know if the given modifier is enabled.
         * @method
         * @memberof Popper.Utils
         * @returns {Boolean}
         */
        function isModifierEnabled(modifiers, modifierName) {
          return modifiers.some(function (_ref) {
            var name = _ref.name,
              enabled = _ref.enabled;
            return enabled && name === modifierName;
          });
        }

        /**
         * Get the prefixed supported property name
         * @method
         * @memberof Popper.Utils
         * @argument {String} property (camelCase)
         * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
         */
        function getSupportedPropertyName(property) {
          var prefixes = [false, "ms", "Webkit", "Moz", "O"];
          var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? "" + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== "undefined") {
              return toCheck;
            }
          }
          return null;
        }

        /**
         * Destroys the popper.
         * @method
         * @memberof Popper
         */
        function destroy() {
          this.state.isDestroyed = true;

          // touch DOM only if `applyStyle` modifier is enabled
          if (isModifierEnabled(this.modifiers, "applyStyle")) {
            this.popper.removeAttribute("x-placement");
            this.popper.style.position = "";
            this.popper.style.top = "";
            this.popper.style.left = "";
            this.popper.style.right = "";
            this.popper.style.bottom = "";
            this.popper.style.willChange = "";
            this.popper.style[getSupportedPropertyName("transform")] = "";
          }

          this.disableEventListeners();

          // remove the popper if user explicitly asked for the deletion on destroy
          // do not use `remove` because IE11 doesn't support it
          if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
          }
          return this;
        }

        /**
         * Get the window associated with the element
         * @argument {Element} element
         * @returns {Window}
         */
        function getWindow(element) {
          var ownerDocument = element.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView : window;
        }

        function attachToScrollParents(
          scrollParent,
          event,
          callback,
          scrollParents
        ) {
          var isBody = scrollParent.nodeName === "BODY";
          var target = isBody
            ? scrollParent.ownerDocument.defaultView
            : scrollParent;
          target.addEventListener(event, callback, { passive: true });

          if (!isBody) {
            attachToScrollParents(
              getScrollParent(target.parentNode),
              event,
              callback,
              scrollParents
            );
          }
          scrollParents.push(target);
        }

        /**
         * Setup needed event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */
        function setupEventListeners(reference, options, state, updateBound) {
          // Resize event listener on window
          state.updateBound = updateBound;
          getWindow(reference).addEventListener("resize", state.updateBound, {
            passive: true,
          });

          // Scroll event listener on scroll parents
          var scrollElement = getScrollParent(reference);
          attachToScrollParents(
            scrollElement,
            "scroll",
            state.updateBound,
            state.scrollParents
          );
          state.scrollElement = scrollElement;
          state.eventsEnabled = true;

          return state;
        }

        /**
         * It will add resize/scroll events and start recalculating
         * position of the popper element when they are triggered.
         * @method
         * @memberof Popper
         */
        function enableEventListeners() {
          if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(
              this.reference,
              this.options,
              this.state,
              this.scheduleUpdate
            );
          }
        }

        /**
         * Remove event listeners used to update the popper position
         * @method
         * @memberof Popper.Utils
         * @private
         */
        function removeEventListeners(reference, state) {
          // Remove resize event listener on window
          getWindow(reference).removeEventListener("resize", state.updateBound);

          // Remove scroll event listener on scroll parents
          state.scrollParents.forEach(function (target) {
            target.removeEventListener("scroll", state.updateBound);
          });

          // Reset state
          state.updateBound = null;
          state.scrollParents = [];
          state.scrollElement = null;
          state.eventsEnabled = false;
          return state;
        }

        /**
         * It will remove resize/scroll events and won't recalculate popper position
         * when they are triggered. It also won't trigger `onUpdate` callback anymore,
         * unless you call `update` method manually.
         * @method
         * @memberof Popper
         */
        function disableEventListeners() {
          if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
          }
        }

        /**
         * Tells if a given input is a number
         * @method
         * @memberof Popper.Utils
         * @param {*} input to check
         * @return {Boolean}
         */
        function isNumeric(n) {
          return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
        }

        /**
         * Set the style to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the style to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */
        function setStyles(element, styles) {
          Object.keys(styles).forEach(function (prop) {
            var unit = "";
            // add unit if the value is numeric and is one of the following
            if (
              ["width", "height", "top", "right", "bottom", "left"].indexOf(
                prop
              ) !== -1 &&
              isNumeric(styles[prop])
            ) {
              unit = "px";
            }
            element.style[prop] = styles[prop] + unit;
          });
        }

        /**
         * Set the attributes to the given popper
         * @method
         * @memberof Popper.Utils
         * @argument {Element} element - Element to apply the attributes to
         * @argument {Object} styles
         * Object with a list of properties and values which will be applied to the element
         */
        function setAttributes(element, attributes) {
          Object.keys(attributes).forEach(function (prop) {
            var value = attributes[prop];
            if (value !== false) {
              element.setAttribute(prop, attributes[prop]);
            } else {
              element.removeAttribute(prop);
            }
          });
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} data.styles - List of style properties - values to apply to popper element
         * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The same data object
         */
        function applyStyle(data) {
          // any property present in `data.styles` will be applied to the popper,
          // in this way we can make the 3rd party modifiers add custom styles to it
          // Be aware, modifiers could override the properties defined in the previous
          // lines of this modifier!
          setStyles(data.instance.popper, data.styles);

          // any property present in `data.attributes` will be applied to the popper,
          // they will be set as HTML attributes of the element
          setAttributes(data.instance.popper, data.attributes);

          // if arrowElement is defined and arrowStyles has some properties
          if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
          }

          return data;
        }

        /**
         * Set the x-placement attribute before everything else because it could be used
         * to add margins to the popper margins needs to be calculated to get the
         * correct popper offsets.
         * @method
         * @memberof Popper.modifiers
         * @param {HTMLElement} reference - The reference element used to position the popper
         * @param {HTMLElement} popper - The HTML element used as popper
         * @param {Object} options - Popper.js options
         */
        function applyStyleOnLoad(
          reference,
          popper,
          options,
          modifierOptions,
          state
        ) {
          // compute reference element offsets
          var referenceOffsets = getReferenceOffsets(
            state,
            popper,
            reference,
            options.positionFixed
          );

          // compute auto placement, store placement inside the data object,
          // modifiers will be able to edit `placement` if needed
          // and refer to originalPlacement to know the original value
          var placement = computeAutoPlacement(
            options.placement,
            referenceOffsets,
            popper,
            reference,
            options.modifiers.flip.boundariesElement,
            options.modifiers.flip.padding
          );

          popper.setAttribute("x-placement", placement);

          // Apply `position` to popper before anything else because
          // without the position applied we can't guarantee correct computations
          setStyles(popper, {
            position: options.positionFixed ? "fixed" : "absolute",
          });

          return options;
        }

        /**
         * @function
         * @memberof Popper.Utils
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Boolean} shouldRound - If the offsets should be rounded at all
         * @returns {Object} The popper's position offsets rounded
         *
         * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
         * good as it can be within reason.
         * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
         *
         * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
         * as well on High DPI screens).
         *
         * Firefox prefers no rounding for positioning and does not have blurriness on
         * high DPI screens.
         *
         * Only horizontal placement and left/right values need to be considered.
         */
        function getRoundedOffsets(data, shouldRound) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;
          var round = Math.round,
            floor = Math.floor;

          var noRound = function noRound(v) {
            return v;
          };

          var referenceWidth = round(reference.width);
          var popperWidth = round(popper.width);

          var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
          var isVariation = data.placement.indexOf("-") !== -1;
          var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
          var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

          var horizontalToInteger = !shouldRound
            ? noRound
            : isVertical || isVariation || sameWidthParity
            ? round
            : floor;
          var verticalToInteger = !shouldRound ? noRound : round;

          return {
            left: horizontalToInteger(
              bothOddWidth && !isVariation && shouldRound
                ? popper.left - 1
                : popper.left
            ),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right),
          };
        }

        var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function computeStyle(data, options) {
          var x = options.x,
            y = options.y;
          var popper = data.offsets.popper;

          // Remove this legacy support in Popper.js v2

          var legacyGpuAccelerationOption = find(
            data.instance.modifiers,
            function (modifier) {
              return modifier.name === "applyStyle";
            }
          ).gpuAcceleration;
          if (legacyGpuAccelerationOption !== undefined) {
            console.warn(
              "WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!"
            );
          }
          var gpuAcceleration =
            legacyGpuAccelerationOption !== undefined
              ? legacyGpuAccelerationOption
              : options.gpuAcceleration;

          var offsetParent = getOffsetParent(data.instance.popper);
          var offsetParentRect = getBoundingClientRect(offsetParent);

          // Styles
          var styles = {
            position: popper.position,
          };

          var offsets = getRoundedOffsets(
            data,
            window.devicePixelRatio < 2 || !isFirefox
          );

          var sideA = x === "bottom" ? "top" : "bottom";
          var sideB = y === "right" ? "left" : "right";

          // if gpuAcceleration is set to `true` and transform is supported,
          //  we use `translate3d` to apply the position to the popper we
          // automatically use the supported prefixed version if needed
          var prefixedProperty = getSupportedPropertyName("transform");

          // now, let's make a step back and look at this code closely (wtf?)
          // If the content of the popper grows once it's been positioned, it
          // may happen that the popper gets misplaced because of the new content
          // overflowing its reference element
          // To avoid this problem, we provide two options (x and y), which allow
          // the consumer to define the offset origin.
          // If we position a popper on top of a reference element, we can set
          // `x` to `top` to make the popper grow towards its top instead of
          // its bottom.
          var left = void 0,
            top = void 0;
          if (sideA === "bottom") {
            // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
            // and not the bottom of the html element
            if (offsetParent.nodeName === "HTML") {
              top = -offsetParent.clientHeight + offsets.bottom;
            } else {
              top = -offsetParentRect.height + offsets.bottom;
            }
          } else {
            top = offsets.top;
          }
          if (sideB === "right") {
            if (offsetParent.nodeName === "HTML") {
              left = -offsetParent.clientWidth + offsets.right;
            } else {
              left = -offsetParentRect.width + offsets.right;
            }
          } else {
            left = offsets.left;
          }
          if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] =
              "translate3d(" + left + "px, " + top + "px, 0)";
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = "transform";
          } else {
            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
            var invertTop = sideA === "bottom" ? -1 : 1;
            var invertLeft = sideB === "right" ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ", " + sideB;
          }

          // Attributes
          var attributes = {
            "x-placement": data.placement,
          };

          // Update `data` attributes, styles and arrowStyles
          data.attributes = _extends({}, attributes, data.attributes);
          data.styles = _extends({}, styles, data.styles);
          data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

          return data;
        }

        /**
         * Helper used to know if the given modifier depends from another one.<br />
         * It checks if the needed modifier is listed and enabled.
         * @method
         * @memberof Popper.Utils
         * @param {Array} modifiers - list of modifiers
         * @param {String} requestingName - name of requesting modifier
         * @param {String} requestedName - name of requested modifier
         * @returns {Boolean}
         */
        function isModifierRequired(modifiers, requestingName, requestedName) {
          var requesting = find(modifiers, function (_ref) {
            var name = _ref.name;
            return name === requestingName;
          });

          var isRequired =
            !!requesting &&
            modifiers.some(function (modifier) {
              return (
                modifier.name === requestedName &&
                modifier.enabled &&
                modifier.order < requesting.order
              );
            });

          if (!isRequired) {
            var _requesting = "`" + requestingName + "`";
            var requested = "`" + requestedName + "`";
            console.warn(
              requested +
                " modifier is required by " +
                _requesting +
                " modifier in order to work, be sure to include it before " +
                _requesting +
                "!"
            );
          }
          return isRequired;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function arrow(data, options) {
          var _data$offsets$arrow;

          // arrow depends on keepTogether in order to work
          if (
            !isModifierRequired(
              data.instance.modifiers,
              "arrow",
              "keepTogether"
            )
          ) {
            return data;
          }

          var arrowElement = options.element;

          // if arrowElement is a string, suppose it's a CSS selector
          if (typeof arrowElement === "string") {
            arrowElement = data.instance.popper.querySelector(arrowElement);

            // if arrowElement is not found, don't run the modifier
            if (!arrowElement) {
              return data;
            }
          } else {
            // if the arrowElement isn't a query selector we must check that the
            // provided DOM node is child of its popper node
            if (!data.instance.popper.contains(arrowElement)) {
              console.warn(
                "WARNING: `arrow.element` must be child of its popper element!"
              );
              return data;
            }
          }

          var placement = data.placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var isVertical = ["left", "right"].indexOf(placement) !== -1;

          var len = isVertical ? "height" : "width";
          var sideCapitalized = isVertical ? "Top" : "Left";
          var side = sideCapitalized.toLowerCase();
          var altSide = isVertical ? "left" : "top";
          var opSide = isVertical ? "bottom" : "right";
          var arrowElementSize = getOuterSizes(arrowElement)[len];

          //
          // extends keepTogether behavior making sure the popper and its
          // reference have enough pixels in conjunction
          //

          // top/left side
          if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -=
              popper[side] - (reference[opSide] - arrowElementSize);
          }
          // bottom/right side
          if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] +=
              reference[side] + arrowElementSize - popper[opSide];
          }
          data.offsets.popper = getClientRect(data.offsets.popper);

          // compute center of the popper
          var center =
            reference[side] + reference[len] / 2 - arrowElementSize / 2;

          // Compute the sideValue using the updated popper offsets
          // take popper margin in account because we don't have this info available
          var css = getStyleComputedProperty(data.instance.popper);
          var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
          var popperBorderSide = parseFloat(
            css["border" + sideCapitalized + "Width"]
          );
          var sideValue =
            center -
            data.offsets.popper[side] -
            popperMarginSide -
            popperBorderSide;

          // prevent arrowElement from being placed not contiguously to its popper
          sideValue = Math.max(
            Math.min(popper[len] - arrowElementSize, sideValue),
            0
          );

          data.arrowElement = arrowElement;
          data.offsets.arrow =
            ((_data$offsets$arrow = {}),
            defineProperty(_data$offsets$arrow, side, Math.round(sideValue)),
            defineProperty(_data$offsets$arrow, altSide, ""),
            _data$offsets$arrow);

          return data;
        }

        /**
         * Get the opposite placement variation of the given one
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement variation
         * @returns {String} flipped placement variation
         */
        function getOppositeVariation(variation) {
          if (variation === "end") {
            return "start";
          } else if (variation === "start") {
            return "end";
          }
          return variation;
        }

        /**
         * List of accepted placements to use as values of the `placement` option.<br />
         * Valid placements are:
         * - `auto`
         * - `top`
         * - `right`
         * - `bottom`
         * - `left`
         *
         * Each placement can have a variation from this list:
         * - `-start`
         * - `-end`
         *
         * Variations are interpreted easily if you think of them as the left to right
         * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
         * is right.<br />
         * Vertically (`left` and `right`), `start` is top and `end` is bottom.
         *
         * Some valid examples are:
         * - `top-end` (on top of reference, right aligned)
         * - `right-start` (on right of reference, top aligned)
         * - `bottom` (on bottom, centered)
         * - `auto-end` (on the side with more space available, alignment depends by placement)
         *
         * @static
         * @type {Array}
         * @enum {String}
         * @readonly
         * @method placements
         * @memberof Popper
         */
        var placements = [
          "auto-start",
          "auto",
          "auto-end",
          "top-start",
          "top",
          "top-end",
          "right-start",
          "right",
          "right-end",
          "bottom-end",
          "bottom",
          "bottom-start",
          "left-end",
          "left",
          "left-start",
        ];

        // Get rid of `auto` `auto-start` and `auto-end`
        var validPlacements = placements.slice(3);

        /**
         * Given an initial placement, returns all the subsequent placements
         * clockwise (or counter-clockwise).
         *
         * @method
         * @memberof Popper.Utils
         * @argument {String} placement - A valid placement (it accepts variations)
         * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
         * @returns {Array} placements including their variations
         */
        function clockwise(placement) {
          var counter =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;

          var index = validPlacements.indexOf(placement);
          var arr = validPlacements
            .slice(index + 1)
            .concat(validPlacements.slice(0, index));
          return counter ? arr.reverse() : arr;
        }

        var BEHAVIORS = {
          FLIP: "flip",
          CLOCKWISE: "clockwise",
          COUNTERCLOCKWISE: "counterclockwise",
        };

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function flip(data, options) {
          // if `inner` modifier is enabled, we can't use the `flip` modifier
          if (isModifierEnabled(data.instance.modifiers, "inner")) {
            return data;
          }

          if (data.flipped && data.placement === data.originalPlacement) {
            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
            return data;
          }

          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            options.boundariesElement,
            data.positionFixed
          );

          var placement = data.placement.split("-")[0];
          var placementOpposite = getOppositePlacement(placement);
          var variation = data.placement.split("-")[1] || "";

          var flipOrder = [];

          switch (options.behavior) {
            case BEHAVIORS.FLIP:
              flipOrder = [placement, placementOpposite];
              break;
            case BEHAVIORS.CLOCKWISE:
              flipOrder = clockwise(placement);
              break;
            case BEHAVIORS.COUNTERCLOCKWISE:
              flipOrder = clockwise(placement, true);
              break;
            default:
              flipOrder = options.behavior;
          }

          flipOrder.forEach(function (step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
              return data;
            }

            placement = data.placement.split("-")[0];
            placementOpposite = getOppositePlacement(placement);

            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;

            // using floor because the reference offsets may contain decimals we are not going to consider here
            var floor = Math.floor;
            var overlapsRef =
              (placement === "left" &&
                floor(popperOffsets.right) > floor(refOffsets.left)) ||
              (placement === "right" &&
                floor(popperOffsets.left) < floor(refOffsets.right)) ||
              (placement === "top" &&
                floor(popperOffsets.bottom) > floor(refOffsets.top)) ||
              (placement === "bottom" &&
                floor(popperOffsets.top) < floor(refOffsets.bottom));

            var overflowsLeft =
              floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight =
              floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom =
              floor(popperOffsets.bottom) > floor(boundaries.bottom);

            var overflowsBoundaries =
              (placement === "left" && overflowsLeft) ||
              (placement === "right" && overflowsRight) ||
              (placement === "top" && overflowsTop) ||
              (placement === "bottom" && overflowsBottom);

            // flip the variation if required
            var isVertical = ["top", "bottom"].indexOf(placement) !== -1;

            // flips variation if reference element overflows boundaries
            var flippedVariationByRef =
              !!options.flipVariations &&
              ((isVertical && variation === "start" && overflowsLeft) ||
                (isVertical && variation === "end" && overflowsRight) ||
                (!isVertical && variation === "start" && overflowsTop) ||
                (!isVertical && variation === "end" && overflowsBottom));

            // flips variation if popper content overflows boundaries
            var flippedVariationByContent =
              !!options.flipVariationsByContent &&
              ((isVertical && variation === "start" && overflowsRight) ||
                (isVertical && variation === "end" && overflowsLeft) ||
                (!isVertical && variation === "start" && overflowsBottom) ||
                (!isVertical && variation === "end" && overflowsTop));

            var flippedVariation =
              flippedVariationByRef || flippedVariationByContent;

            if (overlapsRef || overflowsBoundaries || flippedVariation) {
              // this boolean to detect any flip loop
              data.flipped = true;

              if (overlapsRef || overflowsBoundaries) {
                placement = flipOrder[index + 1];
              }

              if (flippedVariation) {
                variation = getOppositeVariation(variation);
              }

              data.placement = placement + (variation ? "-" + variation : "");

              // this object contains `position`, we want to preserve it along with
              // any additional property we may add in the future
              data.offsets.popper = _extends(
                {},
                data.offsets.popper,
                getPopperOffsets(
                  data.instance.popper,
                  data.offsets.reference,
                  data.placement
                )
              );

              data = runModifiers(data.instance.modifiers, data, "flip");
            }
          });
          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function keepTogether(data) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var placement = data.placement.split("-")[0];
          var floor = Math.floor;
          var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
          var side = isVertical ? "right" : "bottom";
          var opSide = isVertical ? "left" : "top";
          var measurement = isVertical ? "width" : "height";

          if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] =
              floor(reference[opSide]) - popper[measurement];
          }
          if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
          }

          return data;
        }

        /**
         * Converts a string containing value + unit into a px value number
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} str - Value + unit string
         * @argument {String} measurement - `height` or `width`
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @returns {Number|String}
         * Value in pixels, or original string if no values were extracted
         */
        function toValue(str, measurement, popperOffsets, referenceOffsets) {
          // separate value from unit
          var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
          var value = +split[1];
          var unit = split[2];

          // If it's not a number it's an operator, I guess
          if (!value) {
            return str;
          }

          if (unit.indexOf("%") === 0) {
            var element = void 0;
            switch (unit) {
              case "%p":
                element = popperOffsets;
                break;
              case "%":
              case "%r":
              default:
                element = referenceOffsets;
            }

            var rect = getClientRect(element);
            return (rect[measurement] / 100) * value;
          } else if (unit === "vh" || unit === "vw") {
            // if is a vh or vw, we calculate the size based on the viewport
            var size = void 0;
            if (unit === "vh") {
              size = Math.max(
                document.documentElement.clientHeight,
                window.innerHeight || 0
              );
            } else {
              size = Math.max(
                document.documentElement.clientWidth,
                window.innerWidth || 0
              );
            }
            return (size / 100) * value;
          } else {
            // if is an explicit pixel unit, we get rid of the unit and keep the value
            // if is an implicit unit, it's px, and we return just the value
            return value;
          }
        }

        /**
         * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
         * @function
         * @memberof {modifiers~offset}
         * @private
         * @argument {String} offset
         * @argument {Object} popperOffsets
         * @argument {Object} referenceOffsets
         * @argument {String} basePlacement
         * @returns {Array} a two cells array with x and y offsets in numbers
         */
        function parseOffset(
          offset,
          popperOffsets,
          referenceOffsets,
          basePlacement
        ) {
          var offsets = [0, 0];

          // Use height if placement is left or right and index is 0 otherwise use width
          // in this way the first offset will use an axis and the second one
          // will use the other one
          var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;

          // Split the offset string to obtain a list of values and operands
          // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
          var fragments = offset.split(/(\+|\-)/).map(function (frag) {
            return frag.trim();
          });

          // Detect if the offset string contains a pair of values or a single one
          // they could be separated by comma or space
          var divider = fragments.indexOf(
            find(fragments, function (frag) {
              return frag.search(/,|\s/) !== -1;
            })
          );

          if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
            console.warn(
              "Offsets separated by white space(s) are deprecated, use a comma (,) instead."
            );
          }

          // If divider is found, we divide the list of values and operands to divide
          // them by ofset X and Y.
          var splitRegex = /\s*,\s*|\s+/;
          var ops =
            divider !== -1
              ? [
                  fragments
                    .slice(0, divider)
                    .concat([fragments[divider].split(splitRegex)[0]]),
                  [fragments[divider].split(splitRegex)[1]].concat(
                    fragments.slice(divider + 1)
                  ),
                ]
              : [fragments];

          // Convert the values with units to absolute pixels to allow our computations
          ops = ops.map(function (op, index) {
            // Most of the units rely on the orientation of the popper
            var measurement = (index === 1 ? !useHeight : useHeight)
              ? "height"
              : "width";
            var mergeWithPrevious = false;
            return (
              op
                // This aggregates any `+` or `-` sign that aren't considered operators
                // e.g.: 10 + +5 => [10, +, +5]
                .reduce(function (a, b) {
                  if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                  } else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                  } else {
                    return a.concat(b);
                  }
                }, [])
                // Here we convert the string values into number values (in px)
                .map(function (str) {
                  return toValue(
                    str,
                    measurement,
                    popperOffsets,
                    referenceOffsets
                  );
                })
            );
          });

          // Loop trough the offsets arrays and execute the operations
          ops.forEach(function (op, index) {
            op.forEach(function (frag, index2) {
              if (isNumeric(frag)) {
                offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
              }
            });
          });
          return offsets;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @argument {Number|String} options.offset=0
         * The offset value as described in the modifier description
         * @returns {Object} The data object, properly modified
         */
        function offset(data, _ref) {
          var offset = _ref.offset;
          var placement = data.placement,
            _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var basePlacement = placement.split("-")[0];

          var offsets = void 0;
          if (isNumeric(+offset)) {
            offsets = [+offset, 0];
          } else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
          }

          if (basePlacement === "left") {
            popper.top += offsets[0];
            popper.left -= offsets[1];
          } else if (basePlacement === "right") {
            popper.top += offsets[0];
            popper.left += offsets[1];
          } else if (basePlacement === "top") {
            popper.left += offsets[0];
            popper.top -= offsets[1];
          } else if (basePlacement === "bottom") {
            popper.left += offsets[0];
            popper.top += offsets[1];
          }

          data.popper = popper;
          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function preventOverflow(data, options) {
          var boundariesElement =
            options.boundariesElement || getOffsetParent(data.instance.popper);

          // If offsetParent is the reference element, we really want to
          // go one step up and use the next offsetParent as reference to
          // avoid to make this modifier completely useless and look like broken
          if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
          }

          // NOTE: DOM access here
          // resets the popper's position so that the document size can be calculated excluding
          // the size of the popper element itself
          var transformProp = getSupportedPropertyName("transform");
          var popperStyles = data.instance.popper.style; // assignment to help minification
          var top = popperStyles.top,
            left = popperStyles.left,
            transform = popperStyles[transformProp];

          popperStyles.top = "";
          popperStyles.left = "";
          popperStyles[transformProp] = "";

          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            boundariesElement,
            data.positionFixed
          );

          // NOTE: DOM access here
          // restores the original style properties after the offsets have been computed
          popperStyles.top = top;
          popperStyles.left = left;
          popperStyles[transformProp] = transform;

          options.boundaries = boundaries;

          var order = options.priority;
          var popper = data.offsets.popper;

          var check = {
            primary: function primary(placement) {
              var value = popper[placement];
              if (
                popper[placement] < boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.max(popper[placement], boundaries[placement]);
              }
              return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
              var mainSide = placement === "right" ? "left" : "top";
              var value = popper[mainSide];
              if (
                popper[placement] > boundaries[placement] &&
                !options.escapeWithReference
              ) {
                value = Math.min(
                  popper[mainSide],
                  boundaries[placement] -
                    (placement === "right" ? popper.width : popper.height)
                );
              }
              return defineProperty({}, mainSide, value);
            },
          };

          order.forEach(function (placement) {
            var side =
              ["left", "top"].indexOf(placement) !== -1
                ? "primary"
                : "secondary";
            popper = _extends({}, popper, check[side](placement));
          });

          data.offsets.popper = popper;

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function shift(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var shiftvariation = placement.split("-")[1];

          // if shift shiftvariation is specified, run the modifier
          if (shiftvariation) {
            var _data$offsets = data.offsets,
              reference = _data$offsets.reference,
              popper = _data$offsets.popper;

            var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
            var side = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";

            var shiftOffsets = {
              start: defineProperty({}, side, reference[side]),
              end: defineProperty(
                {},
                side,
                reference[side] + reference[measurement] - popper[measurement]
              ),
            };

            data.offsets.popper = _extends(
              {},
              popper,
              shiftOffsets[shiftvariation]
            );
          }

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by update method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function hide(data) {
          if (
            !isModifierRequired(
              data.instance.modifiers,
              "hide",
              "preventOverflow"
            )
          ) {
            return data;
          }

          var refRect = data.offsets.reference;
          var bound = find(data.instance.modifiers, function (modifier) {
            return modifier.name === "preventOverflow";
          }).boundaries;

          if (
            refRect.bottom < bound.top ||
            refRect.left > bound.right ||
            refRect.top > bound.bottom ||
            refRect.right < bound.left
          ) {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === true) {
              return data;
            }

            data.hide = true;
            data.attributes["x-out-of-boundaries"] = "";
          } else {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === false) {
              return data;
            }

            data.hide = false;
            data.attributes["x-out-of-boundaries"] = false;
          }

          return data;
        }

        /**
         * @function
         * @memberof Modifiers
         * @argument {Object} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {Object} The data object, properly modified
         */
        function inner(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference;

          var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;

          var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;

          popper[isHoriz ? "left" : "top"] =
            reference[basePlacement] -
            (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);

          data.placement = getOppositePlacement(placement);
          data.offsets.popper = getClientRect(popper);

          return data;
        }

        /**
         * Modifier function, each modifier can have a function of this type assigned
         * to its `fn` property.<br />
         * These functions will be called on each update, this means that you must
         * make sure they are performant enough to avoid performance bottlenecks.
         *
         * @function ModifierFn
         * @argument {dataObject} data - The data object generated by `update` method
         * @argument {Object} options - Modifiers configuration and options
         * @returns {dataObject} The data object, properly modified
         */

        /**
         * Modifiers are plugins used to alter the behavior of your poppers.<br />
         * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
         * needed by the library.
         *
         * Usually you don't want to override the `order`, `fn` and `onLoad` props.
         * All the other properties are configurations that could be tweaked.
         * @namespace modifiers
         */
        var modifiers = {
          /**
           * Modifier used to shift the popper on the start or end of its reference
           * element.<br />
           * It will read the variation of the `placement` property.<br />
           * It can be one either `-end` or `-start`.
           * @memberof modifiers
           * @inner
           */
          shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: shift,
          },

          /**
           * The `offset` modifier can shift your popper on both its axis.
           *
           * It accepts the following units:
           * - `px` or unit-less, interpreted as pixels
           * - `%` or `%r`, percentage relative to the length of the reference element
           * - `%p`, percentage relative to the length of the popper element
           * - `vw`, CSS viewport width unit
           * - `vh`, CSS viewport height unit
           *
           * For length is intended the main axis relative to the placement of the popper.<br />
           * This means that if the placement is `top` or `bottom`, the length will be the
           * `width`. In case of `left` or `right`, it will be the `height`.
           *
           * You can provide a single value (as `Number` or `String`), or a pair of values
           * as `String` divided by a comma or one (or more) white spaces.<br />
           * The latter is a deprecated method because it leads to confusion and will be
           * removed in v2.<br />
           * Additionally, it accepts additions and subtractions between different units.
           * Note that multiplications and divisions aren't supported.
           *
           * Valid examples are:
           * ```
           * 10
           * '10%'
           * '10, 10'
           * '10%, 10'
           * '10 + 10%'
           * '10 - 5vh + 3%'
           * '-10px + 5vh, 5px - 6%'
           * ```
           * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
           * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
           * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
           *
           * @memberof modifiers
           * @inner
           */
          offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: offset,
            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0,
          },

          /**
           * Modifier used to prevent the popper from being positioned outside the boundary.
           *
           * A scenario exists where the reference itself is not within the boundaries.<br />
           * We can say it has "escaped the boundaries" — or just "escaped".<br />
           * In this case we need to decide whether the popper should either:
           *
           * - detach from the reference and remain "trapped" in the boundaries, or
           * - if it should ignore the boundary and "escape with its reference"
           *
           * When `escapeWithReference` is set to`true` and reference is completely
           * outside its boundaries, the popper will overflow (or completely leave)
           * the boundaries in order to remain attached to the edge of the reference.
           *
           * @memberof modifiers
           * @inner
           */
          preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: preventOverflow,
            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ["left", "right", "top", "bottom"],
            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper. This makes sure the popper always has a little padding
             * between the edges of its container
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier. Can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: "scrollParent",
          },

          /**
           * Modifier used to make sure the reference and its popper stay near each other
           * without leaving any gap between the two. Especially useful when the arrow is
           * enabled and you want to ensure that it points to its reference element.
           * It cares only about the first axis. You can still have poppers with margin
           * between the popper and its reference element.
           * @memberof modifiers
           * @inner
           */
          keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: keepTogether,
          },

          /**
           * This modifier is used to move the `arrowElement` of the popper to make
           * sure it is positioned between the reference element and its popper element.
           * It will read the outer size of the `arrowElement` node to detect how many
           * pixels of conjunction are needed.
           *
           * It has no effect if no `arrowElement` is provided.
           * @memberof modifiers
           * @inner
           */
          arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: arrow,
            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: "[x-arrow]",
          },

          /**
           * Modifier used to flip the popper's placement when it starts to overlap its
           * reference element.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           *
           * **NOTE:** this modifier will interrupt the current update cycle and will
           * restart it if it detects the need to flip the placement.
           * @memberof modifiers
           * @inner
           */
          flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: flip,
            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations)
             */
            behavior: "flip",
            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position.
             * The popper will never be placed outside of the defined boundaries
             * (except if `keepTogether` is enabled)
             */
            boundariesElement: "viewport",
            /**
             * @prop {Boolean} flipVariations=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the reference element overlaps its boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariations: false,
            /**
             * @prop {Boolean} flipVariationsByContent=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the popper element overlaps its reference boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariationsByContent: false,
          },

          /**
           * Modifier used to make the popper flow toward the inner of the reference element.
           * By default, when this modifier is disabled, the popper will be placed outside
           * the reference element.
           * @memberof modifiers
           * @inner
           */
          inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,
            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,
            /** @prop {ModifierFn} */
            fn: inner,
          },

          /**
           * Modifier used to hide the popper when its reference element is outside of the
           * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
           * be used to hide with a CSS selector the popper when its reference is
           * out of boundaries.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           * @memberof modifiers
           * @inner
           */
          hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: hide,
          },

          /**
           * Computes the style that will be applied to the popper element to gets
           * properly positioned.
           *
           * Note that this modifier will not touch the DOM, it just prepares the styles
           * so that `applyStyle` modifier can apply it. This separation is useful
           * in case you need to replace `applyStyle` with a custom implementation.
           *
           * This modifier has `850` as `order` value to maintain backward compatibility
           * with previous versions of Popper.js. Expect the modifiers ordering method
           * to change in future major versions of the library.
           *
           * @memberof modifiers
           * @inner
           */
          computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: computeStyle,
            /**
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: true,
            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: "bottom",
            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: "right",
          },

          /**
           * Applies the computed styles to the popper element.
           *
           * All the DOM manipulations are limited to this modifier. This is useful in case
           * you want to integrate Popper.js inside a framework or view library and you
           * want to delegate all the DOM manipulations to it.
           *
           * Note that if you disable this modifier, you must make sure the popper element
           * has its position set to `absolute` before Popper.js can do its work!
           *
           * Just disable this modifier and define your own to achieve the desired effect.
           *
           * @memberof modifiers
           * @inner
           */
          applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: applyStyle,
            /** @prop {Function} */
            onLoad: applyStyleOnLoad,
            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: undefined,
          },
        };

        /**
         * The `dataObject` is an object containing all the information used by Popper.js.
         * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
         * @name dataObject
         * @property {Object} data.instance The Popper.js instance
         * @property {String} data.placement Placement applied to popper
         * @property {String} data.originalPlacement Placement originally defined on init
         * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
         * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
         * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
         * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
         * @property {Object} data.boundaries Offsets of the popper boundaries
         * @property {Object} data.offsets The measurements of popper, reference and arrow elements
         * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
         * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
         */

        /**
         * Default options provided to Popper.js constructor.<br />
         * These can be overridden using the `options` argument of Popper.js.<br />
         * To override an option, simply pass an object with the same
         * structure of the `options` object, as the 3rd argument. For example:
         * ```
         * new Popper(ref, pop, {
         *   modifiers: {
         *     preventOverflow: { enabled: false }
         *   }
         * })
         * ```
         * @type {Object}
         * @static
         * @memberof Popper
         */
        var Defaults = {
          /**
           * Popper's placement.
           * @prop {Popper.placements} placement='bottom'
           */
          placement: "bottom",

          /**
           * Set this to true if you want popper to position it self in 'fixed' mode
           * @prop {Boolean} positionFixed=false
           */
          positionFixed: false,

          /**
           * Whether events (resize, scroll) are initially enabled.
           * @prop {Boolean} eventsEnabled=true
           */
          eventsEnabled: true,

          /**
           * Set to true if you want to automatically remove the popper when
           * you call the `destroy` method.
           * @prop {Boolean} removeOnDestroy=false
           */
          removeOnDestroy: false,

          /**
           * Callback called when the popper is created.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onCreate}
           */
          onCreate: function onCreate() {},

          /**
           * Callback called when the popper is updated. This callback is not called
           * on the initialization/creation of the popper, but only on subsequent
           * updates.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onUpdate}
           */
          onUpdate: function onUpdate() {},

          /**
           * List of modifiers used to modify the offsets before they are applied to the popper.
           * They provide most of the functionalities of Popper.js.
           * @prop {modifiers}
           */
          modifiers: modifiers,
        };

        /**
         * @callback onCreate
         * @param {dataObject} data
         */

        /**
         * @callback onUpdate
         * @param {dataObject} data
         */

        // Utils
        // Methods
        var Popper = (function () {
          /**
           * Creates a new Popper.js instance.
           * @class Popper
           * @param {Element|referenceObject} reference - The reference element used to position the popper
           * @param {Element} popper - The HTML / XML element used as the popper
           * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
           * @return {Object} instance - The generated Popper.js instance
           */
          function Popper(reference, popper) {
            var _this = this;

            var options =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : {};
            classCallCheck(this, Popper);

            this.scheduleUpdate = function () {
              return requestAnimationFrame(_this.update);
            };

            // make update() debounced, so that it only runs at most once-per-tick
            this.update = debounce(this.update.bind(this));

            // with {} we create a new object with the options inside it
            this.options = _extends({}, Popper.Defaults, options);

            // init state
            this.state = {
              isDestroyed: false,
              isCreated: false,
              scrollParents: [],
            };

            // get reference and popper elements (allow jQuery wrappers)
            this.reference =
              reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;

            // Deep merge modifiers options
            this.options.modifiers = {};
            Object.keys(
              _extends({}, Popper.Defaults.modifiers, options.modifiers)
            ).forEach(function (name) {
              _this.options.modifiers[name] = _extends(
                {},
                Popper.Defaults.modifiers[name] || {},
                options.modifiers ? options.modifiers[name] : {}
              );
            });

            // Refactoring modifiers' list (Object => Array)
            this.modifiers = Object.keys(this.options.modifiers)
              .map(function (name) {
                return _extends(
                  {
                    name: name,
                  },
                  _this.options.modifiers[name]
                );
              })
              // sort the modifiers by order
              .sort(function (a, b) {
                return a.order - b.order;
              });

            // modifiers have the ability to execute arbitrary code when Popper.js get inited
            // such code is executed in the same order of its modifier
            // they could add new properties to their options configuration
            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
            this.modifiers.forEach(function (modifierOptions) {
              if (
                modifierOptions.enabled &&
                isFunction(modifierOptions.onLoad)
              ) {
                modifierOptions.onLoad(
                  _this.reference,
                  _this.popper,
                  _this.options,
                  modifierOptions,
                  _this.state
                );
              }
            });

            // fire the first update to position the popper in the right place
            this.update();

            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
              // setup event listeners, they will take care of update the position in specific situations
              this.enableEventListeners();
            }

            this.state.eventsEnabled = eventsEnabled;
          }

          // We can't use class properties because they don't get listed in the
          // class prototype and break stuff like Sinon stubs

          createClass(Popper, [
            {
              key: "update",
              value: function update$$1() {
                return update.call(this);
              },
            },
            {
              key: "destroy",
              value: function destroy$$1() {
                return destroy.call(this);
              },
            },
            {
              key: "enableEventListeners",
              value: function enableEventListeners$$1() {
                return enableEventListeners.call(this);
              },
            },
            {
              key: "disableEventListeners",
              value: function disableEventListeners$$1() {
                return disableEventListeners.call(this);
              },

              /**
               * Schedules an update. It will run on the next UI update available.
               * @method scheduleUpdate
               * @memberof Popper
               */

              /**
               * Collection of utilities useful when writing custom modifiers.
               * Starting from version 1.7, this method is available only if you
               * include `popper-utils.js` before `popper.js`.
               *
               * **DEPRECATION**: This way to access PopperUtils is deprecated
               * and will be removed in v2! Use the PopperUtils module directly instead.
               * Due to the high instability of the methods contained in Utils, we can't
               * guarantee them to follow semver. Use them at your own risk!
               * @static
               * @private
               * @type {Object}
               * @deprecated since version 1.8
               * @member Utils
               * @memberof Popper
               */
            },
          ]);
          return Popper;
        })();

        /**
         * The `referenceObject` is an object that provides an interface compatible with Popper.js
         * and lets you use it as replacement of a real DOM node.<br />
         * You can use this method to position a popper relatively to a set of coordinates
         * in case you don't have a DOM node to use as reference.
         *
         * ```
         * new Popper(referenceObject, popperNode);
         * ```
         *
         * NB: This feature isn't supported in Internet Explorer 10.
         * @name referenceObject
         * @property {Function} data.getBoundingClientRect
         * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
         * @property {number} data.clientWidth
         * An ES6 getter that will return the width of the virtual reference element.
         * @property {number} data.clientHeight
         * An ES6 getter that will return the height of the virtual reference element.
         */

        Popper.Utils = (typeof window !== "undefined"
          ? window
          : global
        ).PopperUtils;
        Popper.placements = placements;
        Popper.Defaults = Defaults;

        /**!
         * tippy.js v4.3.5
         * (c) 2017-2019 atomiks
         * MIT License
         */

        var css =
          '.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}';

        function _extends$1() {
          _extends$1 =
            Object.assign ||
            function (target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }

              return target;
            };

          return _extends$1.apply(this, arguments);
        }

        var version = "4.3.5";

        var isBrowser$1 =
          typeof window !== "undefined" && typeof document !== "undefined";
        var ua = isBrowser$1 ? navigator.userAgent : "";
        var isIE$1 = /MSIE |Trident\//.test(ua);
        var isUCBrowser = /UCBrowser\//.test(ua);
        var isIOS =
          isBrowser$1 &&
          /iPhone|iPad|iPod/.test(navigator.platform) &&
          !window.MSStream;

        var defaultProps = {
          a11y: true,
          allowHTML: true,
          animateFill: true,
          animation: "shift-away",
          appendTo: function appendTo() {
            return document.body;
          },
          aria: "describedby",
          arrow: false,
          arrowType: "sharp",
          boundary: "scrollParent",
          content: "",
          delay: 0,
          distance: 10,
          duration: [325, 275],
          flip: true,
          flipBehavior: "flip",
          flipOnUpdate: false,
          followCursor: false,
          hideOnClick: true,
          ignoreAttributes: false,
          inertia: false,
          interactive: false,
          interactiveBorder: 2,
          interactiveDebounce: 0,
          lazy: true,
          maxWidth: 350,
          multiple: false,
          offset: 0,
          onHidden: function onHidden() {},
          onHide: function onHide() {},
          onMount: function onMount() {},
          onShow: function onShow() {},
          onShown: function onShown() {},
          onTrigger: function onTrigger() {},
          placement: "top",
          popperOptions: {},
          role: "tooltip",
          showOnInit: false,
          size: "regular",
          sticky: false,
          target: "",
          theme: "dark",
          touch: true,
          touchHold: false,
          trigger: "mouseenter focus",
          triggerTarget: null,
          updateDuration: 0,
          wait: null,
          zIndex: 9999,
          /**
           * If the set() method encounters one of these, the popperInstance must be
           * recreated
           */
        };
        var POPPER_INSTANCE_DEPENDENCIES = [
          "arrow",
          "arrowType",
          "boundary",
          "distance",
          "flip",
          "flipBehavior",
          "flipOnUpdate",
          "offset",
          "placement",
          "popperOptions",
        ];

        var elementProto = isBrowser$1 ? Element.prototype : {};
        var matches =
          elementProto.matches ||
          elementProto.matchesSelector ||
          elementProto.webkitMatchesSelector ||
          elementProto.mozMatchesSelector ||
          elementProto.msMatchesSelector;
        /**
         * Ponyfill for Array.from - converts iterable values to an array
         */

        function arrayFrom(value) {
          return [].slice.call(value);
        }
        /**
         * Ponyfill for Element.prototype.closest
         */

        function closest(element, selector) {
          return closestCallback(element, function (el) {
            return matches.call(el, selector);
          });
        }
        /**
         * Works like Element.prototype.closest, but uses a callback instead
         */

        function closestCallback(element, callback) {
          while (element) {
            if (callback(element)) {
              return element;
            }

            element = element.parentElement;
          }

          return null;
        }

        // Passive event listener config
        var PASSIVE = {
          passive: true, // Popper `preventOverflow` padding
        };
        var PADDING = 4; // Popper attributes
        // In Popper v2 these will be `data-*` instead of `x-*` to adhere to HTML5 spec

        var PLACEMENT_ATTRIBUTE = "x-placement";
        var OUT_OF_BOUNDARIES_ATTRIBUTE = "x-out-of-boundaries"; // Classes

        var IOS_CLASS = "tippy-iOS";
        var ACTIVE_CLASS = "tippy-active";
        var POPPER_CLASS = "tippy-popper";
        var TOOLTIP_CLASS = "tippy-tooltip";
        var CONTENT_CLASS = "tippy-content";
        var BACKDROP_CLASS = "tippy-backdrop";
        var ARROW_CLASS = "tippy-arrow";
        var ROUND_ARROW_CLASS = "tippy-roundarrow"; // Selectors

        var POPPER_SELECTOR = ".".concat(POPPER_CLASS);
        var TOOLTIP_SELECTOR = ".".concat(TOOLTIP_CLASS);
        var CONTENT_SELECTOR = ".".concat(CONTENT_CLASS);
        var BACKDROP_SELECTOR = ".".concat(BACKDROP_CLASS);
        var ARROW_SELECTOR = ".".concat(ARROW_CLASS);
        var ROUND_ARROW_SELECTOR = ".".concat(ROUND_ARROW_CLASS);

        var isUsingTouch = false;
        function onDocumentTouch() {
          if (isUsingTouch) {
            return;
          }

          isUsingTouch = true;

          if (isIOS) {
            document.body.classList.add(IOS_CLASS);
          }

          if (window.performance) {
            document.addEventListener("mousemove", onDocumentMouseMove);
          }
        }
        var lastMouseMoveTime = 0;
        function onDocumentMouseMove() {
          var now = performance.now(); // Chrome 60+ is 1 mousemove per animation frame, use 20ms time difference

          if (now - lastMouseMoveTime < 20) {
            isUsingTouch = false;
            document.removeEventListener("mousemove", onDocumentMouseMove);

            if (!isIOS) {
              document.body.classList.remove(IOS_CLASS);
            }
          }

          lastMouseMoveTime = now;
        }
        function onWindowBlur() {
          var _document = document,
            activeElement = _document.activeElement;

          if (activeElement && activeElement.blur && activeElement._tippy) {
            activeElement.blur();
          }
        }
        /**
         * Adds the needed global event listeners
         */

        function bindGlobalEventListeners() {
          document.addEventListener("touchstart", onDocumentTouch, PASSIVE);
          window.addEventListener("blur", onWindowBlur);
        }

        var keys = Object.keys(defaultProps);
        /**
         * Returns an object of optional props from data-tippy-* attributes
         */

        function getDataAttributeOptions(reference) {
          return keys.reduce(function (acc, key) {
            var valueAsString = (
              reference.getAttribute("data-tippy-".concat(key)) || ""
            ).trim();

            if (!valueAsString) {
              return acc;
            }

            if (key === "content") {
              acc[key] = valueAsString;
            } else {
              try {
                acc[key] = JSON.parse(valueAsString);
              } catch (e) {
                acc[key] = valueAsString;
              }
            }

            return acc;
          }, {});
        }
        /**
         * Polyfills the virtual reference (plain object) with Element.prototype props
         * Mutating because DOM elements are mutated, adds `_tippy` property
         */

        function polyfillElementPrototypeProperties(virtualReference) {
          var polyfills = {
            isVirtual: true,
            attributes: virtualReference.attributes || {},
            contains: function contains() {},
            setAttribute: function setAttribute(key, value) {
              virtualReference.attributes[key] = value;
            },
            getAttribute: function getAttribute(key) {
              return virtualReference.attributes[key];
            },
            removeAttribute: function removeAttribute(key) {
              delete virtualReference.attributes[key];
            },
            hasAttribute: function hasAttribute(key) {
              return key in virtualReference.attributes;
            },
            addEventListener: function addEventListener() {},
            removeEventListener: function removeEventListener() {},
            classList: {
              classNames: {},
              add: function add(key) {
                virtualReference.classList.classNames[key] = true;
              },
              remove: function remove(key) {
                delete virtualReference.classList.classNames[key];
              },
              contains: function contains(key) {
                return key in virtualReference.classList.classNames;
              },
            },
          };

          for (var key in polyfills) {
            virtualReference[key] = polyfills[key];
          }
        }

        /**
         * Determines if a value is a "bare" virtual element (before mutations done
         * by `polyfillElementPrototypeProperties()`). JSDOM elements show up as
         * [object Object], we can check if the value is "element-like" if it has
         * `addEventListener`
         */

        function isBareVirtualElement(value) {
          return (
            {}.toString.call(value) === "[object Object]" &&
            !value.addEventListener
          );
        }
        /**
         * Determines if the value is a reference element
         */

        function isReferenceElement(value) {
          return !!value._tippy && !matches.call(value, POPPER_SELECTOR);
        }
        /**
         * Safe .hasOwnProperty check, for prototype-less objects
         */

        function hasOwnProperty(obj, key) {
          return {}.hasOwnProperty.call(obj, key);
        }
        /**
         * Returns an array of elements based on the value
         */

        function getArrayOfElements(value) {
          if (isSingular(value)) {
            // TODO: VirtualReference is not compatible to type Element
            return [value];
          }

          if (value instanceof NodeList) {
            return arrayFrom(value);
          }

          if (Array.isArray(value)) {
            return value;
          }

          try {
            return arrayFrom(document.querySelectorAll(value));
          } catch (e) {
            return [];
          }
        }
        /**
         * Returns a value at a given index depending on if it's an array or number
         */

        function getValue(value, index, defaultValue) {
          if (Array.isArray(value)) {
            var v = value[index];
            return v == null ? defaultValue : v;
          }

          return value;
        }
        /**
         * Debounce utility. To avoid bloating bundle size, we're only passing 1
         * argument here, a more generic function would pass all arguments. Only
         * `onMouseMove` uses this which takes the event object for now.
         */

        function debounce$1(fn, ms) {
          // Avoid wrapping in `setTimeout` if ms is 0 anyway
          if (ms === 0) {
            return fn;
          }

          var timeout;
          return function (arg) {
            clearTimeout(timeout);
            timeout = setTimeout(function () {
              fn(arg);
            }, ms);
          };
        }
        /**
         * Prevents errors from being thrown while accessing nested modifier objects
         * in `popperOptions`
         */

        function getModifier(obj, key) {
          return obj && obj.modifiers && obj.modifiers[key];
        }
        /**
         * Determines if an array or string includes a value
         */

        function includes(a, b) {
          return a.indexOf(b) > -1;
        }
        /**
         * Determines if the value is a real element
         */

        function isRealElement(value) {
          return value instanceof Element;
        }
        /**
         * Determines if the value is singular-like
         */

        function isSingular(value) {
          return (
            !!(value && hasOwnProperty(value, "isVirtual")) ||
            isRealElement(value)
          );
        }
        /**
         * Firefox extensions don't allow setting .innerHTML directly, this will trick it
         */

        function innerHTML() {
          return "innerHTML";
        }
        /**
         * Evaluates a function if one, or returns the value
         */

        function invokeWithArgsOrReturn(value, args) {
          return typeof value === "function" ? value.apply(null, args) : value;
        }
        /**
         * Sets a popperInstance `flip` modifier's enabled state
         */

        function setFlipModifierEnabled(modifiers, value) {
          modifiers.filter(function (m) {
            return m.name === "flip";
          })[0].enabled = value;
        }
        /**
         * Determines if an element can receive focus
         * Always returns true for virtual objects
         */

        function canReceiveFocus(element) {
          return isRealElement(element)
            ? matches.call(
                element,
                "a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]"
              ) && !element.hasAttribute("disabled")
            : true;
        }
        /**
         * Returns a new `div` element
         */

        function div() {
          return document.createElement("div");
        }
        /**
         * Applies a transition duration to a list of elements
         */

        function setTransitionDuration(els, value) {
          els.forEach(function (el) {
            if (el) {
              el.style.transitionDuration = "".concat(value, "ms");
            }
          });
        }
        /**
         * Sets the visibility state to elements so they can begin to transition
         */

        function setVisibilityState(els, state) {
          els.forEach(function (el) {
            if (el) {
              el.setAttribute("data-state", state);
            }
          });
        }
        /**
         * Evaluates the props object by merging data attributes and
         * disabling conflicting options where necessary
         */

        function evaluateProps(reference, props) {
          var out = _extends$1(
            {},
            props,
            {
              content: invokeWithArgsOrReturn(props.content, [reference]),
            },
            props.ignoreAttributes ? {} : getDataAttributeOptions(reference)
          );

          if (out.arrow || isUCBrowser) {
            out.animateFill = false;
          }

          return out;
        }
        /**
         * Validates an object of options with the valid default props object
         */

        function validateOptions(options, defaultProps) {
          Object.keys(options).forEach(function (option) {
            if (!hasOwnProperty(defaultProps, option)) {
              throw new Error(
                "[tippy]: `".concat(option, "` is not a valid option")
              );
            }
          });
        }

        /**
         * Sets the innerHTML of an element
         */

        function setInnerHTML(element, html) {
          element[innerHTML()] = isRealElement(html) ? html[innerHTML()] : html;
        }
        /**
         * Sets the content of a tooltip
         */

        function setContent(contentEl, props) {
          if (isRealElement(props.content)) {
            setInnerHTML(contentEl, "");
            contentEl.appendChild(props.content);
          } else if (typeof props.content !== "function") {
            var key = props.allowHTML ? "innerHTML" : "textContent";
            contentEl[key] = props.content;
          }
        }
        /**
         * Returns the child elements of a popper element
         */

        function getChildren(popper) {
          return {
            tooltip: popper.querySelector(TOOLTIP_SELECTOR),
            backdrop: popper.querySelector(BACKDROP_SELECTOR),
            content: popper.querySelector(CONTENT_SELECTOR),
            arrow:
              popper.querySelector(ARROW_SELECTOR) ||
              popper.querySelector(ROUND_ARROW_SELECTOR),
          };
        }
        /**
         * Adds `data-inertia` attribute
         */

        function addInertia(tooltip) {
          tooltip.setAttribute("data-inertia", "");
        }
        /**
         * Removes `data-inertia` attribute
         */

        function removeInertia(tooltip) {
          tooltip.removeAttribute("data-inertia");
        }
        /**
         * Creates an arrow element and returns it
         */

        function createArrowElement(arrowType) {
          var arrow = div();

          if (arrowType === "round") {
            arrow.className = ROUND_ARROW_CLASS;
            setInnerHTML(
              arrow,
              '<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>'
            );
          } else {
            arrow.className = ARROW_CLASS;
          }

          return arrow;
        }
        /**
         * Creates a backdrop element and returns it
         */

        function createBackdropElement() {
          var backdrop = div();
          backdrop.className = BACKDROP_CLASS;
          backdrop.setAttribute("data-state", "hidden");
          return backdrop;
        }
        /**
         * Adds interactive-related attributes
         */

        function addInteractive(popper, tooltip) {
          popper.setAttribute("tabindex", "-1");
          tooltip.setAttribute("data-interactive", "");
        }
        /**
         * Removes interactive-related attributes
         */

        function removeInteractive(popper, tooltip) {
          popper.removeAttribute("tabindex");
          tooltip.removeAttribute("data-interactive");
        }
        /**
         * Add/remove transitionend listener from tooltip
         */

        function updateTransitionEndListener(tooltip, action, listener) {
          // UC Browser hasn't adopted the `transitionend` event despite supporting
          // unprefixed transitions...
          var eventName =
            isUCBrowser && document.body.style.webkitTransition !== undefined
              ? "webkitTransitionEnd"
              : "transitionend";
          tooltip[action + "EventListener"](eventName, listener);
        }
        /**
         * Returns the popper's placement, ignoring shifting (top-start, etc)
         */

        function getBasicPlacement(popper) {
          var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
          return fullPlacement ? fullPlacement.split("-")[0] : "";
        }
        /**
         * Triggers reflow
         */

        function reflow(popper) {
          void popper.offsetHeight;
        }
        /**
         * Adds/removes theme from tooltip's classList
         */

        function updateTheme(tooltip, action, theme) {
          theme.split(" ").forEach(function (themeName) {
            tooltip.classList[action](themeName + "-theme");
          });
        }
        /**
         * Constructs the popper element and returns it
         */

        function createPopperElement(id, props) {
          var popper = div();
          popper.className = POPPER_CLASS;
          popper.id = "tippy-".concat(id);
          popper.style.zIndex = "" + props.zIndex;
          popper.style.position = "absolute";
          popper.style.top = "0";
          popper.style.left = "0";

          if (props.role) {
            popper.setAttribute("role", props.role);
          }

          var tooltip = div();
          tooltip.className = TOOLTIP_CLASS;
          tooltip.style.maxWidth =
            props.maxWidth + (typeof props.maxWidth === "number" ? "px" : "");
          tooltip.setAttribute("data-size", props.size);
          tooltip.setAttribute("data-animation", props.animation);
          tooltip.setAttribute("data-state", "hidden");
          updateTheme(tooltip, "add", props.theme);
          var content = div();
          content.className = CONTENT_CLASS;
          content.setAttribute("data-state", "hidden");

          if (props.interactive) {
            addInteractive(popper, tooltip);
          }

          if (props.arrow) {
            tooltip.appendChild(createArrowElement(props.arrowType));
          }

          if (props.animateFill) {
            tooltip.appendChild(createBackdropElement());
            tooltip.setAttribute("data-animatefill", "");
          }

          if (props.inertia) {
            addInertia(tooltip);
          }

          setContent(content, props);
          tooltip.appendChild(content);
          popper.appendChild(tooltip);
          return popper;
        }
        /**
         * Updates the popper element based on the new props
         */

        function updatePopperElement(popper, prevProps, nextProps) {
          var _getChildren = getChildren(popper),
            tooltip = _getChildren.tooltip,
            content = _getChildren.content,
            backdrop = _getChildren.backdrop,
            arrow = _getChildren.arrow;

          popper.style.zIndex = "" + nextProps.zIndex;
          tooltip.setAttribute("data-size", nextProps.size);
          tooltip.setAttribute("data-animation", nextProps.animation);
          tooltip.style.maxWidth =
            nextProps.maxWidth +
            (typeof nextProps.maxWidth === "number" ? "px" : "");

          if (nextProps.role) {
            popper.setAttribute("role", nextProps.role);
          } else {
            popper.removeAttribute("role");
          }

          if (prevProps.content !== nextProps.content) {
            setContent(content, nextProps);
          } // animateFill

          if (!prevProps.animateFill && nextProps.animateFill) {
            tooltip.appendChild(createBackdropElement());
            tooltip.setAttribute("data-animatefill", "");
          } else if (prevProps.animateFill && !nextProps.animateFill) {
            tooltip.removeChild(backdrop);
            tooltip.removeAttribute("data-animatefill");
          } // arrow

          if (!prevProps.arrow && nextProps.arrow) {
            tooltip.appendChild(createArrowElement(nextProps.arrowType));
          } else if (prevProps.arrow && !nextProps.arrow) {
            tooltip.removeChild(arrow);
          } // arrowType

          if (
            prevProps.arrow &&
            nextProps.arrow &&
            prevProps.arrowType !== nextProps.arrowType
          ) {
            tooltip.replaceChild(
              createArrowElement(nextProps.arrowType),
              arrow
            );
          } // interactive

          if (!prevProps.interactive && nextProps.interactive) {
            addInteractive(popper, tooltip);
          } else if (prevProps.interactive && !nextProps.interactive) {
            removeInteractive(popper, tooltip);
          } // inertia

          if (!prevProps.inertia && nextProps.inertia) {
            addInertia(tooltip);
          } else if (prevProps.inertia && !nextProps.inertia) {
            removeInertia(tooltip);
          } // theme

          if (prevProps.theme !== nextProps.theme) {
            updateTheme(tooltip, "remove", prevProps.theme);
            updateTheme(tooltip, "add", nextProps.theme);
          }
        }
        /**
         * Hides all visible poppers on the document
         */

        function hideAll() {
          var _ref =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            excludedReferenceOrInstance = _ref.exclude,
            duration = _ref.duration;

          arrayFrom(document.querySelectorAll(POPPER_SELECTOR)).forEach(
            function (popper) {
              var instance = popper._tippy;

              if (instance) {
                var isExcluded = false;

                if (excludedReferenceOrInstance) {
                  isExcluded = isReferenceElement(excludedReferenceOrInstance)
                    ? instance.reference === excludedReferenceOrInstance
                    : popper === excludedReferenceOrInstance.popper;
                }

                if (!isExcluded) {
                  instance.hide(duration);
                }
              }
            }
          );
        }
        /**
         * Determines if the mouse cursor is outside of the popper's interactive border
         * region
         */

        function isCursorOutsideInteractiveBorder(
          popperPlacement,
          popperRect,
          event,
          props
        ) {
          if (!popperPlacement) {
            return true;
          }

          var x = event.clientX,
            y = event.clientY;
          var interactiveBorder = props.interactiveBorder,
            distance = props.distance;
          var exceedsTop =
            popperRect.top - y >
            (popperPlacement === "top"
              ? interactiveBorder + distance
              : interactiveBorder);
          var exceedsBottom =
            y - popperRect.bottom >
            (popperPlacement === "bottom"
              ? interactiveBorder + distance
              : interactiveBorder);
          var exceedsLeft =
            popperRect.left - x >
            (popperPlacement === "left"
              ? interactiveBorder + distance
              : interactiveBorder);
          var exceedsRight =
            x - popperRect.right >
            (popperPlacement === "right"
              ? interactiveBorder + distance
              : interactiveBorder);
          return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
        }
        /**
         * Returns the distance offset, taking into account the default offset due to
         * the transform: translate() rule (10px) in CSS
         */

        function getOffsetDistanceInPx(distance) {
          return -(distance - 10) + "px";
        }

        var idCounter = 1; // Workaround for IE11's lack of new MouseEvent constructor

        var mouseMoveListeners = [];
        /**
         * Creates and returns a Tippy object. We're using a closure pattern instead of
         * a class so that the exposed object API is clean without private members
         * prefixed with `_`.
         */

        function createTippy(reference, collectionProps) {
          var props = evaluateProps(reference, collectionProps); // If the reference shouldn't have multiple tippys, return null early

          if (!props.multiple && reference._tippy) {
            return null;
          }
          /* ======================= 🔒 Private members 🔒 ======================= */

          var lastTriggerEventType;
          var lastMouseMoveEvent;
          var showTimeoutId;
          var hideTimeoutId;
          var scheduleHideAnimationFrameId;
          var isScheduledToShow = false;
          var isBeingDestroyed = false;
          var previousPlacement;
          var wasVisibleDuringPreviousUpdate = false;
          var hasMountCallbackRun = false;
          var currentMountCallback;
          var currentTransitionEndListener;
          var listeners = [];
          var currentComputedPadding;
          var debouncedOnMouseMove = debounce$1(
            onMouseMove,
            props.interactiveDebounce
          );
          /* ======================= 🔑 Public members 🔑 ======================= */

          var id = idCounter++;
          var popper = createPopperElement(id, props);
          var popperChildren = getChildren(popper);
          var popperInstance = null;
          var state = {
            // Is the instance currently enabled?
            isEnabled: true,
            // Is the tippy currently showing and not transitioning out?
            isVisible: false,
            // Has the instance been destroyed?
            isDestroyed: false,
            // Is the tippy currently mounted to the DOM?
            isMounted: false,
            // Has the tippy finished transitioning in?
            isShown: false,
          };
          var instance = {
            // properties
            id: id,
            reference: reference,
            popper: popper,
            popperChildren: popperChildren,
            popperInstance: popperInstance,
            props: props,
            state: state,
            // methods
            clearDelayTimeouts: clearDelayTimeouts,
            set: set,
            setContent: setContent,
            show: show,
            hide: hide,
            enable: enable,
            disable: disable,
            destroy: destroy,
            /* ==================== Initial instance mutations =================== */
          };
          reference._tippy = instance;
          popper._tippy = instance;
          addTriggersToReference();

          if (!props.lazy) {
            createPopperInstance();
          }

          if (props.showOnInit) {
            scheduleShow();
          } // Ensure the event listeners target can receive focus

          if (
            props.a11y &&
            !props.target &&
            !canReceiveFocus(getEventListenersTarget())
          ) {
            getEventListenersTarget().setAttribute("tabindex", "0");
          } // Prevent a tippy with a delay from hiding if the cursor left then returned
          // before it started hiding

          popper.addEventListener("mouseenter", function (event) {
            if (
              instance.props.interactive &&
              instance.state.isVisible &&
              lastTriggerEventType === "mouseenter"
            ) {
              // We don't want props.onTrigger() to be called here, since the `event`
              // object is not related to the reference element
              scheduleShow(event, true);
            }
          });
          popper.addEventListener("mouseleave", function () {
            if (
              instance.props.interactive &&
              lastTriggerEventType === "mouseenter"
            ) {
              document.addEventListener("mousemove", debouncedOnMouseMove);
            }
          });
          return instance;
          /* ======================= 🔒 Private methods 🔒 ======================= */

          /**
           * Removes the follow cursor listener
           */

          function removeFollowCursorListener() {
            document.removeEventListener(
              "mousemove",
              positionVirtualReferenceNearCursor
            );
          }
          /**
           * Cleans up interactive mouse listeners
           */

          function cleanupInteractiveMouseListeners() {
            document.body.removeEventListener("mouseleave", scheduleHide);
            document.removeEventListener("mousemove", debouncedOnMouseMove);
            mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
              return listener !== debouncedOnMouseMove;
            });
          }
          /**
           * Returns correct target used for event listeners
           */

          function getEventListenersTarget() {
            return instance.props.triggerTarget || reference;
          }
          /**
           * Adds the document click event listener for the instance
           */

          function addDocumentClickListener() {
            document.addEventListener("click", onDocumentClick, true);
          }
          /**
           * Removes the document click event listener for the instance
           */

          function removeDocumentClickListener() {
            document.removeEventListener("click", onDocumentClick, true);
          }
          /**
           * Returns transitionable inner elements used in show/hide methods
           */

          function getTransitionableElements() {
            return [
              instance.popperChildren.tooltip,
              instance.popperChildren.backdrop,
              instance.popperChildren.content,
            ];
          }
          /**
           * Determines if the instance is in `followCursor` mode.
           * NOTE: in v5, touch devices will use `initial` behavior no matter the value.
           */

          function getIsInLooseFollowCursorMode() {
            var followCursor = instance.props.followCursor;
            return (
              (followCursor && lastTriggerEventType !== "focus") ||
              (isUsingTouch && followCursor === "initial")
            );
          }
          /**
           * Updates the tooltip's position on each animation frame
           */

          function makeSticky() {
            setTransitionDuration(
              [popper],
              isIE$1 ? 0 : instance.props.updateDuration
            );
            var prevRefRect = reference.getBoundingClientRect();

            function updatePosition() {
              var currentRefRect = reference.getBoundingClientRect(); // Only schedule an update if the reference rect has changed

              if (
                prevRefRect.top !== currentRefRect.top ||
                prevRefRect.right !== currentRefRect.right ||
                prevRefRect.bottom !== currentRefRect.bottom ||
                prevRefRect.left !== currentRefRect.left
              ) {
                instance.popperInstance.scheduleUpdate();
              }

              prevRefRect = currentRefRect;

              if (instance.state.isMounted) {
                requestAnimationFrame(updatePosition);
              }
            }

            updatePosition();
          }
          /**
           * Invokes a callback once the tooltip has fully transitioned out
           */

          function onTransitionedOut(duration, callback) {
            onTransitionEnd(duration, function () {
              if (
                !instance.state.isVisible &&
                popper.parentNode &&
                popper.parentNode.contains(popper)
              ) {
                callback();
              }
            });
          }
          /**
           * Invokes a callback once the tooltip has fully transitioned in
           */

          function onTransitionedIn(duration, callback) {
            onTransitionEnd(duration, callback);
          }
          /**
           * Invokes a callback once the tooltip's CSS transition ends
           */

          function onTransitionEnd(duration, callback) {
            var tooltip = instance.popperChildren.tooltip;
            /**
             * Listener added as the `transitionend` handler
             */

            function listener(event) {
              if (event.target === tooltip) {
                updateTransitionEndListener(tooltip, "remove", listener);
                callback();
              }
            } // Make callback synchronous if duration is 0
            // `transitionend` won't fire otherwise

            if (duration === 0) {
              return callback();
            }

            updateTransitionEndListener(
              tooltip,
              "remove",
              currentTransitionEndListener
            );
            updateTransitionEndListener(tooltip, "add", listener);
            currentTransitionEndListener = listener;
          }
          /**
           * Adds an event listener to the reference and stores it in `listeners`
           */

          function on(eventType, handler) {
            var options =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : false;
            getEventListenersTarget().addEventListener(
              eventType,
              handler,
              options
            );
            listeners.push({
              eventType: eventType,
              handler: handler,
              options: options,
            });
          }
          /**
           * Adds event listeners to the reference based on the `trigger` prop
           */

          function addTriggersToReference() {
            if (instance.props.touchHold && !instance.props.target) {
              on("touchstart", onTrigger, PASSIVE);
              on("touchend", onMouseLeave, PASSIVE);
            }

            instance.props.trigger
              .trim()
              .split(" ")
              .forEach(function (eventType) {
                if (eventType === "manual") {
                  return;
                } // Non-delegates

                if (!instance.props.target) {
                  on(eventType, onTrigger);

                  switch (eventType) {
                    case "mouseenter":
                      on("mouseleave", onMouseLeave);
                      break;

                    case "focus":
                      on(isIE$1 ? "focusout" : "blur", onBlur);
                      break;
                  }
                } else {
                  // Delegates
                  switch (eventType) {
                    case "mouseenter":
                      on("mouseover", onDelegateShow);
                      on("mouseout", onDelegateHide);
                      break;

                    case "focus":
                      on("focusin", onDelegateShow);
                      on("focusout", onDelegateHide);
                      break;

                    case "click":
                      on(eventType, onDelegateShow);
                      break;
                  }
                }
              });
          }
          /**
           * Removes event listeners from the reference
           */

          function removeTriggersFromReference() {
            listeners.forEach(function (_ref) {
              var eventType = _ref.eventType,
                handler = _ref.handler,
                options = _ref.options;
              getEventListenersTarget().removeEventListener(
                eventType,
                handler,
                options
              );
            });
            listeners = [];
          }
          /**
           * Positions the virtual reference near the cursor
           */

          function positionVirtualReferenceNearCursor(event) {
            var _lastMouseMoveEvent = (lastMouseMoveEvent = event),
              x = _lastMouseMoveEvent.clientX,
              y = _lastMouseMoveEvent.clientY; // Gets set once popperInstance `onCreate` has been called

            if (!currentComputedPadding) {
              return;
            } // If the instance is interactive, avoid updating the position unless it's
            // over the reference element

            var isCursorOverReference = closestCallback(event.target, function (
              el
            ) {
              return el === reference;
            });
            var rect = reference.getBoundingClientRect();
            var followCursor = instance.props.followCursor;
            var isHorizontal = followCursor === "horizontal";
            var isVertical = followCursor === "vertical"; // The virtual reference needs some size to prevent itself from overflowing

            var isVerticalPlacement = includes(
              ["top", "bottom"],
              getBasicPlacement(popper)
            );
            var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
            var isVariation = fullPlacement
              ? !!fullPlacement.split("-")[1]
              : false;
            var size = isVerticalPlacement
              ? popper.offsetWidth
              : popper.offsetHeight;
            var halfSize = size / 2;
            var verticalIncrease = isVerticalPlacement
              ? 0
              : isVariation
              ? size
              : halfSize;
            var horizontalIncrease = isVerticalPlacement
              ? isVariation
                ? size
                : halfSize
              : 0;

            if (isCursorOverReference || !instance.props.interactive) {
              instance.popperInstance.reference = _extends$1(
                {},
                instance.popperInstance.reference,
                {
                  // This will exist in next Popper.js feature release to fix #532
                  // @ts-ignore
                  referenceNode: reference,
                  // These `client` values don't get used by Popper.js if they are 0
                  clientWidth: 0,
                  clientHeight: 0,
                  getBoundingClientRect: function getBoundingClientRect() {
                    return {
                      width: isVerticalPlacement ? size : 0,
                      height: isVerticalPlacement ? 0 : size,
                      top: (isHorizontal ? rect.top : y) - verticalIncrease,
                      bottom:
                        (isHorizontal ? rect.bottom : y) + verticalIncrease,
                      left: (isVertical ? rect.left : x) - horizontalIncrease,
                      right: (isVertical ? rect.right : x) + horizontalIncrease,
                    };
                  },
                }
              );
              instance.popperInstance.update();
            }

            if (followCursor === "initial" && instance.state.isVisible) {
              removeFollowCursorListener();
            }
          }
          /**
           * Creates the tippy instance for a delegate when it's been triggered
           */

          function createDelegateChildTippy(event) {
            if (event) {
              var targetEl = closest(event.target, instance.props.target);

              if (targetEl && !targetEl._tippy) {
                createTippy(
                  targetEl,
                  _extends$1({}, instance.props, {
                    content: invokeWithArgsOrReturn(collectionProps.content, [
                      targetEl,
                    ]),
                    appendTo: collectionProps.appendTo,
                    target: "",
                    showOnInit: true,
                  })
                );
              }
            }
          }
          /**
           * Event listener invoked upon trigger
           */

          function onTrigger(event) {
            if (!instance.state.isEnabled || isEventListenerStopped(event)) {
              return;
            }

            if (!instance.state.isVisible) {
              lastTriggerEventType = event.type;

              if (event instanceof MouseEvent) {
                lastMouseMoveEvent = event; // If scrolling, `mouseenter` events can be fired if the cursor lands
                // over a new target, but `mousemove` events don't get fired. This
                // causes interactive tooltips to get stuck open until the cursor is
                // moved

                mouseMoveListeners.forEach(function (listener) {
                  return listener(event);
                });
              }
            } // Toggle show/hide when clicking click-triggered tooltips

            if (
              event.type === "click" &&
              instance.props.hideOnClick !== false &&
              instance.state.isVisible
            ) {
              scheduleHide();
            } else {
              scheduleShow(event);
            }
          }
          /**
           * Event listener used for interactive tooltips to detect when they should
           * hide
           */

          function onMouseMove(event) {
            var isCursorOverPopper =
              closest(event.target, POPPER_SELECTOR) === popper;
            var isCursorOverReference = closestCallback(event.target, function (
              el
            ) {
              return el === reference;
            });

            if (isCursorOverPopper || isCursorOverReference) {
              return;
            }

            if (
              isCursorOutsideInteractiveBorder(
                getBasicPlacement(popper),
                popper.getBoundingClientRect(),
                event,
                instance.props
              )
            ) {
              cleanupInteractiveMouseListeners();
              scheduleHide();
            }
          }
          /**
           * Event listener invoked upon mouseleave
           */

          function onMouseLeave(event) {
            if (isEventListenerStopped(event)) {
              return;
            }

            if (instance.props.interactive) {
              document.body.addEventListener("mouseleave", scheduleHide);
              document.addEventListener("mousemove", debouncedOnMouseMove);
              mouseMoveListeners.push(debouncedOnMouseMove);
              return;
            }

            scheduleHide();
          }
          /**
           * Event listener invoked upon blur
           */

          function onBlur(event) {
            if (event.target !== getEventListenersTarget()) {
              return;
            }

            if (
              instance.props.interactive &&
              event.relatedTarget &&
              popper.contains(event.relatedTarget)
            ) {
              return;
            }

            scheduleHide();
          }
          /**
           * Event listener invoked when a child target is triggered
           */

          function onDelegateShow(event) {
            if (closest(event.target, instance.props.target)) {
              scheduleShow(event);
            }
          }
          /**
           * Event listener invoked when a child target should hide
           */

          function onDelegateHide(event) {
            if (closest(event.target, instance.props.target)) {
              scheduleHide();
            }
          }
          /**
           * Determines if an event listener should stop further execution due to the
           * `touchHold` option
           */

          function isEventListenerStopped(event) {
            var supportsTouch = "ontouchstart" in window;
            var isTouchEvent = includes(event.type, "touch");
            var touchHold = instance.props.touchHold;
            return (
              (supportsTouch && isUsingTouch && touchHold && !isTouchEvent) ||
              (isUsingTouch && !touchHold && isTouchEvent)
            );
          }
          /**
           * Runs the mount callback
           */

          function runMountCallback() {
            if (!hasMountCallbackRun && currentMountCallback) {
              hasMountCallbackRun = true;
              reflow(popper);
              currentMountCallback();
            }
          }
          /**
           * Creates the popper instance for the instance
           */

          function createPopperInstance() {
            var popperOptions = instance.props.popperOptions;
            var _instance$popperChild = instance.popperChildren,
              tooltip = _instance$popperChild.tooltip,
              arrow = _instance$popperChild.arrow;
            var preventOverflowModifier = getModifier(
              popperOptions,
              "preventOverflow"
            );

            function applyMutations(data) {
              if (instance.props.flip && !instance.props.flipOnUpdate) {
                if (data.flipped) {
                  instance.popperInstance.options.placement = data.placement;
                }

                setFlipModifierEnabled(
                  instance.popperInstance.modifiers,
                  false
                );
              } // Apply all of the popper's attributes to the tootip node as well.
              // Allows users to avoid using the .tippy-popper selector for themes.

              tooltip.setAttribute(PLACEMENT_ATTRIBUTE, data.placement);

              if (data.attributes[OUT_OF_BOUNDARIES_ATTRIBUTE] !== false) {
                tooltip.setAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE, "");
              } else {
                tooltip.removeAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE);
              } // Prevents a transition when changing placements (while tippy is visible)
              // for scroll/resize updates

              if (
                previousPlacement &&
                previousPlacement !== data.placement &&
                wasVisibleDuringPreviousUpdate
              ) {
                tooltip.style.transition = "none";
                requestAnimationFrame(function () {
                  tooltip.style.transition = "";
                });
              }

              previousPlacement = data.placement;
              wasVisibleDuringPreviousUpdate = instance.state.isVisible;
              var basicPlacement = getBasicPlacement(popper);
              var styles = tooltip.style; // Account for the `distance` offset

              styles.top = styles.bottom = styles.left = styles.right = "";
              styles[basicPlacement] = getOffsetDistanceInPx(
                instance.props.distance
              );
              var padding =
                preventOverflowModifier &&
                preventOverflowModifier.padding !== undefined
                  ? preventOverflowModifier.padding
                  : PADDING;
              var isPaddingNumber = typeof padding === "number";

              var computedPadding = _extends$1(
                {
                  top: isPaddingNumber ? padding : padding.top,
                  bottom: isPaddingNumber ? padding : padding.bottom,
                  left: isPaddingNumber ? padding : padding.left,
                  right: isPaddingNumber ? padding : padding.right,
                },
                !isPaddingNumber && padding
              );

              computedPadding[basicPlacement] = isPaddingNumber
                ? padding + instance.props.distance
                : (padding[basicPlacement] || 0) + instance.props.distance;
              instance.popperInstance.modifiers.filter(function (m) {
                return m.name === "preventOverflow";
              })[0].padding = computedPadding;
              currentComputedPadding = computedPadding;
            }

            var config = _extends$1(
              {
                eventsEnabled: false,
                placement: instance.props.placement,
              },
              popperOptions,
              {
                modifiers: _extends$1(
                  {},
                  popperOptions ? popperOptions.modifiers : {},
                  {
                    preventOverflow: _extends$1(
                      {
                        boundariesElement: instance.props.boundary,
                        padding: PADDING,
                      },
                      preventOverflowModifier
                    ),
                    arrow: _extends$1(
                      {
                        element: arrow,
                        enabled: !!arrow,
                      },
                      getModifier(popperOptions, "arrow")
                    ),
                    flip: _extends$1(
                      {
                        enabled: instance.props.flip,
                        // The tooltip is offset by 10px from the popper in CSS,
                        // we need to account for its distance
                        padding: instance.props.distance + PADDING,
                        behavior: instance.props.flipBehavior,
                      },
                      getModifier(popperOptions, "flip")
                    ),
                    offset: _extends$1(
                      {
                        offset: instance.props.offset,
                      },
                      getModifier(popperOptions, "offset")
                    ),
                  }
                ),
                onCreate: function onCreate(data) {
                  applyMutations(data);
                  runMountCallback();

                  if (popperOptions && popperOptions.onCreate) {
                    popperOptions.onCreate(data);
                  }
                },
                onUpdate: function onUpdate(data) {
                  applyMutations(data);
                  runMountCallback();

                  if (popperOptions && popperOptions.onUpdate) {
                    popperOptions.onUpdate(data);
                  }
                },
              }
            );

            instance.popperInstance = new Popper(reference, popper, config);
          }
          /**
           * Mounts the tooltip to the DOM
           */

          function mount() {
            hasMountCallbackRun = false;
            var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();

            if (instance.popperInstance) {
              setFlipModifierEnabled(
                instance.popperInstance.modifiers,
                instance.props.flip
              );

              if (!isInLooseFollowCursorMode) {
                instance.popperInstance.reference = reference;
                instance.popperInstance.enableEventListeners();
              }

              instance.popperInstance.scheduleUpdate();
            } else {
              createPopperInstance();

              if (!isInLooseFollowCursorMode) {
                instance.popperInstance.enableEventListeners();
              }
            }

            var appendTo = instance.props.appendTo;
            var parentNode =
              appendTo === "parent"
                ? reference.parentNode
                : invokeWithArgsOrReturn(appendTo, [reference]);

            if (!parentNode.contains(popper)) {
              parentNode.appendChild(popper);
              instance.props.onMount(instance);
              instance.state.isMounted = true;
            }
          }
          /**
           * Setup before show() is invoked (delays, etc.)
           */

          function scheduleShow(event, shouldAvoidCallingOnTrigger) {
            clearDelayTimeouts();

            if (instance.state.isVisible) {
              return;
            } // Is a delegate, create an instance for the child target

            if (instance.props.target) {
              return createDelegateChildTippy(event);
            }

            isScheduledToShow = true;

            if (event && !shouldAvoidCallingOnTrigger) {
              instance.props.onTrigger(instance, event);
            }

            if (instance.props.wait) {
              return instance.props.wait(instance, event);
            } // If the tooltip has a delay, we need to be listening to the mousemove as
            // soon as the trigger event is fired, so that it's in the correct position
            // upon mount.
            // Edge case: if the tooltip is still mounted, but then scheduleShow() is
            // called, it causes a jump.

            if (getIsInLooseFollowCursorMode() && !instance.state.isMounted) {
              if (!instance.popperInstance) {
                createPopperInstance();
              }

              document.addEventListener(
                "mousemove",
                positionVirtualReferenceNearCursor
              );
            }

            addDocumentClickListener();
            var delay = getValue(instance.props.delay, 0, defaultProps.delay);

            if (delay) {
              showTimeoutId = setTimeout(function () {
                show();
              }, delay);
            } else {
              show();
            }
          }
          /**
           * Setup before hide() is invoked (delays, etc.)
           */

          function scheduleHide() {
            clearDelayTimeouts();

            if (!instance.state.isVisible) {
              removeFollowCursorListener();
              removeDocumentClickListener();
              return;
            }

            isScheduledToShow = false;
            var delay = getValue(instance.props.delay, 1, defaultProps.delay);

            if (delay) {
              hideTimeoutId = setTimeout(function () {
                if (instance.state.isVisible) {
                  hide();
                }
              }, delay);
            } else {
              // Fixes a `transitionend` problem when it fires 1 frame too
              // late sometimes, we don't want hide() to be called.
              scheduleHideAnimationFrameId = requestAnimationFrame(function () {
                hide();
              });
            }
          }
          /**
           * Listener to handle clicks on the document to determine if the
           * instance should hide
           */

          function onDocumentClick(event) {
            // Clicked on interactive popper
            if (instance.props.interactive && popper.contains(event.target)) {
              return;
            } // Clicked on the event listeners target

            if (getEventListenersTarget().contains(event.target)) {
              if (isUsingTouch) {
                return;
              }

              if (
                instance.state.isVisible &&
                includes(instance.props.trigger, "click")
              ) {
                return;
              }
            }

            if (instance.props.hideOnClick === true) {
              clearDelayTimeouts();
              hide();
            }
          }
          /* ======================= 🔑 Public methods 🔑 ======================= */

          /**
           * Enables the instance to allow it to show or hide
           */

          function enable() {
            instance.state.isEnabled = true;
          }
          /**
           * Disables the instance to disallow it to show or hide
           */

          function disable() {
            instance.state.isEnabled = false;
          }
          /**
           * Clears pending timeouts related to the `delay` prop if any
           */

          function clearDelayTimeouts() {
            clearTimeout(showTimeoutId);
            clearTimeout(hideTimeoutId);
            cancelAnimationFrame(scheduleHideAnimationFrameId);
          }
          /**
           * Sets new props for the instance and redraws the tooltip
           */

          function set(options) {
            // Backwards-compatible after TypeScript change
            options = options || {};
            validateOptions(options, defaultProps);
            removeTriggersFromReference();
            var prevProps = instance.props;
            var nextProps = evaluateProps(
              reference,
              _extends$1({}, instance.props, {}, options, {
                ignoreAttributes: true,
              })
            );
            nextProps.ignoreAttributes = hasOwnProperty(
              options,
              "ignoreAttributes"
            )
              ? options.ignoreAttributes || false
              : prevProps.ignoreAttributes;
            instance.props = nextProps;
            addTriggersToReference();
            cleanupInteractiveMouseListeners();
            debouncedOnMouseMove = debounce$1(
              onMouseMove,
              nextProps.interactiveDebounce
            );
            updatePopperElement(popper, prevProps, nextProps);
            instance.popperChildren = getChildren(popper);

            if (instance.popperInstance) {
              if (
                POPPER_INSTANCE_DEPENDENCIES.some(function (prop) {
                  return (
                    hasOwnProperty(options, prop) &&
                    options[prop] !== prevProps[prop]
                  );
                })
              ) {
                instance.popperInstance.destroy();
                createPopperInstance();

                if (instance.state.isVisible) {
                  instance.popperInstance.enableEventListeners();
                }

                if (instance.props.followCursor && lastMouseMoveEvent) {
                  positionVirtualReferenceNearCursor(lastMouseMoveEvent);
                }
              } else {
                instance.popperInstance.update();
              }
            }
          }
          /**
           * Shortcut for .set({ content: newContent })
           */

          function setContent(content) {
            set({
              content: content,
            });
          }
          /**
           * Shows the tooltip
           */

          function show() {
            var duration =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : getValue(
                    instance.props.duration,
                    0,
                    defaultProps.duration[1]
                  );

            if (
              instance.state.isDestroyed ||
              !instance.state.isEnabled ||
              (isUsingTouch && !instance.props.touch)
            ) {
              return;
            } // Standardize `disabled` behavior across browsers.
            // Firefox allows events on disabled elements, but Chrome doesn't.
            // Using a wrapper element (i.e. <span>) is recommended.

            if (getEventListenersTarget().hasAttribute("disabled")) {
              return;
            }

            if (instance.props.onShow(instance) === false) {
              return;
            }

            addDocumentClickListener();
            popper.style.visibility = "visible";
            instance.state.isVisible = true;

            if (instance.props.interactive) {
              getEventListenersTarget().classList.add(ACTIVE_CLASS);
            } // Prevent a transition if the popper is at the opposite placement

            var transitionableElements = getTransitionableElements();
            setTransitionDuration(transitionableElements.concat(popper), 0);

            currentMountCallback = function currentMountCallback() {
              if (!instance.state.isVisible) {
                return;
              }

              var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();

              if (isInLooseFollowCursorMode && lastMouseMoveEvent) {
                positionVirtualReferenceNearCursor(lastMouseMoveEvent);
              } else if (!isInLooseFollowCursorMode) {
                // Double update will apply correct mutations
                instance.popperInstance.update();
              }

              if (instance.popperChildren.backdrop) {
                instance.popperChildren.content.style.transitionDelay =
                  Math.round(duration / 12) + "ms";
              }

              if (instance.props.sticky) {
                makeSticky();
              }

              setTransitionDuration([popper], instance.props.updateDuration);
              setTransitionDuration(transitionableElements, duration);
              setVisibilityState(transitionableElements, "visible");
              onTransitionedIn(duration, function () {
                if (instance.props.aria) {
                  getEventListenersTarget().setAttribute(
                    "aria-".concat(instance.props.aria),
                    popper.id
                  );
                }

                instance.props.onShown(instance);
                instance.state.isShown = true;
              });
            };

            mount();
          }
          /**
           * Hides the tooltip
           */

          function hide() {
            var duration =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : getValue(
                    instance.props.duration,
                    1,
                    defaultProps.duration[1]
                  );

            if (
              instance.state.isDestroyed ||
              (!instance.state.isEnabled && !isBeingDestroyed)
            ) {
              return;
            }

            if (
              instance.props.onHide(instance) === false &&
              !isBeingDestroyed
            ) {
              return;
            }

            removeDocumentClickListener();
            popper.style.visibility = "hidden";
            instance.state.isVisible = false;
            instance.state.isShown = false;
            wasVisibleDuringPreviousUpdate = false;

            if (instance.props.interactive) {
              getEventListenersTarget().classList.remove(ACTIVE_CLASS);
            }

            var transitionableElements = getTransitionableElements();
            setTransitionDuration(transitionableElements, duration);
            setVisibilityState(transitionableElements, "hidden");
            onTransitionedOut(duration, function () {
              if (!isScheduledToShow) {
                removeFollowCursorListener();
              }

              if (instance.props.aria) {
                getEventListenersTarget().removeAttribute(
                  "aria-".concat(instance.props.aria)
                );
              }

              instance.popperInstance.disableEventListeners();
              instance.popperInstance.options.placement =
                instance.props.placement;
              popper.parentNode.removeChild(popper);
              instance.props.onHidden(instance);
              instance.state.isMounted = false;
            });
          }
          /**
           * Destroys the tooltip
           */

          function destroy(destroyTargetInstances) {
            if (instance.state.isDestroyed) {
              return;
            }

            isBeingDestroyed = true; // If the popper is currently mounted to the DOM, we want to ensure it gets
            // hidden and unmounted instantly upon destruction

            if (instance.state.isMounted) {
              hide(0);
            }

            removeTriggersFromReference();
            delete reference._tippy;
            var target = instance.props.target;

            if (target && destroyTargetInstances && isRealElement(reference)) {
              arrayFrom(reference.querySelectorAll(target)).forEach(function (
                child
              ) {
                if (child._tippy) {
                  child._tippy.destroy();
                }
              });
            }

            if (instance.popperInstance) {
              instance.popperInstance.destroy();
            }

            isBeingDestroyed = false;
            instance.state.isDestroyed = true;
          }
        }

        /**
         * Groups an array of instances by taking control of their props during
         * certain lifecycles.
         */
        function group(instances) {
          var _ref =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : {},
            _ref$delay = _ref.delay,
            delay =
              _ref$delay === void 0 ? instances[0].props.delay : _ref$delay,
            _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? 0 : _ref$duration;

          var isAnyTippyOpen = false;
          instances.forEach(function (instance) {
            if (instance._originalProps) {
              instance.set(instance._originalProps);
            } else {
              instance._originalProps = _extends$1({}, instance.props);
            }
          });

          function setIsAnyTippyOpen(value) {
            isAnyTippyOpen = value;
            updateInstances();
          }

          function onShow(instance) {
            instance._originalProps.onShow(instance);

            instances.forEach(function (instance) {
              instance.set({
                duration: duration,
              });

              if (instance.state.isVisible) {
                instance.hide();
              }
            });
            setIsAnyTippyOpen(true);
          }

          function onHide(instance) {
            instance._originalProps.onHide(instance);

            setIsAnyTippyOpen(false);
          }

          function onShown(instance) {
            instance._originalProps.onShown(instance);

            instance.set({
              duration: instance._originalProps.duration,
            });
          }

          function updateInstances() {
            instances.forEach(function (instance) {
              instance.set({
                onShow: onShow,
                onShown: onShown,
                onHide: onHide,
                delay: isAnyTippyOpen
                  ? [0, Array.isArray(delay) ? delay[1] : delay]
                  : delay,
                duration: isAnyTippyOpen
                  ? duration
                  : instance._originalProps.duration,
              });
            });
          }

          updateInstances();
        }

        var globalEventListenersBound = false;
        /**
         * Exported module
         */

        function tippy(targets, options) {
          validateOptions(options || {}, defaultProps);

          if (!globalEventListenersBound) {
            bindGlobalEventListeners();
            globalEventListenersBound = true;
          }

          var props = _extends$1({}, defaultProps, {}, options); // If they are specifying a virtual positioning reference, we need to polyfill
          // some native DOM props

          if (isBareVirtualElement(targets)) {
            polyfillElementPrototypeProperties(targets);
          }

          var instances = getArrayOfElements(targets).reduce(function (
            acc,
            reference
          ) {
            var instance = reference && createTippy(reference, props);

            if (instance) {
              acc.push(instance);
            }

            return acc;
          },
          []);
          return isSingular(targets) ? instances[0] : instances;
        }
        /**
         * Static props
         */

        tippy.version = version;
        tippy.defaults = defaultProps;
        /**
         * Static methods
         */

        tippy.setDefaults = function (partialDefaults) {
          Object.keys(partialDefaults).forEach(function (key) {
            // @ts-ignore
            defaultProps[key] = partialDefaults[key];
          });
        };

        tippy.hideAll = hideAll;
        tippy.group = group;
        /**
         * Auto-init tooltips for elements with a `data-tippy="..."` attribute
         */

        function autoInit() {
          arrayFrom(document.querySelectorAll("[data-tippy]")).forEach(
            function (el) {
              var content = el.getAttribute("data-tippy");

              if (content) {
                tippy(el, {
                  content: content,
                });
              }
            }
          );
        }

        if (isBrowser$1) {
          setTimeout(autoInit);
        }

        /**
         * Injects a string of CSS styles to a style node in <head>
         */

        function injectCSS(css) {
          if (isBrowser$1) {
            var style = document.createElement("style");
            style.type = "text/css";
            style.textContent = css;
            style.setAttribute("data-tippy-stylesheet", "");
            var head = document.head;
            var firstStyleOrLinkTag = head.querySelector("style,link");

            if (firstStyleOrLinkTag) {
              head.insertBefore(style, firstStyleOrLinkTag);
            } else {
              head.appendChild(style);
            }
          }
        }

        injectCSS(css);

        var commonjsGlobal =
          typeof globalThis !== "undefined"
            ? globalThis
            : typeof window !== "undefined"
            ? window
            : typeof global !== "undefined"
            ? global
            : typeof self !== "undefined"
            ? self
            : {};

        function createCommonjsModule(fn, module) {
          return (
            (module = { exports: {} }),
            fn(module, module.exports),
            module.exports
          );
        }

        var humps = createCommonjsModule(function (module) {
          (function (global) {
            var _processKeys = function (convert, obj, options) {
              if (
                !_isObject(obj) ||
                _isDate(obj) ||
                _isRegExp(obj) ||
                _isBoolean(obj) ||
                _isFunction(obj)
              ) {
                return obj;
              }

              var output,
                i = 0,
                l = 0;

              if (_isArray(obj)) {
                output = [];
                for (l = obj.length; i < l; i++) {
                  output.push(_processKeys(convert, obj[i], options));
                }
              } else {
                output = {};
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    output[convert(key, options)] = _processKeys(
                      convert,
                      obj[key],
                      options
                    );
                  }
                }
              }
              return output;
            };

            // String conversion methods

            var separateWords = function (string, options) {
              options = options || {};
              var separator = options.separator || "_";
              var split = options.split || /(?=[A-Z])/;

              return string.split(split).join(separator);
            };

            var camelize = function (string) {
              if (_isNumerical(string)) {
                return string;
              }
              string = string.replace(/[\-_\s]+(.)?/g, function (match, chr) {
                return chr ? chr.toUpperCase() : "";
              });
              // Ensure 1st char is always lowercase
              return string.substr(0, 1).toLowerCase() + string.substr(1);
            };

            var pascalize = function (string) {
              var camelized = camelize(string);
              // Ensure 1st char is always uppercase
              return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
            };

            var decamelize = function (string, options) {
              return separateWords(string, options).toLowerCase();
            };

            // Utilities
            // Taken from Underscore.js

            var toString = Object.prototype.toString;

            var _isFunction = function (obj) {
              return typeof obj === "function";
            };
            var _isObject = function (obj) {
              return obj === Object(obj);
            };
            var _isArray = function (obj) {
              return toString.call(obj) == "[object Array]";
            };
            var _isDate = function (obj) {
              return toString.call(obj) == "[object Date]";
            };
            var _isRegExp = function (obj) {
              return toString.call(obj) == "[object RegExp]";
            };
            var _isBoolean = function (obj) {
              return toString.call(obj) == "[object Boolean]";
            };

            // Performant way to determine if obj coerces to a number
            var _isNumerical = function (obj) {
              obj = obj - 0;
              return obj === obj;
            };

            // Sets up function which handles processing keys
            // allowing the convert function to be modified by a callback
            var _processor = function (convert, options) {
              var callback =
                options && "process" in options ? options.process : options;

              if (typeof callback !== "function") {
                return convert;
              }

              return function (string, options) {
                return callback(string, convert, options);
              };
            };

            var humps = {
              camelize: camelize,
              decamelize: decamelize,
              pascalize: pascalize,
              depascalize: decamelize,
              camelizeKeys: function (object, options) {
                return _processKeys(_processor(camelize, options), object);
              },
              decamelizeKeys: function (object, options) {
                return _processKeys(
                  _processor(decamelize, options),
                  object,
                  options
                );
              },
              pascalizeKeys: function (object, options) {
                return _processKeys(_processor(pascalize, options), object);
              },
              depascalizeKeys: function () {
                return this.decamelizeKeys.apply(this, arguments);
              },
            };

            if (module.exports) {
              module.exports = humps;
            } else {
              global.humps = humps;
            }
          })(commonjsGlobal);
        });

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);

          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }

          return keys;
        }

        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};

            if (i % 2) {
              ownKeys(Object(source), true).forEach(function (key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(
                target,
                Object.getOwnPropertyDescriptors(source)
              );
            } else {
              ownKeys(Object(source)).forEach(function (key) {
                Object.defineProperty(
                  target,
                  key,
                  Object.getOwnPropertyDescriptor(source, key)
                );
              });
            }
          }

          return target;
        }

        var booleanProps = {
          a11y: true,
          allowHTML: true,
          animateFill: true,
          arrow: false,
          flip: true,
          flipOnUpdate: false,
          followCursor: false,
          hideOnClick: true,
          ignoreAttributes: false,
          inertia: false,
          interactive: false,
          lazy: true,
          multiple: false,
          showOnInit: false,
          sticky: false,
          touch: true,
          touchHold: false,
        };
        var defaultProps$1 = _objectSpread2(
          {
            animation: "shift-away",
            appendTo: function appendTo() {
              return document.body;
            },
            aria: "describedby",
            arrowType: "sharp",
            boundary: "scrollParent",
            content: "",
            delay: 0,
            distance: 10,
            duration: [325, 275],
            flipBehavior: "flip",
            interactiveBorder: 2,
            interactiveDebounce: 0,
            maxWidth: 350,
            offset: 0,
            onHidden: function onHidden() {},
            onHide: function onHide() {},
            onMount: function onMount() {},
            onShow: function onShow() {},
            onShown: function onShown() {},
            placement: "top",
            popperOptions: {},
            role: "tooltip",
            size: "regular",
            target: "",
            theme: "dark",
            trigger: "mouseenter focus",
            updateDuration: 0,
            wait: null,
            zIndex: 9999,
          },
          booleanProps
        );

        //
        var script = {
          props: [
            "to",
            "toSelector",
            "toElement",
            "content",
            "enabled",
            "visible",
            "triggerTarget",
          ],
          data: function data() {
            return {
              tip: null,
              options: {},
            };
          },
          mounted: function mounted() {
            this.init();
          },
          watch: {
            content: function content() {
              if (this.tip) {
                this.tip.set(this.getOptions());
              }
            },
            enabled: function enabled(val) {
              if (!this.tip) return;

              if (val) {
                this.tip.enable();
              } else {
                this.tip.hide();
                this.tip.disable();
              }
            },
            visible: function visible(val) {
              if (!this.tip) return;

              if (val) {
                this.tip.show();
              } else {
                this.tip.hide();
              }
            },
          },
          updated: function updated() {
            if (this.tip && !this.content) {
              this.tip.set(this.getOptions());
            }
          },
          beforeDestroy: function beforeDestroy() {
            if (!this.tip) return;
            this.tip.destroy();
          },
          computed: {
            isManualTrigger: function isManualTrigger() {
              return this.options.trigger === "manual";
            },
          },
          methods: {
            init: function init() {
              if (this.tip) {
                try {
                  this.tip.destroy();
                } catch (error) {}

                this.tip = null;
              }

              var elm = this.toElement;

              if (elm == null) {
                if (this.to) {
                  elm = document.querySelector("[name='".concat(this.to, "']"));
                } else if (this.toSelector) {
                  elm = document.querySelector(this.toSelector);
                } else if (
                  this.$refs.trigger &&
                  this.$refs.trigger.childElementCount > 0
                ) {
                  elm = this.$refs.trigger;
                } else {
                  elm = this.$el.parentElement;
                }
              }

              if (!elm) {
                return;
              }

              var tip = tippy(elm, this.getOptions());

              if (!tip) {
                return;
              }

              if (Array.isArray(tip)) {
                if (tip.length > 0) {
                  this.tip = tip[0];
                } else {
                  return;
                }
              }

              this.tip = tip;
              this.$emit("onCreate", this.tip);
              this.$emit("init", this.tip);

              if (this.enabled === false) {
                this.tip.disable();
              }

              if (this.isManualTrigger && this.visible === true) {
                this.tip.show();
              }
            },
            tippy: function tippy() {
              return this.tip;
            },
            filterOptions: function filterOptions() {
              var getValue = function getValue(key, value) {
                if (booleanProps.hasOwnProperty(key)) {
                  if (value === "") return true;
                  if (value === "false") return false;
                  if (value === "true") return true;
                }

                return value;
              };

              for (
                var _i = 0, _Object$keys = Object.keys(this.options);
                _i < _Object$keys.length;
                _i++
              ) {
                var key = _Object$keys[_i];

                if (!defaultProps$1.hasOwnProperty(key)) {
                  // We're replacing this.options anyway, we don't have to worry about modifying the object
                  delete this.options[key];
                } else {
                  this.options[key] = getValue(key, this.options[key]);
                }
              }

              return this.options;
            },
            getOptions: function getOptions() {
              var _this = this;

              this.options.content = this.content
                ? this.content
                : this.$refs.content;
              Object.assign(this.options, humps.camelizeKeys(this.$attrs));
              this.filterOptions();

              if (
                !this.options.onShow &&
                this.$listeners &&
                this.$listeners["show"]
              ) {
                this.options.onShow = function () {
                  var _this$$listeners$show;

                  return (_this$$listeners$show =
                    _this.$listeners["show"]).fns.apply(
                    _this$$listeners$show,
                    arguments
                  );
                };
              }

              if (
                !this.options.onShow &&
                this.$listeners &&
                this.$listeners["shown"]
              ) {
                this.options.onShown = function () {
                  var _this$$listeners$show2;

                  return (_this$$listeners$show2 =
                    _this.$listeners["shown"]).fns.apply(
                    _this$$listeners$show2,
                    arguments
                  );
                };
              }

              if (
                !this.options.onHidden &&
                this.$listeners &&
                this.$listeners["hidden"]
              ) {
                this.options.onHidden = function () {
                  var _this$$listeners$hidd;

                  return (_this$$listeners$hidd =
                    _this.$listeners["hidden"]).fns.apply(
                    _this$$listeners$hidd,
                    arguments
                  );
                };
              }

              if (
                !this.options.onHide &&
                this.$listeners &&
                this.$listeners["hide"]
              ) {
                this.options.onHide = function () {
                  var _this$$listeners$hide;

                  return (_this$$listeners$hide =
                    _this.$listeners["hide"]).fns.apply(
                    _this$$listeners$hide,
                    arguments
                  );
                };
              }

              if (
                !this.options.onMount &&
                this.$listeners &&
                this.$listeners["mount"]
              ) {
                this.options.onMount = function () {
                  var _this$$listeners$moun;

                  return (_this$$listeners$moun =
                    _this.$listeners["mount"]).fns.apply(
                    _this$$listeners$moun,
                    arguments
                  );
                };
              }

              this.options.triggerTarget = this.triggerTarget;
              return this.options;
            },
          },
        };

        function normalizeComponent(
          template,
          style,
          script,
          scopeId,
          isFunctionalTemplate,
          moduleIdentifier,
          /* server only */
          shadowMode,
          createInjector,
          createInjectorSSR,
          createInjectorShadow
        ) {
          if (typeof shadowMode !== "boolean") {
            createInjectorSSR = createInjector;
            createInjector = shadowMode;
            shadowMode = false;
          } // Vue.extend constructor export interop.

          var options = typeof script === "function" ? script.options : script; // render functions

          if (template && template.render) {
            options.render = template.render;
            options.staticRenderFns = template.staticRenderFns;
            options._compiled = true; // functional template

            if (isFunctionalTemplate) {
              options.functional = true;
            }
          } // scopedId

          if (scopeId) {
            options._scopeId = scopeId;
          }

          var hook;

          if (moduleIdentifier) {
            // server build
            hook = function hook(context) {
              // 2.3 injection
              context =
                context || // cached call
                (this.$vnode && this.$vnode.ssrContext) || // stateful
                (this.parent &&
                  this.parent.$vnode &&
                  this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true

              if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                context = __VUE_SSR_CONTEXT__;
              } // inject component styles

              if (style) {
                style.call(this, createInjectorSSR(context));
              } // register component module identifier for async chunk inference

              if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
              }
            }; // used by ssr in case component is cached and beforeCreate
            // never gets called

            options._ssrRegister = hook;
          } else if (style) {
            hook = shadowMode
              ? function () {
                  style.call(
                    this,
                    createInjectorShadow(this.$root.$options.shadowRoot)
                  );
                }
              : function (context) {
                  style.call(this, createInjector(context));
                };
          }

          if (hook) {
            if (options.functional) {
              // register for functional component in vue file
              var originalRender = options.render;

              options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
              };
            } else {
              // inject component registration as beforeCreate hook
              var existing = options.beforeCreate;
              options.beforeCreate = existing
                ? [].concat(existing, hook)
                : [hook];
            }
          }

          return script;
        }

        var normalizeComponent_1 = normalizeComponent;

        /* script */
        var __vue_script__ = script;
        /* template */

        var __vue_render__ = function __vue_render__() {
          var _vm = this;

          var _h = _vm.$createElement;

          var _c = _vm._self._c || _h;

          return _c("div", [
            _c(
              "div",
              {
                ref: "trigger",
              },
              [_vm._t("trigger")],
              2
            ),
            _vm._v(" "),
            _c(
              "div",
              {
                ref: "content",
              },
              [_vm._t("default")],
              2
            ),
          ]);
        };

        var __vue_staticRenderFns__ = [];
        __vue_render__._withStripped = true;
        /* style */

        var __vue_inject_styles__ = undefined;
        /* scoped */

        var __vue_scope_id__ = undefined;
        /* module identifier */

        var __vue_module_identifier__ = undefined;
        /* functional template */

        var __vue_is_functional_template__ = false;
        /* style inject */

        /* style inject SSR */

        var TippyComponent = normalizeComponent_1(
          {
            render: __vue_render__,
            staticRenderFns: __vue_staticRenderFns__,
          },
          __vue_inject_styles__,
          __vue_script__,
          __vue_scope_id__,
          __vue_is_functional_template__,
          __vue_module_identifier__,
          undefined,
          undefined
        );

        var tippyDirective = "tippy";
        var plugin = {
          install: function install(Vue) {
            var options =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : {};
            tippyDirective = options.directive || "tippy";
            tippy.setDefaults(options || {});

            function createTippy(el, binding, vnode) {
              var handlers =
                (vnode.data && vnode.data.on) ||
                (vnode.componentOptions && vnode.componentOptions.listeners);
              var opts = deriveOpts(binding);
              var modifiers = Object.keys(binding.modifiers || {});
              var placement = modifiers.find(function (modifier) {
                return modifier !== "arrow";
              });
              var withArrow =
                modifiers.findIndex(function (modifier) {
                  return modifier === "arrow";
                }) !== -1;
              opts = Object.assign({}, options, opts);

              if (placement) {
                opts.placement = opts.placement || placement;
              }

              if (withArrow) {
                opts.arrow = opts.arrow !== undefined ? opts.arrow : true;
              }

              if (handlers && handlers["show"]) {
                opts.onShow = function () {
                  var _handlers$show;

                  return (_handlers$show = handlers["show"]).fns.apply(
                    _handlers$show,
                    arguments
                  );
                };
              }

              if (handlers && handlers["shown"]) {
                opts.onShown = function () {
                  var _handlers$shown;

                  (_handlers$shown = handlers["shown"]).fns.apply(
                    _handlers$shown,
                    arguments
                  );
                };
              }

              if (handlers && handlers["hidden"]) {
                opts.onHidden = function () {
                  var _handlers$hidden;

                  (_handlers$hidden = handlers["hidden"]).fns.apply(
                    _handlers$hidden,
                    arguments
                  );
                };
              }

              if (handlers && handlers["hide"]) {
                opts.onHide = function () {
                  var _handlers$hide;

                  return (_handlers$hide = handlers["hide"]).fns.apply(
                    _handlers$hide,
                    arguments
                  );
                };
              }

              if (handlers && handlers["mount"]) {
                opts.onMount = function () {
                  var _handlers$mount;

                  (_handlers$mount = handlers["mount"]).fns.apply(
                    _handlers$mount,
                    arguments
                  );
                };
              }

              if (el.getAttribute("title") && !opts.content) {
                opts.content = el.getAttribute("title");
                el.removeAttribute("title");
              }

              if (el.getAttribute("content") && !opts.content) {
                opts.content = el.getAttribute("content");
              }

              tippy(el, opts);

              if (opts.showOnLoad) {
                el._tippy.show();
              }

              Vue.nextTick(function () {
                if (handlers && handlers["init"]) {
                  handlers["init"].fns(el._tippy, el);
                }
              });
            }

            Vue.directive(tippyDirective, {
              inserted: function inserted(el, binding, vnode) {
                Vue.nextTick(function () {
                  createTippy(el, binding, vnode);
                });
              },
              unbind: function unbind(el) {
                el._tippy && el._tippy.destroy();
              },
              componentUpdated: function componentUpdated(el, binding, vnode) {
                if (el._tippy) {
                  var opts = deriveOpts(binding);

                  if (el.getAttribute("title") && !opts.content) {
                    opts.content = el.getAttribute("title");
                    el.removeAttribute("title");
                  }

                  if (el.getAttribute("content") && !opts.content) {
                    opts.content = el.getAttribute("content");
                  }

                  el._tippy.set(opts);
                }
              },
            });

            function deriveOpts(binding) {
              return typeof binding.value === "string"
                ? {
                    content: binding.value,
                  }
                : binding.value || {};
            }
          },
        };

        if (typeof window !== "undefined" && window.Vue) {
          window.Vue.use(plugin);
          window.Vue.component("tippy", TippyComponent);
        }

        /* harmony default export */ __webpack_exports__["b"] = plugin;

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("c8ba")));

      /***/
    },

    /***/ "62e4": /***/ function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
              return module.l;
            },
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
              return module.i;
            },
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };

      /***/
    },

    /***/ "780f": /***/ function (module, exports, __webpack_require__) {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.

      module.exports = PassThrough;

      var Transform = __webpack_require__("27bf");

      /*<replacement>*/
      var util = Object.create(__webpack_require__("3a7c"));
      util.inherits = __webpack_require__("3fb5");
      /*</replacement>*/

      util.inherits(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);

        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };

      /***/
    },

    /***/ "7d72": /***/ function (module, exports, __webpack_require__) {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      /*<replacement>*/

      var Buffer = __webpack_require__("8707").Buffer;
      /*</replacement>*/

      var isEncoding =
        Buffer.isEncoding ||
        function (encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };

      function _normalizeEncoding(enc) {
        if (!enc) return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried) return; // undefined
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }

      // Do not cache `Buffer.isEncoding` when checking encoding names as some
      // modules monkey-patch it to support additional encodings
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (
          typeof nenc !== "string" &&
          (Buffer.isEncoding === isEncoding || !isEncoding(enc))
        )
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }

      // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters.
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(nb);
      }

      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === undefined) return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };

      StringDecoder.prototype.end = utf8End;

      // Returns only complete characters in a Buffer
      StringDecoder.prototype.text = utf8Text;

      // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(
            this.lastChar,
            this.lastTotal - this.lastNeed,
            0,
            this.lastNeed
          );
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };

      // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
      // continuation byte. If an invalid byte is detected, -2 is returned.
      function utf8CheckByte(byte) {
        if (byte <= 0x7f) return 0;
        else if (byte >> 5 === 0x06) return 2;
        else if (byte >> 4 === 0x0e) return 3;
        else if (byte >> 3 === 0x1e) return 4;
        return byte >> 6 === 0x02 ? -1 : -2;
      }

      // Checks at most 3 bytes at the end of a Buffer in order to detect an
      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
      // needed to complete the UTF-8 character (if applicable) are returned.
      function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }

      // Validates as many continuation bytes for a multi-byte UTF-8 character as
      // needed or are available. If we see a non-continuation byte where we expect
      // one, we "replace" the validated continuation bytes we've seen so far with
      // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
      // behavior. The continuation byte check is included three times in the case
      // where all of the continuation bytes for a character exist in the same buffer.
      // It is also done this way as a slight performance increase instead of using a
      // loop.
      function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xc0) !== 0x80) {
          self.lastNeed = 0;
          return "\ufffd";
        }
        if (self.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 0xc0) !== 0x80) {
            self.lastNeed = 1;
            return "\ufffd";
          }
          if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xc0) !== 0x80) {
              self.lastNeed = 2;
              return "\ufffd";
            }
          }
        }
      }

      // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }

      // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
      // partial character, the character's bytes are buffered until the required
      // number of bytes are available.
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }

      // For UTF-8, a replacement character is added when ending on a partial
      // character.
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + "\ufffd";
        return r;
      }

      // UTF-16LE typically needs two bytes per character, but even if we have an even
      // number of bytes available, we need to check if we end on a leading/high
      // surrogate. In that case, we need to wait for the next two bytes in order to
      // decode the last character properly.
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xd800 && c <= 0xdbff) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }

      // For UTF-16LE we do not explicitly append special replacement characters if we
      // end on a partial character, we simply let v8 handle that.
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }

      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }

      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }

      // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }

      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }

      /***/
    },

    /***/ "8707": /***/ function (module, exports, __webpack_require__) {
      /* eslint-disable node/no-deprecated-api */
      var buffer = __webpack_require__("b639");
      var Buffer = buffer.Buffer;

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (
        Buffer.from &&
        Buffer.alloc &&
        Buffer.allocUnsafe &&
        Buffer.allocUnsafeSlow
      ) {
        module.exports = buffer;
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length);
      }

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer);

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer(arg, encodingOrOffset, length);
      };

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer(size);
        if (fill !== undefined) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer(size);
      };

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };

      /***/
    },

    /***/ "8875": /***/ function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__,
        __WEBPACK_AMD_DEFINE_ARRAY__,
        __WEBPACK_AMD_DEFINE_RESULT__; // addapted from the document.currentScript polyfill by Adam Miller
      // MIT license
      // source: https://github.com/amiller-gh/currentScript-polyfill

      // added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

      (function (root, factory) {
        if (true) {
          !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
          (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
          (__WEBPACK_AMD_DEFINE_RESULT__ =
            typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
              ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                  exports,
                  __WEBPACK_AMD_DEFINE_ARRAY__
                )
              : __WEBPACK_AMD_DEFINE_FACTORY__),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
      })(typeof self !== "undefined" ? self : this, function () {
        function getCurrentScript() {
          var descriptor = Object.getOwnPropertyDescriptor(
            document,
            "currentScript"
          );
          // for chrome
          if (
            !descriptor &&
            "currentScript" in document &&
            document.currentScript
          ) {
            return document.currentScript;
          }

          // for other browsers with native support for currentScript
          if (
            descriptor &&
            descriptor.get !== getCurrentScript &&
            document.currentScript
          ) {
            return document.currentScript;
          }

          // IE 8-10 support script readyState
          // IE 11+ & Firefox support stack trace
          try {
            throw new Error();
          } catch (err) {
            // Find the second match for the "at" string to get file src url from stack.
            var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
              ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/gi,
              stackDetails =
                ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),
              scriptLocation = (stackDetails && stackDetails[1]) || false,
              line = (stackDetails && stackDetails[2]) || false,
              currentLocation = document.location.href.replace(
                document.location.hash,
                ""
              ),
              pageSource,
              inlineScriptSourceRegExp,
              inlineScriptSource,
              scripts = document.getElementsByTagName("script"); // Live NodeList collection

            if (scriptLocation === currentLocation) {
              pageSource = document.documentElement.outerHTML;
              inlineScriptSourceRegExp = new RegExp(
                "(?:[^\\n]+?\\n){0," +
                  (line - 2) +
                  "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*",
                "i"
              );
              inlineScriptSource = pageSource
                .replace(inlineScriptSourceRegExp, "$1")
                .trim();
            }

            for (var i = 0; i < scripts.length; i++) {
              // If ready state is interactive, return the script tag
              if (scripts[i].readyState === "interactive") {
                return scripts[i];
              }

              // If src matches, return the script tag
              if (scripts[i].src === scriptLocation) {
                return scripts[i];
              }

              // If inline source matches, return the script tag
              if (
                scriptLocation === currentLocation &&
                scripts[i].innerHTML &&
                scripts[i].innerHTML.trim() === inlineScriptSource
              ) {
                return scripts[i];
              }
            }

            // If no match, return null
            return null;
          }
        }

        return getCurrentScript;
      });

      /***/
    },

    /***/ "8bbf": /***/ function (module, exports) {
      module.exports = require("vue");

      /***/
    },

    /***/ "9152": /***/ function (module, exports) {
      /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];

        i += d;

        e = s & ((1 << -nBits) - 1);
        s >>= -nBits;
        nBits += eLen;
        for (
          ;
          nBits > 0;
          e = e * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}

        m = e & ((1 << -nBits) - 1);
        e >>= -nBits;
        nBits += mLen;
        for (
          ;
          nBits > 0;
          m = m * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (
          ;
          mLen >= 8;
          buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
        ) {}

        e = (e << mLen) | m;
        eLen += mLen;
        for (
          ;
          eLen > 0;
          buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
        ) {}

        buffer[offset + i - d] |= s * 128;
      };

      /***/
    },

    /***/ "966d": /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (process) {
        if (
          typeof process === "undefined" ||
          !process.version ||
          process.version.indexOf("v0.") === 0 ||
          (process.version.indexOf("v1.") === 0 &&
            process.version.indexOf("v1.8.") !== 0)
        ) {
          module.exports = { nextTick: nextTick };
        } else {
          module.exports = process;
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== "function") {
            throw new TypeError('"callback" argument must be a function');
          }
          var len = arguments.length;
          var args, i;
          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);
            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });
            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });
            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });
            default:
              args = new Array(len - 1);
              i = 0;
              while (i < args.length) {
                args[i++] = arguments[i];
              }
              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("4362")));

      /***/
    },

    /***/ "9871": /***/ function (module, exports, __webpack_require__) {
      module.exports = /******/ (function (modules) {
        // webpackBootstrap
        /******/ // The module cache
        /******/ var installedModules = {}; // The require function
        /******/
        /******/ /******/ function __webpack_require__(moduleId) {
          /******/
          /******/ // Check if module is in cache
          /******/ if (installedModules[moduleId]) {
            /******/ return installedModules[moduleId].exports;
            /******/
          } // Create a new module (and put it into the cache)
          /******/ /******/ var module = (installedModules[moduleId] = {
            /******/ i: moduleId,
            /******/ l: false,
            /******/ exports: {},
            /******/
          }); // Execute the module function
          /******/
          /******/ /******/ modules[moduleId].call(
            module.exports,
            module,
            module.exports,
            __webpack_require__
          ); // Flag the module as loaded
          /******/
          /******/ /******/ module.l = true; // Return the exports of the module
          /******/
          /******/ /******/ return module.exports;
          /******/
        } // expose the modules object (__webpack_modules__)
        /******/
        /******/
        /******/ /******/ __webpack_require__.m = modules; // expose the module cache
        /******/
        /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
        /******/
        /******/ /******/ __webpack_require__.d = function (
          exports,
          name,
          getter
        ) {
          /******/ if (!__webpack_require__.o(exports, name)) {
            /******/ Object.defineProperty(exports, name, {
              enumerable: true,
              get: getter,
            });
            /******/
          }
          /******/
        }; // define __esModule on exports
        /******/
        /******/ /******/ __webpack_require__.r = function (exports) {
          /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            /******/ Object.defineProperty(exports, Symbol.toStringTag, {
              value: "Module",
            });
            /******/
          }
          /******/ Object.defineProperty(exports, "__esModule", {
            value: true,
          });
          /******/
        }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
        /******/
        /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function (
          value,
          mode
        ) {
          /******/ if (mode & 1) value = __webpack_require__(value);
          /******/ if (mode & 8) return value;
          /******/ if (
            mode & 4 &&
            typeof value === "object" &&
            value &&
            value.__esModule
          )
            return value;
          /******/ var ns = Object.create(null);
          /******/ __webpack_require__.r(ns);
          /******/ Object.defineProperty(ns, "default", {
            enumerable: true,
            value: value,
          });
          /******/ if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(
                ns,
                key,
                function (key) {
                  return value[key];
                }.bind(null, key)
              );
          /******/ return ns;
          /******/
        }; // getDefaultExport function for compatibility with non-harmony modules
        /******/
        /******/ /******/ __webpack_require__.n = function (module) {
          /******/ var getter =
            module && module.__esModule
              ? /******/ function getDefault() {
                  return module["default"];
                }
              : /******/ function getModuleExports() {
                  return module;
                };
          /******/ __webpack_require__.d(getter, "a", getter);
          /******/ return getter;
          /******/
        }; // Object.prototype.hasOwnProperty.call
        /******/
        /******/ /******/ __webpack_require__.o = function (object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        }; // __webpack_public_path__
        /******/
        /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
        /******/
        /******/
        /******/ /******/ return __webpack_require__(
          (__webpack_require__.s = "fb15")
        );
        /******/
      })(
        /************************************************************************/
        /******/ {
          /***/ "00ee": /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var test = {};

            test[TO_STRING_TAG] = "z";

            module.exports = String(test) === "[object z]";

            /***/
          },

          /***/ "06cf": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var propertyIsEnumerableModule = __webpack_require__("d1e7");
            var createPropertyDescriptor = __webpack_require__("5c6c");
            var toIndexedObject = __webpack_require__("fc6a");
            var toPrimitive = __webpack_require__("c04e");
            var has = __webpack_require__("5135");
            var IE8_DOM_DEFINE = __webpack_require__("0cfb");

            var nativeGetOwnPropertyDescriptor =
              Object.getOwnPropertyDescriptor;

            // `Object.getOwnPropertyDescriptor` method
            // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
            exports.f = DESCRIPTORS
              ? nativeGetOwnPropertyDescriptor
              : function getOwnPropertyDescriptor(O, P) {
                  O = toIndexedObject(O);
                  P = toPrimitive(P, true);
                  if (IE8_DOM_DEFINE)
                    try {
                      return nativeGetOwnPropertyDescriptor(O, P);
                    } catch (error) {
                      /* empty */
                    }
                  if (has(O, P))
                    return createPropertyDescriptor(
                      !propertyIsEnumerableModule.f.call(O, P),
                      O[P]
                    );
                };

            /***/
          },

          /***/ "0cfb": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var fails = __webpack_require__("d039");
            var createElement = __webpack_require__("cc12");

            // Thank's IE8 for his funny defineProperty
            module.exports =
              !DESCRIPTORS &&
              !fails(function () {
                return (
                  Object.defineProperty(createElement("div"), "a", {
                    get: function () {
                      return 7;
                    },
                  }).a != 7
                );
              });

            /***/
          },

          /***/ "1be4": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");

            module.exports = getBuiltIn("document", "documentElement");

            /***/
          },

          /***/ "1d80": /***/ function (module, exports) {
            // `RequireObjectCoercible` abstract operation
            // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
            module.exports = function (it) {
              if (it == undefined)
                throw TypeError("Can't call method on " + it);
              return it;
            };

            /***/
          },

          /***/ "1dde": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");
            var wellKnownSymbol = __webpack_require__("b622");
            var V8_VERSION = __webpack_require__("2d00");

            var SPECIES = wellKnownSymbol("species");

            module.exports = function (METHOD_NAME) {
              // We can't use this feature detection in V8 since it causes
              // deoptimization and serious performance degradation
              // https://github.com/zloirock/core-js/issues/677
              return (
                V8_VERSION >= 51 ||
                !fails(function () {
                  var array = [];
                  var constructor = (array.constructor = {});
                  constructor[SPECIES] = function () {
                    return { foo: 1 };
                  };
                  return array[METHOD_NAME](Boolean).foo !== 1;
                })
              );
            };

            /***/
          },

          /***/ "23cb": /***/ function (module, exports, __webpack_require__) {
            var toInteger = __webpack_require__("a691");

            var max = Math.max;
            var min = Math.min;

            // Helper for a popular repeating case of the spec:
            // Let integer be ? ToInteger(index).
            // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
            module.exports = function (index, length) {
              var integer = toInteger(index);
              return integer < 0
                ? max(integer + length, 0)
                : min(integer, length);
            };

            /***/
          },

          /***/ "23e7": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
            var createNonEnumerableProperty = __webpack_require__("9112");
            var redefine = __webpack_require__("6eeb");
            var setGlobal = __webpack_require__("ce4e");
            var copyConstructorProperties = __webpack_require__("e893");
            var isForced = __webpack_require__("94ca");

            /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
            module.exports = function (options, source) {
              var TARGET = options.target;
              var GLOBAL = options.global;
              var STATIC = options.stat;
              var FORCED,
                target,
                key,
                targetProperty,
                sourceProperty,
                descriptor;
              if (GLOBAL) {
                target = global;
              } else if (STATIC) {
                target = global[TARGET] || setGlobal(TARGET, {});
              } else {
                target = (global[TARGET] || {}).prototype;
              }
              if (target)
                for (key in source) {
                  sourceProperty = source[key];
                  if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor(target, key);
                    targetProperty = descriptor && descriptor.value;
                  } else targetProperty = target[key];
                  FORCED = isForced(
                    GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
                    options.forced
                  );
                  // contained in target
                  if (!FORCED && targetProperty !== undefined) {
                    if (typeof sourceProperty === typeof targetProperty)
                      continue;
                    copyConstructorProperties(sourceProperty, targetProperty);
                  }
                  // add a flag to not completely full polyfills
                  if (options.sham || (targetProperty && targetProperty.sham)) {
                    createNonEnumerableProperty(sourceProperty, "sham", true);
                  }
                  // extend global
                  redefine(target, key, sourceProperty, options);
                }
            };

            /***/
          },

          /***/ "241c": /***/ function (module, exports, __webpack_require__) {
            var internalObjectKeys = __webpack_require__("ca84");
            var enumBugKeys = __webpack_require__("7839");

            var hiddenKeys = enumBugKeys.concat("length", "prototype");

            // `Object.getOwnPropertyNames` method
            // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
            exports.f =
              Object.getOwnPropertyNames ||
              function getOwnPropertyNames(O) {
                return internalObjectKeys(O, hiddenKeys);
              };

            /***/
          },

          /***/ "2d00": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var userAgent = __webpack_require__("342f");

            var process = global.process;
            var versions = process && process.versions;
            var v8 = versions && versions.v8;
            var match, version;

            if (v8) {
              match = v8.split(".");
              version = match[0] + match[1];
            } else if (userAgent) {
              match = userAgent.match(/Edge\/(\d+)/);
              if (!match || match[1] >= 74) {
                match = userAgent.match(/Chrome\/(\d+)/);
                if (match) version = match[1];
              }
            }

            module.exports = version && +version;

            /***/
          },

          /***/ "342f": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");

            module.exports = getBuiltIn("navigator", "userAgent") || "";

            /***/
          },

          /***/ "37e8": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var definePropertyModule = __webpack_require__("9bf2");
            var anObject = __webpack_require__("825a");
            var objectKeys = __webpack_require__("df75");

            // `Object.defineProperties` method
            // https://tc39.github.io/ecma262/#sec-object.defineproperties
            module.exports = DESCRIPTORS
              ? Object.defineProperties
              : function defineProperties(O, Properties) {
                  anObject(O);
                  var keys = objectKeys(Properties);
                  var length = keys.length;
                  var index = 0;
                  var key;
                  while (length > index)
                    definePropertyModule.f(
                      O,
                      (key = keys[index++]),
                      Properties[key]
                    );
                  return O;
                };

            /***/
          },

          /***/ "3bbe": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            module.exports = function (it) {
              if (!isObject(it) && it !== null) {
                throw TypeError("Can't set " + String(it) + " as a prototype");
              }
              return it;
            };

            /***/
          },

          /***/ "3f8c": /***/ function (module, exports) {
            module.exports = {};

            /***/
          },

          /***/ "428f": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");

            module.exports = global;

            /***/
          },

          /***/ "44ad": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");
            var classof = __webpack_require__("c6b6");

            var split = "".split;

            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            module.exports = fails(function () {
              // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
              // eslint-disable-next-line no-prototype-builtins
              return !Object("z").propertyIsEnumerable(0);
            })
              ? function (it) {
                  return classof(it) == "String"
                    ? split.call(it, "")
                    : Object(it);
                }
              : Object;

            /***/
          },

          /***/ "44d2": /***/ function (module, exports, __webpack_require__) {
            var wellKnownSymbol = __webpack_require__("b622");
            var create = __webpack_require__("7c73");
            var definePropertyModule = __webpack_require__("9bf2");

            var UNSCOPABLES = wellKnownSymbol("unscopables");
            var ArrayPrototype = Array.prototype;

            // Array.prototype[@@unscopables]
            // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
            if (ArrayPrototype[UNSCOPABLES] == undefined) {
              definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                configurable: true,
                value: create(null),
              });
            }

            // add a key to Array.prototype[@@unscopables]
            module.exports = function (key) {
              ArrayPrototype[UNSCOPABLES][key] = true;
            };

            /***/
          },

          /***/ "4930": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            module.exports =
              !!Object.getOwnPropertySymbols &&
              !fails(function () {
                // Chrome 38 Symbol has incorrect toString conversion
                // eslint-disable-next-line no-undef
                return !String(Symbol());
              });

            /***/
          },

          /***/ "4d64": /***/ function (module, exports, __webpack_require__) {
            var toIndexedObject = __webpack_require__("fc6a");
            var toLength = __webpack_require__("50c4");
            var toAbsoluteIndex = __webpack_require__("23cb");

            // `Array.prototype.{ indexOf, includes }` methods implementation
            var createMethod = function (IS_INCLUDES) {
              return function ($this, el, fromIndex) {
                var O = toIndexedObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                // Array#includes uses SameValueZero equality algorithm
                // eslint-disable-next-line no-self-compare
                if (IS_INCLUDES && el != el)
                  while (length > index) {
                    value = O[index++];
                    // eslint-disable-next-line no-self-compare
                    if (value != value) return true;
                    // Array#indexOf ignores holes, Array#includes - not
                  }
                else
                  for (; length > index; index++) {
                    if ((IS_INCLUDES || index in O) && O[index] === el)
                      return IS_INCLUDES || index || 0;
                  }
                return !IS_INCLUDES && -1;
              };
            };

            module.exports = {
              // `Array.prototype.includes` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.includes
              includes: createMethod(true),
              // `Array.prototype.indexOf` method
              // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
              indexOf: createMethod(false),
            };

            /***/
          },

          /***/ "50c4": /***/ function (module, exports, __webpack_require__) {
            var toInteger = __webpack_require__("a691");

            var min = Math.min;

            // `ToLength` abstract operation
            // https://tc39.github.io/ecma262/#sec-tolength
            module.exports = function (argument) {
              return argument > 0
                ? min(toInteger(argument), 0x1fffffffffffff)
                : 0; // 2 ** 53 - 1 == 9007199254740991
            };

            /***/
          },

          /***/ "5135": /***/ function (module, exports) {
            var hasOwnProperty = {}.hasOwnProperty;

            module.exports = function (it, key) {
              return hasOwnProperty.call(it, key);
            };

            /***/
          },

          /***/ "5692": /***/ function (module, exports, __webpack_require__) {
            var IS_PURE = __webpack_require__("c430");
            var store = __webpack_require__("c6cd");

            (module.exports = function (key, value) {
              return (
                store[key] || (store[key] = value !== undefined ? value : {})
              );
            })("versions", []).push({
              version: "3.8.1",
              mode: IS_PURE ? "pure" : "global",
              copyright: "© 2020 Denis Pushkarev (zloirock.ru)",
            });

            /***/
          },

          /***/ "56ef": /***/ function (module, exports, __webpack_require__) {
            var getBuiltIn = __webpack_require__("d066");
            var getOwnPropertyNamesModule = __webpack_require__("241c");
            var getOwnPropertySymbolsModule = __webpack_require__("7418");
            var anObject = __webpack_require__("825a");

            // all object keys, includes non-enumerable and symbols
            module.exports =
              getBuiltIn("Reflect", "ownKeys") ||
              function ownKeys(it) {
                var keys = getOwnPropertyNamesModule.f(anObject(it));
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                return getOwnPropertySymbols
                  ? keys.concat(getOwnPropertySymbols(it))
                  : keys;
              };

            /***/
          },

          /***/ "5c6c": /***/ function (module, exports) {
            module.exports = function (bitmap, value) {
              return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value,
              };
            };

            /***/
          },

          /***/ "69f3": /***/ function (module, exports, __webpack_require__) {
            var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
            var global = __webpack_require__("da84");
            var isObject = __webpack_require__("861d");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var objectHas = __webpack_require__("5135");
            var shared = __webpack_require__("c6cd");
            var sharedKey = __webpack_require__("f772");
            var hiddenKeys = __webpack_require__("d012");

            var WeakMap = global.WeakMap;
            var set, get, has;

            var enforce = function (it) {
              return has(it) ? get(it) : set(it, {});
            };

            var getterFor = function (TYPE) {
              return function (it) {
                var state;
                if (!isObject(it) || (state = get(it)).type !== TYPE) {
                  throw TypeError(
                    "Incompatible receiver, " + TYPE + " required"
                  );
                }
                return state;
              };
            };

            if (NATIVE_WEAK_MAP) {
              var store = shared.state || (shared.state = new WeakMap());
              var wmget = store.get;
              var wmhas = store.has;
              var wmset = store.set;
              set = function (it, metadata) {
                metadata.facade = it;
                wmset.call(store, it, metadata);
                return metadata;
              };
              get = function (it) {
                return wmget.call(store, it) || {};
              };
              has = function (it) {
                return wmhas.call(store, it);
              };
            } else {
              var STATE = sharedKey("state");
              hiddenKeys[STATE] = true;
              set = function (it, metadata) {
                metadata.facade = it;
                createNonEnumerableProperty(it, STATE, metadata);
                return metadata;
              };
              get = function (it) {
                return objectHas(it, STATE) ? it[STATE] : {};
              };
              has = function (it) {
                return objectHas(it, STATE);
              };
            }

            module.exports = {
              set: set,
              get: get,
              has: has,
              enforce: enforce,
              getterFor: getterFor,
            };

            /***/
          },

          /***/ "6eeb": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var has = __webpack_require__("5135");
            var setGlobal = __webpack_require__("ce4e");
            var inspectSource = __webpack_require__("8925");
            var InternalStateModule = __webpack_require__("69f3");

            var getInternalState = InternalStateModule.get;
            var enforceInternalState = InternalStateModule.enforce;
            var TEMPLATE = String(String).split("String");

            (module.exports = function (O, key, value, options) {
              var unsafe = options ? !!options.unsafe : false;
              var simple = options ? !!options.enumerable : false;
              var noTargetGet = options ? !!options.noTargetGet : false;
              var state;
              if (typeof value == "function") {
                if (typeof key == "string" && !has(value, "name")) {
                  createNonEnumerableProperty(value, "name", key);
                }
                state = enforceInternalState(value);
                if (!state.source) {
                  state.source = TEMPLATE.join(
                    typeof key == "string" ? key : ""
                  );
                }
              }
              if (O === global) {
                if (simple) O[key] = value;
                else setGlobal(key, value);
                return;
              } else if (!unsafe) {
                delete O[key];
              } else if (!noTargetGet && O[key]) {
                simple = true;
              }
              if (simple) O[key] = value;
              else createNonEnumerableProperty(O, key, value);
              // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
            })(Function.prototype, "toString", function toString() {
              return (
                (typeof this == "function" && getInternalState(this).source) ||
                inspectSource(this)
              );
            });

            /***/
          },

          /***/ "7418": /***/ function (module, exports) {
            exports.f = Object.getOwnPropertySymbols;

            /***/
          },

          /***/ "7839": /***/ function (module, exports) {
            // IE8- don't enum bug keys
            module.exports = [
              "constructor",
              "hasOwnProperty",
              "isPrototypeOf",
              "propertyIsEnumerable",
              "toLocaleString",
              "toString",
              "valueOf",
            ];

            /***/
          },

          /***/ "7b0b": /***/ function (module, exports, __webpack_require__) {
            var requireObjectCoercible = __webpack_require__("1d80");

            // `ToObject` abstract operation
            // https://tc39.github.io/ecma262/#sec-toobject
            module.exports = function (argument) {
              return Object(requireObjectCoercible(argument));
            };

            /***/
          },

          /***/ "7c73": /***/ function (module, exports, __webpack_require__) {
            var anObject = __webpack_require__("825a");
            var defineProperties = __webpack_require__("37e8");
            var enumBugKeys = __webpack_require__("7839");
            var hiddenKeys = __webpack_require__("d012");
            var html = __webpack_require__("1be4");
            var documentCreateElement = __webpack_require__("cc12");
            var sharedKey = __webpack_require__("f772");

            var GT = ">";
            var LT = "<";
            var PROTOTYPE = "prototype";
            var SCRIPT = "script";
            var IE_PROTO = sharedKey("IE_PROTO");

            var EmptyConstructor = function () {
              /* empty */
            };

            var scriptTag = function (content) {
              return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
            };

            // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
            var NullProtoObjectViaActiveX = function (activeXDocument) {
              activeXDocument.write(scriptTag(""));
              activeXDocument.close();
              var temp = activeXDocument.parentWindow.Object;
              activeXDocument = null; // avoid memory leak
              return temp;
            };

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var NullProtoObjectViaIFrame = function () {
              // Thrash, waste and sodomy: IE GC bug
              var iframe = documentCreateElement("iframe");
              var JS = "java" + SCRIPT + ":";
              var iframeDocument;
              iframe.style.display = "none";
              html.appendChild(iframe);
              // https://github.com/zloirock/core-js/issues/475
              iframe.src = String(JS);
              iframeDocument = iframe.contentWindow.document;
              iframeDocument.open();
              iframeDocument.write(scriptTag("document.F=Object"));
              iframeDocument.close();
              return iframeDocument.F;
            };

            // Check for document.domain and active x support
            // No need to use active x approach when document.domain is not set
            // see https://github.com/es-shims/es5-shim/issues/150
            // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
            // avoid IE GC bug
            var activeXDocument;
            var NullProtoObject = function () {
              try {
                /* global ActiveXObject */
                activeXDocument =
                  document.domain && new ActiveXObject("htmlfile");
              } catch (error) {
                /* ignore */
              }
              NullProtoObject = activeXDocument
                ? NullProtoObjectViaActiveX(activeXDocument)
                : NullProtoObjectViaIFrame();
              var length = enumBugKeys.length;
              while (length--)
                delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
              return NullProtoObject();
            };

            hiddenKeys[IE_PROTO] = true;

            // `Object.create` method
            // https://tc39.github.io/ecma262/#sec-object.create
            module.exports =
              Object.create ||
              function create(O, Properties) {
                var result;
                if (O !== null) {
                  EmptyConstructor[PROTOTYPE] = anObject(O);
                  result = new EmptyConstructor();
                  EmptyConstructor[PROTOTYPE] = null;
                  // add "__proto__" for Object.getPrototypeOf polyfill
                  result[IE_PROTO] = O;
                } else result = NullProtoObject();
                return Properties === undefined
                  ? result
                  : defineProperties(result, Properties);
              };

            /***/
          },

          /***/ "7dd0": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var createIteratorConstructor = __webpack_require__("9ed3");
            var getPrototypeOf = __webpack_require__("e163");
            var setPrototypeOf = __webpack_require__("d2bb");
            var setToStringTag = __webpack_require__("d44e");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var redefine = __webpack_require__("6eeb");
            var wellKnownSymbol = __webpack_require__("b622");
            var IS_PURE = __webpack_require__("c430");
            var Iterators = __webpack_require__("3f8c");
            var IteratorsCore = __webpack_require__("ae93");

            var IteratorPrototype = IteratorsCore.IteratorPrototype;
            var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
            var ITERATOR = wellKnownSymbol("iterator");
            var KEYS = "keys";
            var VALUES = "values";
            var ENTRIES = "entries";

            var returnThis = function () {
              return this;
            };

            module.exports = function (
              Iterable,
              NAME,
              IteratorConstructor,
              next,
              DEFAULT,
              IS_SET,
              FORCED
            ) {
              createIteratorConstructor(IteratorConstructor, NAME, next);

              var getIterationMethod = function (KIND) {
                if (KIND === DEFAULT && defaultIterator) return defaultIterator;
                if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                  return IterablePrototype[KIND];
                switch (KIND) {
                  case KEYS:
                    return function keys() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case VALUES:
                    return function values() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case ENTRIES:
                    return function entries() {
                      return new IteratorConstructor(this, KIND);
                    };
                }
                return function () {
                  return new IteratorConstructor(this);
                };
              };

              var TO_STRING_TAG = NAME + " Iterator";
              var INCORRECT_VALUES_NAME = false;
              var IterablePrototype = Iterable.prototype;
              var nativeIterator =
                IterablePrototype[ITERATOR] ||
                IterablePrototype["@@iterator"] ||
                (DEFAULT && IterablePrototype[DEFAULT]);
              var defaultIterator =
                (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
                getIterationMethod(DEFAULT);
              var anyNativeIterator =
                NAME == "Array"
                  ? IterablePrototype.entries || nativeIterator
                  : nativeIterator;
              var CurrentIteratorPrototype, methods, KEY;

              // fix native
              if (anyNativeIterator) {
                CurrentIteratorPrototype = getPrototypeOf(
                  anyNativeIterator.call(new Iterable())
                );
                if (
                  IteratorPrototype !== Object.prototype &&
                  CurrentIteratorPrototype.next
                ) {
                  if (
                    !IS_PURE &&
                    getPrototypeOf(CurrentIteratorPrototype) !==
                      IteratorPrototype
                  ) {
                    if (setPrototypeOf) {
                      setPrototypeOf(
                        CurrentIteratorPrototype,
                        IteratorPrototype
                      );
                    } else if (
                      typeof CurrentIteratorPrototype[ITERATOR] != "function"
                    ) {
                      createNonEnumerableProperty(
                        CurrentIteratorPrototype,
                        ITERATOR,
                        returnThis
                      );
                    }
                  }
                  // Set @@toStringTag to native iterators
                  setToStringTag(
                    CurrentIteratorPrototype,
                    TO_STRING_TAG,
                    true,
                    true
                  );
                  if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                }
              }

              // fix Array#{values, @@iterator}.name in V8 / FF
              if (
                DEFAULT == VALUES &&
                nativeIterator &&
                nativeIterator.name !== VALUES
              ) {
                INCORRECT_VALUES_NAME = true;
                defaultIterator = function values() {
                  return nativeIterator.call(this);
                };
              }

              // define iterator
              if (
                (!IS_PURE || FORCED) &&
                IterablePrototype[ITERATOR] !== defaultIterator
              ) {
                createNonEnumerableProperty(
                  IterablePrototype,
                  ITERATOR,
                  defaultIterator
                );
              }
              Iterators[NAME] = defaultIterator;

              // export additional methods
              if (DEFAULT) {
                methods = {
                  values: getIterationMethod(VALUES),
                  keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                  entries: getIterationMethod(ENTRIES),
                };
                if (FORCED)
                  for (KEY in methods) {
                    if (
                      BUGGY_SAFARI_ITERATORS ||
                      INCORRECT_VALUES_NAME ||
                      !(KEY in IterablePrototype)
                    ) {
                      redefine(IterablePrototype, KEY, methods[KEY]);
                    }
                  }
                else
                  $(
                    {
                      target: NAME,
                      proto: true,
                      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME,
                    },
                    methods
                  );
              }

              return methods;
            };

            /***/
          },

          /***/ "7f9a": /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var inspectSource = __webpack_require__("8925");

            var WeakMap = global.WeakMap;

            module.exports =
              typeof WeakMap === "function" &&
              /native code/.test(inspectSource(WeakMap));

            /***/
          },

          /***/ "825a": /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            module.exports = function (it) {
              if (!isObject(it)) {
                throw TypeError(String(it) + " is not an object");
              }
              return it;
            };

            /***/
          },

          /***/ "83ab": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            // Thank's IE8 for his funny defineProperty
            module.exports = !fails(function () {
              return (
                Object.defineProperty({}, 1, {
                  get: function () {
                    return 7;
                  },
                })[1] != 7
              );
            });

            /***/
          },

          /***/ "8418": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var toPrimitive = __webpack_require__("c04e");
            var definePropertyModule = __webpack_require__("9bf2");
            var createPropertyDescriptor = __webpack_require__("5c6c");

            module.exports = function (object, key, value) {
              var propertyKey = toPrimitive(key);
              if (propertyKey in object)
                definePropertyModule.f(
                  object,
                  propertyKey,
                  createPropertyDescriptor(0, value)
                );
              else object[propertyKey] = value;
            };

            /***/
          },

          /***/ "861d": /***/ function (module, exports) {
            module.exports = function (it) {
              return typeof it === "object"
                ? it !== null
                : typeof it === "function";
            };

            /***/
          },

          /***/ "8875": /***/ function (module, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__,
              __WEBPACK_AMD_DEFINE_ARRAY__,
              __WEBPACK_AMD_DEFINE_RESULT__; // addapted from the document.currentScript polyfill by Adam Miller
            // MIT license
            // source: https://github.com/amiller-gh/currentScript-polyfill

            // added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

            (function (root, factory) {
              if (true) {
                !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
                (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
                (__WEBPACK_AMD_DEFINE_RESULT__ =
                  typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
                    ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                        exports,
                        __WEBPACK_AMD_DEFINE_ARRAY__
                      )
                    : __WEBPACK_AMD_DEFINE_FACTORY__),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                  (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(typeof self !== "undefined" ? self : this, function () {
              function getCurrentScript() {
                var descriptor = Object.getOwnPropertyDescriptor(
                  document,
                  "currentScript"
                );
                // for chrome
                if (
                  !descriptor &&
                  "currentScript" in document &&
                  document.currentScript
                ) {
                  return document.currentScript;
                }

                // for other browsers with native support for currentScript
                if (
                  descriptor &&
                  descriptor.get !== getCurrentScript &&
                  document.currentScript
                ) {
                  return document.currentScript;
                }

                // IE 8-10 support script readyState
                // IE 11+ & Firefox support stack trace
                try {
                  throw new Error();
                } catch (err) {
                  // Find the second match for the "at" string to get file src url from stack.
                  var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
                    ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/gi,
                    stackDetails =
                      ieStackRegExp.exec(err.stack) ||
                      ffStackRegExp.exec(err.stack),
                    scriptLocation = (stackDetails && stackDetails[1]) || false,
                    line = (stackDetails && stackDetails[2]) || false,
                    currentLocation = document.location.href.replace(
                      document.location.hash,
                      ""
                    ),
                    pageSource,
                    inlineScriptSourceRegExp,
                    inlineScriptSource,
                    scripts = document.getElementsByTagName("script"); // Live NodeList collection

                  if (scriptLocation === currentLocation) {
                    pageSource = document.documentElement.outerHTML;
                    inlineScriptSourceRegExp = new RegExp(
                      "(?:[^\\n]+?\\n){0," +
                        (line - 2) +
                        "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*",
                      "i"
                    );
                    inlineScriptSource = pageSource
                      .replace(inlineScriptSourceRegExp, "$1")
                      .trim();
                  }

                  for (var i = 0; i < scripts.length; i++) {
                    // If ready state is interactive, return the script tag
                    if (scripts[i].readyState === "interactive") {
                      return scripts[i];
                    }

                    // If src matches, return the script tag
                    if (scripts[i].src === scriptLocation) {
                      return scripts[i];
                    }

                    // If inline source matches, return the script tag
                    if (
                      scriptLocation === currentLocation &&
                      scripts[i].innerHTML &&
                      scripts[i].innerHTML.trim() === inlineScriptSource
                    ) {
                      return scripts[i];
                    }
                  }

                  // If no match, return null
                  return null;
                }
              }

              return getCurrentScript;
            });

            /***/
          },

          /***/ "8925": /***/ function (module, exports, __webpack_require__) {
            var store = __webpack_require__("c6cd");

            var functionToString = Function.toString;

            // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
            if (typeof store.inspectSource != "function") {
              store.inspectSource = function (it) {
                return functionToString.call(it);
              };
            }

            module.exports = store.inspectSource;

            /***/
          },

          /***/ "90e3": /***/ function (module, exports) {
            var id = 0;
            var postfix = Math.random();

            module.exports = function (key) {
              return (
                "Symbol(" +
                String(key === undefined ? "" : key) +
                ")_" +
                (++id + postfix).toString(36)
              );
            };

            /***/
          },

          /***/ "9112": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var definePropertyModule = __webpack_require__("9bf2");
            var createPropertyDescriptor = __webpack_require__("5c6c");

            module.exports = DESCRIPTORS
              ? function (object, key, value) {
                  return definePropertyModule.f(
                    object,
                    key,
                    createPropertyDescriptor(1, value)
                  );
                }
              : function (object, key, value) {
                  object[key] = value;
                  return object;
                };

            /***/
          },

          /***/ "94ca": /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            var replacement = /#|\.prototype\./;

            var isForced = function (feature, detection) {
              var value = data[normalize(feature)];
              return value == POLYFILL
                ? true
                : value == NATIVE
                ? false
                : typeof detection == "function"
                ? fails(detection)
                : !!detection;
            };

            var normalize = (isForced.normalize = function (string) {
              return String(string).replace(replacement, ".").toLowerCase();
            });

            var data = (isForced.data = {});
            var NATIVE = (isForced.NATIVE = "N");
            var POLYFILL = (isForced.POLYFILL = "P");

            module.exports = isForced;

            /***/
          },

          /***/ "9bf2": /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var IE8_DOM_DEFINE = __webpack_require__("0cfb");
            var anObject = __webpack_require__("825a");
            var toPrimitive = __webpack_require__("c04e");

            var nativeDefineProperty = Object.defineProperty;

            // `Object.defineProperty` method
            // https://tc39.github.io/ecma262/#sec-object.defineproperty
            exports.f = DESCRIPTORS
              ? nativeDefineProperty
              : function defineProperty(O, P, Attributes) {
                  anObject(O);
                  P = toPrimitive(P, true);
                  anObject(Attributes);
                  if (IE8_DOM_DEFINE)
                    try {
                      return nativeDefineProperty(O, P, Attributes);
                    } catch (error) {
                      /* empty */
                    }
                  if ("get" in Attributes || "set" in Attributes)
                    throw TypeError("Accessors not supported");
                  if ("value" in Attributes) O[P] = Attributes.value;
                  return O;
                };

            /***/
          },

          /***/ "9ed3": /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var IteratorPrototype = __webpack_require__("ae93")
              .IteratorPrototype;
            var create = __webpack_require__("7c73");
            var createPropertyDescriptor = __webpack_require__("5c6c");
            var setToStringTag = __webpack_require__("d44e");
            var Iterators = __webpack_require__("3f8c");

            var returnThis = function () {
              return this;
            };

            module.exports = function (IteratorConstructor, NAME, next) {
              var TO_STRING_TAG = NAME + " Iterator";
              IteratorConstructor.prototype = create(IteratorPrototype, {
                next: createPropertyDescriptor(1, next),
              });
              setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
              Iterators[TO_STRING_TAG] = returnThis;
              return IteratorConstructor;
            };

            /***/
          },

          /***/ a691: /***/ function (module, exports) {
            var ceil = Math.ceil;
            var floor = Math.floor;

            // `ToInteger` abstract operation
            // https://tc39.github.io/ecma262/#sec-tointeger
            module.exports = function (argument) {
              return isNaN((argument = +argument))
                ? 0
                : (argument > 0 ? floor : ceil)(argument);
            };

            /***/
          },

          /***/ ae40: /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var fails = __webpack_require__("d039");
            var has = __webpack_require__("5135");

            var defineProperty = Object.defineProperty;
            var cache = {};

            var thrower = function (it) {
              throw it;
            };

            module.exports = function (METHOD_NAME, options) {
              if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
              if (!options) options = {};
              var method = [][METHOD_NAME];
              var ACCESSORS = has(options, "ACCESSORS")
                ? options.ACCESSORS
                : false;
              var argument0 = has(options, 0) ? options[0] : thrower;
              var argument1 = has(options, 1) ? options[1] : undefined;

              return (cache[METHOD_NAME] =
                !!method &&
                !fails(function () {
                  if (ACCESSORS && !DESCRIPTORS) return true;
                  var O = { length: -1 };

                  if (ACCESSORS)
                    defineProperty(O, 1, { enumerable: true, get: thrower });
                  else O[1] = 1;

                  method.call(O, argument0, argument1);
                }));
            };

            /***/
          },

          /***/ ae93: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var getPrototypeOf = __webpack_require__("e163");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var has = __webpack_require__("5135");
            var wellKnownSymbol = __webpack_require__("b622");
            var IS_PURE = __webpack_require__("c430");

            var ITERATOR = wellKnownSymbol("iterator");
            var BUGGY_SAFARI_ITERATORS = false;

            var returnThis = function () {
              return this;
            };

            // `%IteratorPrototype%` object
            // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
            var IteratorPrototype,
              PrototypeOfArrayIteratorPrototype,
              arrayIterator;

            if ([].keys) {
              arrayIterator = [].keys();
              // Safari 8 has buggy iterators w/o `next`
              if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
              else {
                PrototypeOfArrayIteratorPrototype = getPrototypeOf(
                  getPrototypeOf(arrayIterator)
                );
                if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                  IteratorPrototype = PrototypeOfArrayIteratorPrototype;
              }
            }

            if (IteratorPrototype == undefined) IteratorPrototype = {};

            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
              createNonEnumerableProperty(
                IteratorPrototype,
                ITERATOR,
                returnThis
              );
            }

            module.exports = {
              IteratorPrototype: IteratorPrototype,
              BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
            };

            /***/
          },

          /***/ b041: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var classof = __webpack_require__("f5df");

            // `Object.prototype.toString` method implementation
            // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
            module.exports = TO_STRING_TAG_SUPPORT
              ? {}.toString
              : function toString() {
                  return "[object " + classof(this) + "]";
                };

            /***/
          },

          /***/ b0c0: /***/ function (module, exports, __webpack_require__) {
            var DESCRIPTORS = __webpack_require__("83ab");
            var defineProperty = __webpack_require__("9bf2").f;

            var FunctionPrototype = Function.prototype;
            var FunctionPrototypeToString = FunctionPrototype.toString;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = "name";

            // Function instances `.name` property
            // https://tc39.github.io/ecma262/#sec-function-instances-name
            if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
              defineProperty(FunctionPrototype, NAME, {
                configurable: true,
                get: function () {
                  try {
                    return FunctionPrototypeToString.call(this).match(
                      nameRE
                    )[1];
                  } catch (error) {
                    return "";
                  }
                },
              });
            }

            /***/
          },

          /***/ b622: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var shared = __webpack_require__("5692");
            var has = __webpack_require__("5135");
            var uid = __webpack_require__("90e3");
            var NATIVE_SYMBOL = __webpack_require__("4930");
            var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

            var WellKnownSymbolsStore = shared("wks");
            var Symbol = global.Symbol;
            var createWellKnownSymbol = USE_SYMBOL_AS_UID
              ? Symbol
              : (Symbol && Symbol.withoutSetter) || uid;

            module.exports = function (name) {
              if (!has(WellKnownSymbolsStore, name)) {
                if (NATIVE_SYMBOL && has(Symbol, name))
                  WellKnownSymbolsStore[name] = Symbol[name];
                else
                  WellKnownSymbolsStore[name] = createWellKnownSymbol(
                    "Symbol." + name
                  );
              }
              return WellKnownSymbolsStore[name];
            };

            /***/
          },

          /***/ c04e: /***/ function (module, exports, __webpack_require__) {
            var isObject = __webpack_require__("861d");

            // `ToPrimitive` abstract operation
            // https://tc39.github.io/ecma262/#sec-toprimitive
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function (input, PREFERRED_STRING) {
              if (!isObject(input)) return input;
              var fn, val;
              if (
                PREFERRED_STRING &&
                typeof (fn = input.toString) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              if (
                typeof (fn = input.valueOf) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              if (
                !PREFERRED_STRING &&
                typeof (fn = input.toString) == "function" &&
                !isObject((val = fn.call(input)))
              )
                return val;
              throw TypeError("Can't convert object to primitive value");
            };

            /***/
          },

          /***/ c430: /***/ function (module, exports) {
            module.exports = false;

            /***/
          },

          /***/ c6b6: /***/ function (module, exports) {
            var toString = {}.toString;

            module.exports = function (it) {
              return toString.call(it).slice(8, -1);
            };

            /***/
          },

          /***/ c6cd: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var setGlobal = __webpack_require__("ce4e");

            var SHARED = "__core-js_shared__";
            var store = global[SHARED] || setGlobal(SHARED, {});

            module.exports = store;

            /***/
          },

          /***/ c8ba: /***/ function (module, exports) {
            var g;

            // This works in non-strict mode
            g = (function () {
              return this;
            })();

            try {
              // This works if eval is allowed (see CSP)
              g = g || new Function("return this")();
            } catch (e) {
              // This works if the window reference is available
              if (typeof window === "object") g = window;
            }

            // g can still be undefined, but nothing to do about it...
            // We return undefined, instead of nothing here, so it's
            // easier to handle this case. if(!global) { ...}

            module.exports = g;

            /***/
          },

          /***/ ca84: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var toIndexedObject = __webpack_require__("fc6a");
            var indexOf = __webpack_require__("4d64").indexOf;
            var hiddenKeys = __webpack_require__("d012");

            module.exports = function (object, names) {
              var O = toIndexedObject(object);
              var i = 0;
              var result = [];
              var key;
              for (key in O)
                !has(hiddenKeys, key) && has(O, key) && result.push(key);
              // Don't enum bug & hidden keys
              while (names.length > i)
                if (has(O, (key = names[i++]))) {
                  ~indexOf(result, key) || result.push(key);
                }
              return result;
            };

            /***/
          },

          /***/ cc12: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var isObject = __webpack_require__("861d");

            var document = global.document;
            // typeof document.createElement is 'object' in old IE
            var EXISTS = isObject(document) && isObject(document.createElement);

            module.exports = function (it) {
              return EXISTS ? document.createElement(it) : {};
            };

            /***/
          },

          /***/ ce4e: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var createNonEnumerableProperty = __webpack_require__("9112");

            module.exports = function (key, value) {
              try {
                createNonEnumerableProperty(global, key, value);
              } catch (error) {
                global[key] = value;
              }
              return value;
            };

            /***/
          },

          /***/ d012: /***/ function (module, exports) {
            module.exports = {};

            /***/
          },

          /***/ d039: /***/ function (module, exports) {
            module.exports = function (exec) {
              try {
                return !!exec();
              } catch (error) {
                return true;
              }
            };

            /***/
          },

          /***/ d066: /***/ function (module, exports, __webpack_require__) {
            var path = __webpack_require__("428f");
            var global = __webpack_require__("da84");

            var aFunction = function (variable) {
              return typeof variable == "function" ? variable : undefined;
            };

            module.exports = function (namespace, method) {
              return arguments.length < 2
                ? aFunction(path[namespace]) || aFunction(global[namespace])
                : (path[namespace] && path[namespace][method]) ||
                    (global[namespace] && global[namespace][method]);
            };

            /***/
          },

          /***/ d1e7: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

            // Nashorn ~ JDK8 bug
            var NASHORN_BUG =
              getOwnPropertyDescriptor &&
              !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

            // `Object.prototype.propertyIsEnumerable` method implementation
            // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
            exports.f = NASHORN_BUG
              ? function propertyIsEnumerable(V) {
                  var descriptor = getOwnPropertyDescriptor(this, V);
                  return !!descriptor && descriptor.enumerable;
                }
              : nativePropertyIsEnumerable;

            /***/
          },

          /***/ d2bb: /***/ function (module, exports, __webpack_require__) {
            var anObject = __webpack_require__("825a");
            var aPossiblePrototype = __webpack_require__("3bbe");

            // `Object.setPrototypeOf` method
            // https://tc39.github.io/ecma262/#sec-object.setprototypeof
            // Works with __proto__ only. Old v8 can't work with null proto objects.
            /* eslint-disable no-proto */
            module.exports =
              Object.setPrototypeOf ||
              ("__proto__" in {}
                ? (function () {
                    var CORRECT_SETTER = false;
                    var test = {};
                    var setter;
                    try {
                      setter = Object.getOwnPropertyDescriptor(
                        Object.prototype,
                        "__proto__"
                      ).set;
                      setter.call(test, []);
                      CORRECT_SETTER = test instanceof Array;
                    } catch (error) {
                      /* empty */
                    }
                    return function setPrototypeOf(O, proto) {
                      anObject(O);
                      aPossiblePrototype(proto);
                      if (CORRECT_SETTER) setter.call(O, proto);
                      else O.__proto__ = proto;
                      return O;
                    };
                  })()
                : undefined);

            /***/
          },

          /***/ d3b7: /***/ function (module, exports, __webpack_require__) {
            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var redefine = __webpack_require__("6eeb");
            var toString = __webpack_require__("b041");

            // `Object.prototype.toString` method
            // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
            if (!TO_STRING_TAG_SUPPORT) {
              redefine(Object.prototype, "toString", toString, {
                unsafe: true,
              });
            }

            /***/
          },

          /***/ d44e: /***/ function (module, exports, __webpack_require__) {
            var defineProperty = __webpack_require__("9bf2").f;
            var has = __webpack_require__("5135");
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");

            module.exports = function (it, TAG, STATIC) {
              if (
                it &&
                !has((it = STATIC ? it : it.prototype), TO_STRING_TAG)
              ) {
                defineProperty(it, TO_STRING_TAG, {
                  configurable: true,
                  value: TAG,
                });
              }
            };

            /***/
          },

          /***/ da84: /***/ function (module, exports, __webpack_require__) {
            /* WEBPACK VAR INJECTION */ (function (global) {
              var check = function (it) {
                return it && it.Math == Math && it;
              };

              // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
              module.exports =
                // eslint-disable-next-line no-undef
                check(typeof globalThis == "object" && globalThis) ||
                check(typeof window == "object" && window) ||
                check(typeof self == "object" && self) ||
                check(typeof global == "object" && global) ||
                // eslint-disable-next-line no-new-func
                (function () {
                  return this;
                })() ||
                Function("return this")();

              /* WEBPACK VAR INJECTION */
            }.call(this, __webpack_require__("c8ba")));

            /***/
          },

          /***/ ddb0: /***/ function (module, exports, __webpack_require__) {
            var global = __webpack_require__("da84");
            var DOMIterables = __webpack_require__("fdbc");
            var ArrayIteratorMethods = __webpack_require__("e260");
            var createNonEnumerableProperty = __webpack_require__("9112");
            var wellKnownSymbol = __webpack_require__("b622");

            var ITERATOR = wellKnownSymbol("iterator");
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var ArrayValues = ArrayIteratorMethods.values;

            for (var COLLECTION_NAME in DOMIterables) {
              var Collection = global[COLLECTION_NAME];
              var CollectionPrototype = Collection && Collection.prototype;
              if (CollectionPrototype) {
                // some Chrome versions have non-configurable methods on DOMTokenList
                if (CollectionPrototype[ITERATOR] !== ArrayValues)
                  try {
                    createNonEnumerableProperty(
                      CollectionPrototype,
                      ITERATOR,
                      ArrayValues
                    );
                  } catch (error) {
                    CollectionPrototype[ITERATOR] = ArrayValues;
                  }
                if (!CollectionPrototype[TO_STRING_TAG]) {
                  createNonEnumerableProperty(
                    CollectionPrototype,
                    TO_STRING_TAG,
                    COLLECTION_NAME
                  );
                }
                if (DOMIterables[COLLECTION_NAME])
                  for (var METHOD_NAME in ArrayIteratorMethods) {
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (
                      CollectionPrototype[METHOD_NAME] !==
                      ArrayIteratorMethods[METHOD_NAME]
                    )
                      try {
                        createNonEnumerableProperty(
                          CollectionPrototype,
                          METHOD_NAME,
                          ArrayIteratorMethods[METHOD_NAME]
                        );
                      } catch (error) {
                        CollectionPrototype[METHOD_NAME] =
                          ArrayIteratorMethods[METHOD_NAME];
                      }
                  }
              }
            }

            /***/
          },

          /***/ df75: /***/ function (module, exports, __webpack_require__) {
            var internalObjectKeys = __webpack_require__("ca84");
            var enumBugKeys = __webpack_require__("7839");

            // `Object.keys` method
            // https://tc39.github.io/ecma262/#sec-object.keys
            module.exports =
              Object.keys ||
              function keys(O) {
                return internalObjectKeys(O, enumBugKeys);
              };

            /***/
          },

          /***/ e163: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var toObject = __webpack_require__("7b0b");
            var sharedKey = __webpack_require__("f772");
            var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

            var IE_PROTO = sharedKey("IE_PROTO");
            var ObjectPrototype = Object.prototype;

            // `Object.getPrototypeOf` method
            // https://tc39.github.io/ecma262/#sec-object.getprototypeof
            module.exports = CORRECT_PROTOTYPE_GETTER
              ? Object.getPrototypeOf
              : function (O) {
                  O = toObject(O);
                  if (has(O, IE_PROTO)) return O[IE_PROTO];
                  if (
                    typeof O.constructor == "function" &&
                    O instanceof O.constructor
                  ) {
                    return O.constructor.prototype;
                  }
                  return O instanceof Object ? ObjectPrototype : null;
                };

            /***/
          },

          /***/ e177: /***/ function (module, exports, __webpack_require__) {
            var fails = __webpack_require__("d039");

            module.exports = !fails(function () {
              function F() {
                /* empty */
              }
              F.prototype.constructor = null;
              return Object.getPrototypeOf(new F()) !== F.prototype;
            });

            /***/
          },

          /***/ e260: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var toIndexedObject = __webpack_require__("fc6a");
            var addToUnscopables = __webpack_require__("44d2");
            var Iterators = __webpack_require__("3f8c");
            var InternalStateModule = __webpack_require__("69f3");
            var defineIterator = __webpack_require__("7dd0");

            var ARRAY_ITERATOR = "Array Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(
              ARRAY_ITERATOR
            );

            // `Array.prototype.entries` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.entries
            // `Array.prototype.keys` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.keys
            // `Array.prototype.values` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.values
            // `Array.prototype[@@iterator]` method
            // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
            // `CreateArrayIterator` internal method
            // https://tc39.github.io/ecma262/#sec-createarrayiterator
            module.exports = defineIterator(
              Array,
              "Array",
              function (iterated, kind) {
                setInternalState(this, {
                  type: ARRAY_ITERATOR,
                  target: toIndexedObject(iterated), // target
                  index: 0, // next index
                  kind: kind, // kind
                });
                // `%ArrayIteratorPrototype%.next` method
                // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
              },
              function () {
                var state = getInternalState(this);
                var target = state.target;
                var kind = state.kind;
                var index = state.index++;
                if (!target || index >= target.length) {
                  state.target = undefined;
                  return { value: undefined, done: true };
                }
                if (kind == "keys") return { value: index, done: false };
                if (kind == "values")
                  return { value: target[index], done: false };
                return { value: [index, target[index]], done: false };
              },
              "values"
            );

            // argumentsList[@@iterator] is %ArrayProto_values%
            // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
            // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
            Iterators.Arguments = Iterators.Array;

            // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables("keys");
            addToUnscopables("values");
            addToUnscopables("entries");

            /***/
          },

          /***/ e893: /***/ function (module, exports, __webpack_require__) {
            var has = __webpack_require__("5135");
            var ownKeys = __webpack_require__("56ef");
            var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
            var definePropertyModule = __webpack_require__("9bf2");

            module.exports = function (target, source) {
              var keys = ownKeys(source);
              var defineProperty = definePropertyModule.f;
              var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (!has(target, key))
                  defineProperty(
                    target,
                    key,
                    getOwnPropertyDescriptor(source, key)
                  );
              }
            };

            /***/
          },

          /***/ e8b5: /***/ function (module, exports, __webpack_require__) {
            var classof = __webpack_require__("c6b6");

            // `IsArray` abstract operation
            // https://tc39.github.io/ecma262/#sec-isarray
            module.exports =
              Array.isArray ||
              function isArray(arg) {
                return classof(arg) == "Array";
              };

            /***/
          },

          /***/ f5df: /***/ function (module, exports, __webpack_require__) {
            var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
            var classofRaw = __webpack_require__("c6b6");
            var wellKnownSymbol = __webpack_require__("b622");

            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            // ES3 wrong here
            var CORRECT_ARGUMENTS =
              classofRaw(
                (function () {
                  return arguments;
                })()
              ) == "Arguments";

            // fallback for IE11 Script Access Denied error
            var tryGet = function (it, key) {
              try {
                return it[key];
              } catch (error) {
                /* empty */
              }
            };

            // getting tag from ES6+ `Object.prototype.toString`
            module.exports = TO_STRING_TAG_SUPPORT
              ? classofRaw
              : function (it) {
                  var O, tag, result;
                  return it === undefined
                    ? "Undefined"
                    : it === null
                    ? "Null"
                    : // @@toStringTag case
                    typeof (tag = tryGet((O = Object(it)), TO_STRING_TAG)) ==
                      "string"
                    ? tag
                    : // builtinTag case
                    CORRECT_ARGUMENTS
                    ? classofRaw(O)
                    : // ES3 arguments fallback
                    (result = classofRaw(O)) == "Object" &&
                      typeof O.callee == "function"
                    ? "Arguments"
                    : result;
                };

            /***/
          },

          /***/ f772: /***/ function (module, exports, __webpack_require__) {
            var shared = __webpack_require__("5692");
            var uid = __webpack_require__("90e3");

            var keys = shared("keys");

            module.exports = function (key) {
              return keys[key] || (keys[key] = uid(key));
            };

            /***/
          },

          /***/ fb15: /***/ function (
            module,
            __webpack_exports__,
            __webpack_require__
          ) {
            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);

            // EXPORTS
            __webpack_require__.d(
              __webpack_exports__,
              "SortedTable",
              function () {
                return /* reexport */ SortedTable;
              }
            );
            __webpack_require__.d(__webpack_exports__, "SortLink", function () {
              return /* reexport */ SortLink;
            });

            // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
            // This file is imported into lib/wc client bundles.

            if (typeof window !== "undefined") {
              var currentScript = window.document.currentScript;
              if (true) {
                var getCurrentScript = __webpack_require__("8875");
                currentScript = getCurrentScript();

                // for backward compatibility, because previously we directly included the polyfill
                if (!("currentScript" in document)) {
                  Object.defineProperty(document, "currentScript", {
                    get: getCurrentScript,
                  });
                }
              }

              var src =
                currentScript &&
                currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
              if (src) {
                __webpack_require__.p = src[1]; // eslint-disable-line
              }
            }

            // Indicate to webpack that this file can be concatenated
            /* harmony default export */ var setPublicPath = null;

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
            var es_function_name = __webpack_require__("b0c0");

            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4c8b65f1-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortedTable.vue?vue&type=template&id=7478bb7f&
            var render = function () {
              var _vm = this;
              var _h = _vm.$createElement;
              var _c = _vm._self._c || _h;
              return _c(
                "table",
                { staticClass: "table" },
                [
                  _vm._t("default"),
                  _vm._t("head"),
                  _vm._t("body", null, { values: _vm.sortedValues }),
                  _vm._t("foot"),
                ],
                2
              );
            };
            var staticRenderFns = [];

            // CONCATENATED MODULE: ./src/components/SortedTable.vue?vue&type=template&id=7478bb7f&

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
            var es_array_iterator = __webpack_require__("e260");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
            var es_array_slice = __webpack_require__("fb6a");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
            var es_object_to_string = __webpack_require__("d3b7");

            // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
            var web_dom_collections_iterator = __webpack_require__("ddb0");

            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortedTable.vue?vue&type=script&lang=js&

            //
            //
            //
            //
            //
            //
            //
            //
            //
            /* harmony default export */ var SortedTablevue_type_script_lang_js_ = {
              name: "SortedTable",
              provide: function provide() {
                return {
                  getCurrentSort: this.getCurrentSort,
                  getSortIcon: this.getSortIcon,
                  sortBy: this.sortBy,
                };
              },
              props: {
                values: {
                  type: Array,
                  required: true,
                  default: null,
                },
                dir: {
                  type: String,
                  default: "asc",
                },
                sort: {
                  type: String,
                  default: "id",
                },
                ascIcon: {
                  type: String,
                  default: "",
                },
                descIcon: {
                  type: String,
                  default: "",
                },
                onSort: {
                  type: null,
                  default: null,
                },
              },
              data: function data() {
                return {
                  currentDir: this.dir,
                  currentSort: this.sort,
                };
              },
              computed: {
                get: function get() {
                  if (this.$_) {
                    return this.$_.get;
                  } else {
                    return this.getValue;
                  }
                },
                sortedValues: function sortedValues() {
                  if (this.onSort) {
                    return this.values;
                  } else {
                    return this.values.slice().sort(
                      function (a, b) {
                        var modifier = 1;

                        if (this.currentDir === "desc") {
                          modifier = -1;
                        }

                        if (
                          this.get(a, this.currentSort) <
                          this.get(b, this.currentSort)
                        ) {
                          return -1 * modifier;
                        }

                        if (
                          this.get(a, this.currentSort) >
                          this.get(b, this.currentSort)
                        ) {
                          return 1 * modifier;
                        }

                        return 0;
                      }.bind(this)
                    );
                  }
                },
                asc: function asc() {
                  if (this.ascIcon == "") {
                    return this.$sortedTable.ascIcon;
                  } else {
                    return this.ascIcon;
                  }
                },
                desc: function desc() {
                  if (this.descIcon == "") {
                    return this.$sortedTable.descIcon;
                  } else {
                    return this.descIcon;
                  }
                },
              },
              methods: {
                getValue: function getValue(array, key) {
                  return array[key];
                },
                getCurrentSort: function getCurrentSort() {
                  return this.currentSort;
                },
                getSortIcon: function getSortIcon() {
                  if (this.currentDir === "asc") {
                    return this.asc;
                  } else {
                    return this.desc;
                  }
                },
                sortBy: function sortBy(s) {
                  //if s == current sort, reverse
                  if (s === this.currentSort) {
                    this.currentDir =
                      this.currentDir === "asc" ? "desc" : "asc";
                  }

                  this.currentSort = s;
                  this.$emit("sort-table", this.currentSort, this.currentDir);

                  if (this.onSort) {
                    this.onSort(this.currentSort, this.currentDir);
                  }
                },
              },
            };
            // CONCATENATED MODULE: ./src/components/SortedTable.vue?vue&type=script&lang=js&
            /* harmony default export */ var components_SortedTablevue_type_script_lang_js_ = SortedTablevue_type_script_lang_js_;
            // CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
            /* globals __VUE_SSR_CONTEXT__ */

            // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
            // This module is a runtime utility for cleaner component module output and will
            // be included in the final webpack user bundle.

            function normalizeComponent(
              scriptExports,
              render,
              staticRenderFns,
              functionalTemplate,
              injectStyles,
              scopeId,
              moduleIdentifier /* server only */,
              shadowMode /* vue-cli only */
            ) {
              // Vue.extend constructor export interop
              var options =
                typeof scriptExports === "function"
                  ? scriptExports.options
                  : scriptExports;

              // render functions
              if (render) {
                options.render = render;
                options.staticRenderFns = staticRenderFns;
                options._compiled = true;
              }

              // functional template
              if (functionalTemplate) {
                options.functional = true;
              }

              // scopedId
              if (scopeId) {
                options._scopeId = "data-v-" + scopeId;
              }

              var hook;
              if (moduleIdentifier) {
                // server build
                hook = function (context) {
                  // 2.3 injection
                  context =
                    context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent &&
                      this.parent.$vnode &&
                      this.parent.$vnode.ssrContext); // functional
                  // 2.2 with runInNewContext: true
                  if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                    context = __VUE_SSR_CONTEXT__;
                  }
                  // inject component styles
                  if (injectStyles) {
                    injectStyles.call(this, context);
                  }
                  // register component module identifier for async chunk inferrence
                  if (context && context._registeredComponents) {
                    context._registeredComponents.add(moduleIdentifier);
                  }
                };
                // used by ssr in case component is cached and beforeCreate
                // never gets called
                options._ssrRegister = hook;
              } else if (injectStyles) {
                hook = shadowMode
                  ? function () {
                      injectStyles.call(
                        this,
                        (options.functional ? this.parent : this).$root.$options
                          .shadowRoot
                      );
                    }
                  : injectStyles;
              }

              if (hook) {
                if (options.functional) {
                  // for template-only hot-reload because in that case the render fn doesn't
                  // go through the normalizer
                  options._injectStyles = hook;
                  // register for functional component in vue file
                  var originalRender = options.render;
                  options.render = function renderWithStyleInjection(
                    h,
                    context
                  ) {
                    hook.call(context);
                    return originalRender(h, context);
                  };
                } else {
                  // inject component registration as beforeCreate hook
                  var existing = options.beforeCreate;
                  options.beforeCreate = existing
                    ? [].concat(existing, hook)
                    : [hook];
                }
              }

              return {
                exports: scriptExports,
                options: options,
              };
            }

            // CONCATENATED MODULE: ./src/components/SortedTable.vue

            /* normalize component */

            var component = normalizeComponent(
              components_SortedTablevue_type_script_lang_js_,
              render,
              staticRenderFns,
              false,
              null,
              null,
              null
            );

            /* harmony default export */ var SortedTable = component.exports;
            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"4c8b65f1-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortLink.vue?vue&type=template&id=59b23c77&
            var SortLinkvue_type_template_id_59b23c77_render = function () {
              var _vm = this;
              var _h = _vm.$createElement;
              var _c = _vm._self._c || _h;
              return _c(
                "a",
                {
                  attrs: { href: "#" },
                  on: {
                    click: function ($event) {
                      $event.preventDefault();
                      return _vm.sortBy(_vm.name);
                    },
                  },
                },
                [
                  _vm._t("default", [_vm._v(_vm._s(_vm.name))]),
                  _vm._t("icon", [
                    _vm.getCurrentSort() == _vm.name
                      ? _c("span", {
                          domProps: { innerHTML: _vm._s(_vm.getSortIcon()) },
                        })
                      : _vm._e(),
                  ]),
                ],
                2
              );
            };
            var SortLinkvue_type_template_id_59b23c77_staticRenderFns = [];

            // CONCATENATED MODULE: ./src/components/SortLink.vue?vue&type=template&id=59b23c77&

            // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortLink.vue?vue&type=script&lang=js&
            //
            //
            //
            //
            //
            //
            //
            //
            //
            /* harmony default export */ var SortLinkvue_type_script_lang_js_ = {
              name: "SortLink",
              inject: ["getCurrentSort", "getSortIcon", "sortBy"],
              props: {
                name: {
                  type: String,
                  required: true,
                  default: "",
                },
              },
            };
            // CONCATENATED MODULE: ./src/components/SortLink.vue?vue&type=script&lang=js&
            /* harmony default export */ var components_SortLinkvue_type_script_lang_js_ = SortLinkvue_type_script_lang_js_;
            // CONCATENATED MODULE: ./src/components/SortLink.vue

            /* normalize component */

            var SortLink_component = normalizeComponent(
              components_SortLinkvue_type_script_lang_js_,
              SortLinkvue_type_template_id_59b23c77_render,
              SortLinkvue_type_template_id_59b23c77_staticRenderFns,
              false,
              null,
              null,
              null
            );

            /* harmony default export */ var SortLink =
              SortLink_component.exports;
            // CONCATENATED MODULE: ./src/index.js

            var SortedTablePlugin = {
              install: function install(Vue, config) {
                Vue.component(SortedTable.name, SortedTable);
                Vue.component(SortLink.name, SortLink);

                if (config) {
                  Vue.prototype.$sortedTable = config;
                } else {
                  Vue.prototype.$sortedTable = {};
                }

                if (!Vue.prototype.$sortedTable.ascIcon) {
                  Vue.prototype.$sortedTable.ascIcon = "<span> ▲</span>";
                }

                if (!Vue.prototype.$sortedTable.descIcon) {
                  Vue.prototype.$sortedTable.descIcon = "<span> ▼</span>";
                }

                if (
                  !Vue.prototype.$_ &&
                  typeof window !== "undefined" &&
                  window._
                ) {
                  Vue.prototype.$_ = window._;
                }
              },
            }; // Automatic installation if Vue has been added to the global scope.

            if (typeof window !== "undefined" && window.Vue) {
              window.Vue.use(SortedTablePlugin);
            }

            /* harmony default export */ var src_0 = SortedTablePlugin;

            // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

            /* harmony default export */ var entry_lib = (__webpack_exports__[
              "default"
            ] = src_0);

            /***/
          },

          /***/ fb6a: /***/ function (module, exports, __webpack_require__) {
            "use strict";

            var $ = __webpack_require__("23e7");
            var isObject = __webpack_require__("861d");
            var isArray = __webpack_require__("e8b5");
            var toAbsoluteIndex = __webpack_require__("23cb");
            var toLength = __webpack_require__("50c4");
            var toIndexedObject = __webpack_require__("fc6a");
            var createProperty = __webpack_require__("8418");
            var wellKnownSymbol = __webpack_require__("b622");
            var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
            var arrayMethodUsesToLength = __webpack_require__("ae40");

            var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
            var USES_TO_LENGTH = arrayMethodUsesToLength("slice", {
              ACCESSORS: true,
              0: 0,
              1: 2,
            });

            var SPECIES = wellKnownSymbol("species");
            var nativeSlice = [].slice;
            var max = Math.max;

            // `Array.prototype.slice` method
            // https://tc39.github.io/ecma262/#sec-array.prototype.slice
            // fallback for not array-like ES3 strings and DOM objects
            $(
              {
                target: "Array",
                proto: true,
                forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH,
              },
              {
                slice: function slice(start, end) {
                  var O = toIndexedObject(this);
                  var length = toLength(O.length);
                  var k = toAbsoluteIndex(start, length);
                  var fin = toAbsoluteIndex(
                    end === undefined ? length : end,
                    length
                  );
                  // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                  var Constructor, result, n;
                  if (isArray(O)) {
                    Constructor = O.constructor;
                    // cross-realm fallback
                    if (
                      typeof Constructor == "function" &&
                      (Constructor === Array || isArray(Constructor.prototype))
                    ) {
                      Constructor = undefined;
                    } else if (isObject(Constructor)) {
                      Constructor = Constructor[SPECIES];
                      if (Constructor === null) Constructor = undefined;
                    }
                    if (Constructor === Array || Constructor === undefined) {
                      return nativeSlice.call(O, k, fin);
                    }
                  }
                  result = new (Constructor === undefined
                    ? Array
                    : Constructor)(max(fin - k, 0));
                  for (n = 0; k < fin; k++, n++)
                    if (k in O) createProperty(result, n, O[k]);
                  result.length = n;
                  return result;
                },
              }
            );

            /***/
          },

          /***/ fc6a: /***/ function (module, exports, __webpack_require__) {
            // toObject with fallback for non-array-like ES3 strings
            var IndexedObject = __webpack_require__("44ad");
            var requireObjectCoercible = __webpack_require__("1d80");

            module.exports = function (it) {
              return IndexedObject(requireObjectCoercible(it));
            };

            /***/
          },

          /***/ fdbc: /***/ function (module, exports) {
            // iterable DOM collections
            // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
            module.exports = {
              CSSRuleList: 0,
              CSSStyleDeclaration: 0,
              CSSValueList: 0,
              ClientRectList: 0,
              DOMRectList: 0,
              DOMStringList: 0,
              DOMTokenList: 1,
              DataTransferItemList: 0,
              FileList: 0,
              HTMLAllCollection: 0,
              HTMLCollection: 0,
              HTMLFormElement: 0,
              HTMLSelectElement: 0,
              MediaList: 0,
              MimeTypeArray: 0,
              NamedNodeMap: 0,
              NodeList: 1,
              PaintRequestList: 0,
              Plugin: 0,
              PluginArray: 0,
              SVGLengthList: 0,
              SVGNumberList: 0,
              SVGPathSegList: 0,
              SVGPointList: 0,
              SVGStringList: 0,
              SVGTransformList: 0,
              SourceBufferList: 0,
              StyleSheetList: 0,
              TextTrackCueList: 0,
              TextTrackList: 0,
              TouchList: 0,
            };

            /***/
          },

          /***/ fdbf: /***/ function (module, exports, __webpack_require__) {
            var NATIVE_SYMBOL = __webpack_require__("4930");

            module.exports =
              NATIVE_SYMBOL &&
              // eslint-disable-next-line no-undef
              !Symbol.sham &&
              // eslint-disable-next-line no-undef
              typeof Symbol.iterator == "symbol";

            /***/
          },

          /******/
        }
      );
      //# sourceMappingURL=vue-sorted-table.common.js.map

      /***/
    },

    /***/ ad71: /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (global, process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        /*<replacement>*/

        var pna = __webpack_require__("966d");
        /*</replacement>*/

        module.exports = Readable;

        /*<replacement>*/
        var isArray = __webpack_require__("e3db");
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;

        /*<replacement>*/
        var EE = __webpack_require__("faa1").EventEmitter;

        var EElistenerCount = function (emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = __webpack_require__("429b");
        /*</replacement>*/

        /*<replacement>*/

        var Buffer = __webpack_require__("8707").Buffer;
        var OurUint8Array = global.Uint8Array || function () {};
        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        /*</replacement>*/

        /*<replacement>*/
        var util = Object.create(__webpack_require__("3a7c"));
        util.inherits = __webpack_require__("3fb5");
        /*</replacement>*/

        /*<replacement>*/
        var debugUtil = __webpack_require__(0);
        var debug = void 0;
        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog("stream");
        } else {
          debug = function () {};
        }
        /*</replacement>*/

        var BufferList = __webpack_require__("5e1a");
        var destroyImpl = __webpack_require__("4681");
        var StringDecoder;

        util.inherits(Readable, Stream);

        var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === "function")
            return emitter.prependListener(event, fn);

          // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.
          if (!emitter._events || !emitter._events[event])
            emitter.on(event, fn);
          else if (isArray(emitter._events[event]))
            emitter._events[event].unshift(fn);
          else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || __webpack_require__("b19a");

          options = options || {};

          // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.
          var isDuplex = stream instanceof Duplex;

          // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away
          this.objectMode = !!options.objectMode;

          if (isDuplex)
            this.objectMode = this.objectMode || !!options.readableObjectMode;

          // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"
          var hwm = options.highWaterMark;
          var readableHwm = options.readableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;

          if (hwm || hwm === 0) this.highWaterMark = hwm;
          else if (isDuplex && (readableHwm || readableHwm === 0))
            this.highWaterMark = readableHwm;
          else this.highWaterMark = defaultHwm;

          // cast to ints.
          this.highWaterMark = Math.floor(this.highWaterMark);

          // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()
          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false;

          // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.
          this.sync = true;

          // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.
          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;

          // has it been destroyed
          this.destroyed = false;

          // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.
          this.defaultEncoding = options.defaultEncoding || "utf8";

          // the number of writers that are awaiting a drain event in .pipe()s
          this.awaitDrain = 0;

          // if true, a maybeReadMore has been scheduled
          this.readingMore = false;

          this.decoder = null;
          this.encoding = null;
          if (options.encoding) {
            if (!StringDecoder)
              StringDecoder = __webpack_require__("7d72").StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || __webpack_require__("b19a");

          if (!(this instanceof Readable)) return new Readable(options);

          this._readableState = new ReadableState(options, this);

          // legacy
          this.readable = true;

          if (options) {
            if (typeof options.read === "function") this._read = options.read;

            if (typeof options.destroy === "function")
              this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, "destroyed", {
          get: function () {
            if (this._readableState === undefined) {
              return false;
            }
            return this._readableState.destroyed;
          },
          set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value;
          },
        });

        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;
        Readable.prototype._destroy = function (err, cb) {
          this.push(null);
          cb(err);
        };

        // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.
        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === "string") {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
              }
              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        };

        // Unshift should *always* be something directly out of read()
        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(
          stream,
          chunk,
          encoding,
          addToFront,
          skipChunkCheck
        ) {
          var state = stream._readableState;
          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);
            if (er) {
              stream.emit("error", er);
            } else if (state.objectMode || (chunk && chunk.length > 0)) {
              if (
                typeof chunk !== "string" &&
                !state.objectMode &&
                Object.getPrototypeOf(chunk) !== Buffer.prototype
              ) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted)
                  stream.emit(
                    "error",
                    new Error("stream.unshift() after end event")
                  );
                else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                stream.emit("error", new Error("stream.push() after EOF"));
              } else {
                state.reading = false;
                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0)
                    addChunk(stream, state, chunk, false);
                  else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
            }
          }

          return needMoreData(state);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit("data", chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);
            else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;
          if (
            !_isUint8Array(chunk) &&
            typeof chunk !== "string" &&
            chunk !== undefined &&
            !state.objectMode
          ) {
            er = new TypeError("Invalid non-string/buffer chunk");
          }
          return er;
        }

        // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.
        function needMoreData(state) {
          return (
            !state.ended &&
            (state.needReadable ||
              state.length < state.highWaterMark ||
              state.length === 0)
          );
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        };

        // backwards compatibility.
        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder)
            StringDecoder = __webpack_require__("7d72").StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        };

        // Don't raise the hwm > 8MB
        var MAX_HWM = 0x800000;
        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }
          return n;
        }

        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function howMuchToRead(n, state) {
          if (n <= 0 || (state.length === 0 && state.ended)) return 0;
          if (state.objectMode) return 1;
          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length)
              return state.buffer.head.data.length;
            else return state.length;
          }
          // If we're asking for more than the current hwm, then raise the hwm.
          if (n > state.highWaterMark)
            state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n;
          // Don't have enough
          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }
          return state.length;
        }

        // you can override either this method, or the async _read(n) below.
        Readable.prototype.read = function (n) {
          debug("read", n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;

          if (n !== 0) state.emittedReadable = false;

          // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.
          if (
            n === 0 &&
            state.needReadable &&
            (state.length >= state.highWaterMark || state.ended)
          ) {
            debug("read: emitReadable", state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);
            else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state);

          // if we've ended, and we're now clear, then finish it up.
          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          }

          // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.

          // if we need a readable event, then we need to do some reading.
          var doRead = state.needReadable;
          debug("need readable", doRead);

          // if we currently have less than the highWaterMark, then also read some
          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug("length less than watermark", doRead);
          }

          // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.
          if (state.ended || state.reading) {
            doRead = false;
            debug("reading or ended", doRead);
          } else if (doRead) {
            debug("do read");
            state.reading = true;
            state.sync = true;
            // if the length is currently zero, then we *need* a readable event.
            if (state.length === 0) state.needReadable = true;
            // call internal read method
            this._read(state.highWaterMark);
            state.sync = false;
            // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.
            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);
          else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true;

            // If we tried to read() past the EOF, then emit end on the next tick.
            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit("data", ret);

          return ret;
        };

        function onEofChunk(stream, state) {
          if (state.ended) return;
          if (state.decoder) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }
          state.ended = true;

          // emit 'readable' now to make sure it gets picked up.
          emitReadable(stream);
        }

        // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.
        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;
          if (!state.emittedReadable) {
            debug("emitReadable", state.flowing);
            state.emittedReadable = true;
            if (state.sync) pna.nextTick(emitReadable_, stream);
            else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug("emit readable");
          stream.emit("readable");
          flow(stream);
        }

        // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.
        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            pna.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;
          while (
            !state.reading &&
            !state.flowing &&
            !state.ended &&
            state.length < state.highWaterMark
          ) {
            debug("maybeReadMore read 0");
            stream.read(0);
            if (len === state.length)
              // didn't get any data, stop spinning.
              break;
            else len = state.length;
          }
          state.readingMore = false;
        }

        // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.
        Readable.prototype._read = function (n) {
          this.emit("error", new Error("_read() is not implemented"));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
          }
          state.pipesCount += 1;
          debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);

          var doEnd =
            (!pipeOpts || pipeOpts.end !== false) &&
            dest !== process.stdout &&
            dest !== process.stderr;

          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) pna.nextTick(endFn);
          else src.once("end", endFn);

          dest.on("unpipe", onunpipe);
          function onunpipe(readable, unpipeInfo) {
            debug("onunpipe");
            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug("onend");
            dest.end();
          }

          // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.
          var ondrain = pipeOnDrain(src);
          dest.on("drain", ondrain);

          var cleanedUp = false;
          function cleanup() {
            debug("cleanup");
            // cleanup event handlers once the pipe is broken
            dest.removeListener("close", onclose);
            dest.removeListener("finish", onfinish);
            dest.removeListener("drain", ondrain);
            dest.removeListener("error", onerror);
            dest.removeListener("unpipe", onunpipe);
            src.removeListener("end", onend);
            src.removeListener("end", unpipe);
            src.removeListener("data", ondata);

            cleanedUp = true;

            // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.
            if (
              state.awaitDrain &&
              (!dest._writableState || dest._writableState.needDrain)
            )
              ondrain();
          }

          // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.
          var increasedAwaitDrain = false;
          src.on("data", ondata);
          function ondata(chunk) {
            debug("ondata");
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);
            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if (
                ((state.pipesCount === 1 && state.pipes === dest) ||
                  (state.pipesCount > 1 &&
                    indexOf(state.pipes, dest) !== -1)) &&
                !cleanedUp
              ) {
                debug(
                  "false write response, pause",
                  src._readableState.awaitDrain
                );
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }
              src.pause();
            }
          }

          // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.
          function onerror(er) {
            debug("onerror", er);
            unpipe();
            dest.removeListener("error", onerror);
            if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
          }

          // Make sure our error handler is attached before userland ones.
          prependListener(dest, "error", onerror);

          // Both close and finish should trigger unpipe, but only once.
          function onclose() {
            dest.removeListener("finish", onfinish);
            unpipe();
          }
          dest.once("close", onclose);
          function onfinish() {
            debug("onfinish");
            dest.removeListener("close", onclose);
            unpipe();
          }
          dest.once("finish", onfinish);

          function unpipe() {
            debug("unpipe");
            src.unpipe(dest);
          }

          // tell the dest that it's being piped to
          dest.emit("pipe", src);

          // start the flow if it hasn't been started already.
          if (!state.flowing) {
            debug("pipe resume");
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug("pipeOnDrain", state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;
            if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = { hasUnpiped: false };

          // if we're not piping anywhere, then do nothing.
          if (state.pipesCount === 0) return this;

          // just one destination.  most common case.
          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;

            if (!dest) dest = state.pipes;

            // got a match.
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit("unpipe", this, unpipeInfo);
            return this;
          }

          // slow case. multiple pipe destinations.

          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit("unpipe", this, unpipeInfo);
            }
            return this;
          }

          // try to find the right one.
          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;

          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];

          dest.emit("unpipe", this, unpipeInfo);

          return this;
        };

        // set up data events if they are asked for
        // Ensure readable listeners eventually get something
        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === "data") {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === "readable") {
            var state = this._readableState;
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;
              if (!state.reading) {
                pna.nextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this);
              }
            }
          }

          return res;
        };
        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug("readable nexttick read 0");
          self.read(0);
        }

        // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.
        Readable.prototype.resume = function () {
          var state = this._readableState;
          if (!state.flowing) {
            debug("resume");
            state.flowing = true;
            resume(this, state);
          }
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            pna.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug("resume read 0");
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit("resume");
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug("call pause flowing=%j", this._readableState.flowing);
          if (false !== this._readableState.flowing) {
            debug("pause");
            this._readableState.flowing = false;
            this.emit("pause");
          }
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug("flow", state.flowing);
          while (state.flowing && stream.read() !== null) {}
        }

        // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.
        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;

          stream.on("end", function () {
            debug("wrapped end");
            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });

          stream.on("data", function (chunk) {
            debug("wrapped data");
            if (state.decoder) chunk = state.decoder.write(chunk);

            // don't skip over falsy values in objectMode
            if (state.objectMode && (chunk === null || chunk === undefined))
              return;
            else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);
            if (!ret) {
              paused = true;
              stream.pause();
            }
          });

          // proxy all the other methods.
          // important when wrapping filters and duplexes.
          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === "function") {
              this[i] = (function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              })(i);
            }
          }

          // proxy certain important events.
          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          }

          // when we try to consume some more bytes, simply unpause the
          // underlying stream.
          this._read = function (n) {
            debug("wrapped _read", n);
            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function () {
            return this._readableState.highWaterMark;
          },
        });

        // exposed for testing purposes only.
        Readable._fromList = fromList;

        // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;

          var ret;
          if (state.objectMode) ret = state.buffer.shift();
          else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join("");
            else if (state.buffer.length === 1) ret = state.buffer.head.data;
            else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }

          return ret;
        }

        // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromListPartial(n, list, hasStrings) {
          var ret;
          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings
              ? copyFromBufferString(n, list)
              : copyFromBuffer(n, list);
          }
          return ret;
        }

        // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while ((p = p.next)) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;
            else ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          list.length -= c;
          return ret;
        }

        // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBuffer(n, list) {
          var ret = Buffer.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while ((p = p.next)) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;
                else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;

          // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.
          if (state.length > 0)
            throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            pna.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit("end");
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }
          return -1;
        }
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("c8ba"), __webpack_require__("4362")));

      /***/
    },

    /***/ b19a: /***/ function (module, exports, __webpack_require__) {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.

      /*<replacement>*/

      var pna = __webpack_require__("966d");
      /*</replacement>*/

      /*<replacement>*/
      var objectKeys =
        Object.keys ||
        function (obj) {
          var keys = [];
          for (var key in obj) {
            keys.push(key);
          }
          return keys;
        };
      /*</replacement>*/

      module.exports = Duplex;

      /*<replacement>*/
      var util = Object.create(__webpack_require__("3a7c"));
      util.inherits = __webpack_require__("3fb5");
      /*</replacement>*/

      var Readable = __webpack_require__("ad71");
      var Writable = __webpack_require__("dc14");

      util.inherits(Duplex, Readable);

      {
        // avoid scope creep, the keys array can then be collected
        var keys = objectKeys(Writable.prototype);
        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);

        Readable.call(this, options);
        Writable.call(this, options);

        if (options && options.readable === false) this.readable = false;

        if (options && options.writable === false) this.writable = false;

        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false)
          this.allowHalfOpen = false;

        this.once("end", onend);
      }

      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function () {
          return this._writableState.highWaterMark;
        },
      });

      // the no-half-open enforcer
      function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return;

        // no more data can be written.
        // But allow more writes to happen in this tick.
        pna.nextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      Object.defineProperty(Duplex.prototype, "destroyed", {
        get: function () {
          if (
            this._readableState === undefined ||
            this._writableState === undefined
          ) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function (value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (
            this._readableState === undefined ||
            this._writableState === undefined
          ) {
            return;
          }

          // backward compatibility, the user is explicitly
          // managing destroyed
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        },
      });

      Duplex.prototype._destroy = function (err, cb) {
        this.push(null);
        this.end();

        pna.nextTick(cb, err);
      };

      /***/
    },

    /***/ b311: /***/ function (module, exports, __webpack_require__) {
      /*!
       * clipboard.js v2.0.8
       * https://clipboardjs.com/
       *
       * Licensed MIT © Zeno Rocha
       */
      (function webpackUniversalModuleDefinition(root, factory) {
        if (true) module.exports = factory();
        else {
        }
      })(this, function () {
        return /******/ (function () {
          // webpackBootstrap
          /******/ var __webpack_modules__ = {
            /***/ 134: /***/ function (
              __unused_webpack_module,
              __webpack_exports__,
              __webpack_require__
            ) {
              "use strict";

              // EXPORTS
              __webpack_require__.d(__webpack_exports__, {
                default: function () {
                  return /* binding */ clipboard;
                },
              });

              // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
              var tiny_emitter = __webpack_require__(279);
              var tiny_emitter_default = /*#__PURE__*/ __webpack_require__.n(
                tiny_emitter
              );
              // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
              var listen = __webpack_require__(370);
              var listen_default = /*#__PURE__*/ __webpack_require__.n(listen);
              // EXTERNAL MODULE: ./node_modules/select/src/select.js
              var src_select = __webpack_require__(817);
              var select_default = /*#__PURE__*/ __webpack_require__.n(
                src_select
              ); // CONCATENATED MODULE: ./src/clipboard-action.js
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                ) {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  };
                }
                return _typeof(obj);
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }

              /**
               * Inner class which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               */

              var ClipboardAction = /*#__PURE__*/ (function () {
                /**
                 * @param {Object} options
                 */
                function ClipboardAction(options) {
                  _classCallCheck(this, ClipboardAction);

                  this.resolveOptions(options);
                  this.initSelection();
                }
                /**
                 * Defines base properties passed from constructor.
                 * @param {Object} options
                 */

                _createClass(ClipboardAction, [
                  {
                    key: "resolveOptions",
                    value: function resolveOptions() {
                      var options =
                        arguments.length > 0 && arguments[0] !== undefined
                          ? arguments[0]
                          : {};
                      this.action = options.action;
                      this.container = options.container;
                      this.emitter = options.emitter;
                      this.target = options.target;
                      this.text = options.text;
                      this.trigger = options.trigger;
                      this.selectedText = "";
                    },
                    /**
                     * Decides which selection strategy is going to be applied based
                     * on the existence of `text` and `target` properties.
                     */
                  },
                  {
                    key: "initSelection",
                    value: function initSelection() {
                      if (this.text) {
                        this.selectFake();
                      } else if (this.target) {
                        this.selectTarget();
                      }
                    },
                    /**
                     * Creates a fake textarea element, sets its value from `text` property,
                     */
                  },
                  {
                    key: "createFakeElement",
                    value: function createFakeElement() {
                      var isRTL =
                        document.documentElement.getAttribute("dir") === "rtl";
                      this.fakeElem = document.createElement("textarea"); // Prevent zooming on iOS

                      this.fakeElem.style.fontSize = "12pt"; // Reset box model

                      this.fakeElem.style.border = "0";
                      this.fakeElem.style.padding = "0";
                      this.fakeElem.style.margin = "0"; // Move element out of screen horizontally

                      this.fakeElem.style.position = "absolute";
                      this.fakeElem.style[isRTL ? "right" : "left"] = "-9999px"; // Move element to the same position vertically

                      var yPosition =
                        window.pageYOffset ||
                        document.documentElement.scrollTop;
                      this.fakeElem.style.top = "".concat(yPosition, "px");
                      this.fakeElem.setAttribute("readonly", "");
                      this.fakeElem.value = this.text;
                      return this.fakeElem;
                    },
                    /**
                     * Get's the value of fakeElem,
                     * and makes a selection on it.
                     */
                  },
                  {
                    key: "selectFake",
                    value: function selectFake() {
                      var _this = this;

                      var fakeElem = this.createFakeElement();

                      this.fakeHandlerCallback = function () {
                        return _this.removeFake();
                      };

                      this.fakeHandler =
                        this.container.addEventListener(
                          "click",
                          this.fakeHandlerCallback
                        ) || true;
                      this.container.appendChild(fakeElem);
                      this.selectedText = select_default()(fakeElem);
                      this.copyText();
                      this.removeFake();
                    },
                    /**
                     * Only removes the fake element after another click event, that way
                     * a user can hit `Ctrl+C` to copy because selection still exists.
                     */
                  },
                  {
                    key: "removeFake",
                    value: function removeFake() {
                      if (this.fakeHandler) {
                        this.container.removeEventListener(
                          "click",
                          this.fakeHandlerCallback
                        );
                        this.fakeHandler = null;
                        this.fakeHandlerCallback = null;
                      }

                      if (this.fakeElem) {
                        this.container.removeChild(this.fakeElem);
                        this.fakeElem = null;
                      }
                    },
                    /**
                     * Selects the content from element passed on `target` property.
                     */
                  },
                  {
                    key: "selectTarget",
                    value: function selectTarget() {
                      this.selectedText = select_default()(this.target);
                      this.copyText();
                    },
                    /**
                     * Executes the copy operation based on the current selection.
                     */
                  },
                  {
                    key: "copyText",
                    value: function copyText() {
                      var succeeded;

                      try {
                        succeeded = document.execCommand(this.action);
                      } catch (err) {
                        succeeded = false;
                      }

                      this.handleResult(succeeded);
                    },
                    /**
                     * Fires an event based on the copy operation result.
                     * @param {Boolean} succeeded
                     */
                  },
                  {
                    key: "handleResult",
                    value: function handleResult(succeeded) {
                      this.emitter.emit(succeeded ? "success" : "error", {
                        action: this.action,
                        text: this.selectedText,
                        trigger: this.trigger,
                        clearSelection: this.clearSelection.bind(this),
                      });
                    },
                    /**
                     * Moves focus away from `target` and back to the trigger, removes current selection.
                     */
                  },
                  {
                    key: "clearSelection",
                    value: function clearSelection() {
                      if (this.trigger) {
                        this.trigger.focus();
                      }

                      document.activeElement.blur();
                      window.getSelection().removeAllRanges();
                    },
                    /**
                     * Sets the `action` to be performed which can be either 'copy' or 'cut'.
                     * @param {String} action
                     */
                  },
                  {
                    key: "destroy",

                    /**
                     * Destroy lifecycle.
                     */
                    value: function destroy() {
                      this.removeFake();
                    },
                  },
                  {
                    key: "action",
                    set: function set() {
                      var action =
                        arguments.length > 0 && arguments[0] !== undefined
                          ? arguments[0]
                          : "copy";
                      this._action = action;

                      if (this._action !== "copy" && this._action !== "cut") {
                        throw new Error(
                          'Invalid "action" value, use either "copy" or "cut"'
                        );
                      }
                    },
                    /**
                     * Gets the `action` property.
                     * @return {String}
                     */
                    get: function get() {
                      return this._action;
                    },
                    /**
                     * Sets the `target` property using an element
                     * that will be have its content copied.
                     * @param {Element} target
                     */
                  },
                  {
                    key: "target",
                    set: function set(target) {
                      if (target !== undefined) {
                        if (
                          target &&
                          _typeof(target) === "object" &&
                          target.nodeType === 1
                        ) {
                          if (
                            this.action === "copy" &&
                            target.hasAttribute("disabled")
                          ) {
                            throw new Error(
                              'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'
                            );
                          }

                          if (
                            this.action === "cut" &&
                            (target.hasAttribute("readonly") ||
                              target.hasAttribute("disabled"))
                          ) {
                            throw new Error(
                              'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'
                            );
                          }

                          this._target = target;
                        } else {
                          throw new Error(
                            'Invalid "target" value, use a valid Element'
                          );
                        }
                      }
                    },
                    /**
                     * Gets the `target` property.
                     * @return {String|HTMLElement}
                     */
                    get: function get() {
                      return this._target;
                    },
                  },
                ]);

                return ClipboardAction;
              })();

              /* harmony default export */ var clipboard_action = ClipboardAction; // CONCATENATED MODULE: ./src/clipboard.js
              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";
                if (
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                ) {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  };
                }
                return clipboard_typeof(obj);
              }

              function clipboard_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function clipboard_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function clipboard_createClass(
                Constructor,
                protoProps,
                staticProps
              ) {
                if (protoProps)
                  clipboard_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  clipboard_defineProperties(Constructor, staticProps);
                return Constructor;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError(
                    "Super expression must either be null or a function"
                  );
                }
                subClass.prototype = Object.create(
                  superClass && superClass.prototype,
                  {
                    constructor: {
                      value: subClass,
                      writable: true,
                      configurable: true,
                    },
                  }
                );
                if (superClass) _setPrototypeOf(subClass, superClass);
              }

              function _setPrototypeOf(o, p) {
                _setPrototypeOf =
                  Object.setPrototypeOf ||
                  function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                  };
                return _setPrototypeOf(o, p);
              }

              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                    result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }

              function _possibleConstructorReturn(self, call) {
                if (
                  call &&
                  (clipboard_typeof(call) === "object" ||
                    typeof call === "function")
                ) {
                  return call;
                }
                return _assertThisInitialized(self);
              }

              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                }
                return self;
              }

              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;
                try {
                  Date.prototype.toString.call(
                    Reflect.construct(Date, [], function () {})
                  );
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf
                  ? Object.getPrototypeOf
                  : function _getPrototypeOf(o) {
                      return o.__proto__ || Object.getPrototypeOf(o);
                    };
                return _getPrototypeOf(o);
              }

              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */

              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);

                if (!element.hasAttribute(attribute)) {
                  return;
                }

                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */

              var Clipboard = /*#__PURE__*/ (function (_Emitter) {
                _inherits(Clipboard, _Emitter);

                var _super = _createSuper(Clipboard);

                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */
                function Clipboard(trigger, options) {
                  var _this;

                  clipboard_classCallCheck(this, Clipboard);

                  _this = _super.call(this);

                  _this.resolveOptions(options);

                  _this.listenClick(trigger);

                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */

                clipboard_createClass(
                  Clipboard,
                  [
                    {
                      key: "resolveOptions",
                      value: function resolveOptions() {
                        var options =
                          arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : {};
                        this.action =
                          typeof options.action === "function"
                            ? options.action
                            : this.defaultAction;
                        this.target =
                          typeof options.target === "function"
                            ? options.target
                            : this.defaultTarget;
                        this.text =
                          typeof options.text === "function"
                            ? options.text
                            : this.defaultText;
                        this.container =
                          clipboard_typeof(options.container) === "object"
                            ? options.container
                            : document.body;
                      },
                      /**
                       * Adds a click event listener to the passed trigger.
                       * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                       */
                    },
                    {
                      key: "listenClick",
                      value: function listenClick(trigger) {
                        var _this2 = this;

                        this.listener = listen_default()(
                          trigger,
                          "click",
                          function (e) {
                            return _this2.onClick(e);
                          }
                        );
                      },
                      /**
                       * Defines a new `ClipboardAction` on each click event.
                       * @param {Event} e
                       */
                    },
                    {
                      key: "onClick",
                      value: function onClick(e) {
                        var trigger = e.delegateTarget || e.currentTarget;

                        if (this.clipboardAction) {
                          this.clipboardAction = null;
                        }

                        this.clipboardAction = new clipboard_action({
                          action: this.action(trigger),
                          target: this.target(trigger),
                          text: this.text(trigger),
                          container: this.container,
                          trigger: trigger,
                          emitter: this,
                        });
                      },
                      /**
                       * Default `action` lookup function.
                       * @param {Element} trigger
                       */
                    },
                    {
                      key: "defaultAction",
                      value: function defaultAction(trigger) {
                        return getAttributeValue("action", trigger);
                      },
                      /**
                       * Default `target` lookup function.
                       * @param {Element} trigger
                       */
                    },
                    {
                      key: "defaultTarget",
                      value: function defaultTarget(trigger) {
                        var selector = getAttributeValue("target", trigger);

                        if (selector) {
                          return document.querySelector(selector);
                        }
                      },
                      /**
                       * Returns the support of the given action, or all actions if no action is
                       * given.
                       * @param {String} [action]
                       */
                    },
                    {
                      key: "defaultText",

                      /**
                       * Default `text` lookup function.
                       * @param {Element} trigger
                       */
                      value: function defaultText(trigger) {
                        return getAttributeValue("text", trigger);
                      },
                      /**
                       * Destroy lifecycle.
                       */
                    },
                    {
                      key: "destroy",
                      value: function destroy() {
                        this.listener.destroy();

                        if (this.clipboardAction) {
                          this.clipboardAction.destroy();
                          this.clipboardAction = null;
                        }
                      },
                    },
                  ],
                  [
                    {
                      key: "isSupported",
                      value: function isSupported() {
                        var action =
                          arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : ["copy", "cut"];
                        var actions =
                          typeof action === "string" ? [action] : action;
                        var support = !!document.queryCommandSupported;
                        actions.forEach(function (action) {
                          support =
                            support && !!document.queryCommandSupported(action);
                        });
                        return support;
                      },
                    },
                  ]
                );

                return Clipboard;
              })(tiny_emitter_default());

              /* harmony default export */ var clipboard = Clipboard;

              /***/
            },

            /***/ 828: /***/ function (module) {
              var DOCUMENT_NODE_TYPE = 9;

              /**
               * A polyfill for Element.matches()
               */
              if (
                typeof Element !== "undefined" &&
                !Element.prototype.matches
              ) {
                var proto = Element.prototype;

                proto.matches =
                  proto.matchesSelector ||
                  proto.mozMatchesSelector ||
                  proto.msMatchesSelector ||
                  proto.oMatchesSelector ||
                  proto.webkitMatchesSelector;
              }

              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */
              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (
                    typeof element.matches === "function" &&
                    element.matches(selector)
                  ) {
                    return element;
                  }
                  element = element.parentNode;
                }
              }

              module.exports = closest;

              /***/
            },

            /***/ 438: /***/ function (
              module,
              __unused_webpack_exports,
              __webpack_require__
            ) {
              var closest = __webpack_require__(828);

              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */
              function _delegate(
                element,
                selector,
                type,
                callback,
                useCapture
              ) {
                var listenerFn = listener.apply(this, arguments);

                element.addEventListener(type, listenerFn, useCapture);

                return {
                  destroy: function () {
                    element.removeEventListener(type, listenerFn, useCapture);
                  },
                };
              }

              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */
              function delegate(
                elements,
                selector,
                type,
                callback,
                useCapture
              ) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === "function") {
                  return _delegate.apply(null, arguments);
                }

                // Handle Element-less usage, it defaults to global delegation
                if (typeof type === "function") {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                }

                // Handle Selector-based usage
                if (typeof elements === "string") {
                  elements = document.querySelectorAll(elements);
                }

                // Handle Array-like based usage
                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(
                    element,
                    selector,
                    type,
                    callback,
                    useCapture
                  );
                });
              }

              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */
              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);

                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }

              module.exports = delegate;

              /***/
            },

            /***/ 879: /***/ function (__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return (
                  value !== undefined &&
                  value instanceof HTMLElement &&
                  value.nodeType === 1
                );
              };

              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);

                return (
                  value !== undefined &&
                  (type === "[object NodeList]" ||
                    type === "[object HTMLCollection]") &&
                  "length" in value &&
                  (value.length === 0 || exports.node(value[0]))
                );
              };

              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.string = function (value) {
                return typeof value === "string" || value instanceof String;
              };

              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);

                return type === "[object Function]";
              };

              /***/
            },

            /***/ 370: /***/ function (
              module,
              __unused_webpack_exports,
              __webpack_require__
            ) {
              var is = __webpack_require__(879);
              var delegate = __webpack_require__(438);

              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error("Missing required arguments");
                }

                if (!is.string(type)) {
                  throw new TypeError("Second argument must be a String");
                }

                if (!is.fn(callback)) {
                  throw new TypeError("Third argument must be a Function");
                }

                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError(
                    "First argument must be a String, HTMLElement, HTMLCollection, or NodeList"
                  );
                }
              }

              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);

                return {
                  destroy: function () {
                    node.removeEventListener(type, callback);
                  },
                };
              }

              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });

                return {
                  destroy: function () {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  },
                };
              }

              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */
              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }

              module.exports = listen;

              /***/
            },

            /***/ 817: /***/ function (module) {
              function select(element) {
                var selectedText;

                if (element.nodeName === "SELECT") {
                  element.focus();

                  selectedText = element.value;
                } else if (
                  element.nodeName === "INPUT" ||
                  element.nodeName === "TEXTAREA"
                ) {
                  var isReadOnly = element.hasAttribute("readonly");

                  if (!isReadOnly) {
                    element.setAttribute("readonly", "");
                  }

                  element.select();
                  element.setSelectionRange(0, element.value.length);

                  if (!isReadOnly) {
                    element.removeAttribute("readonly");
                  }

                  selectedText = element.value;
                } else {
                  if (element.hasAttribute("contenteditable")) {
                    element.focus();
                  }

                  var selection = window.getSelection();
                  var range = document.createRange();

                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);

                  selectedText = selection.toString();
                }

                return selectedText;
              }

              module.exports = select;

              /***/
            },

            /***/ 279: /***/ function (module) {
              function E() {
                // Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }

              E.prototype = {
                on: function (name, callback, ctx) {
                  var e = this.e || (this.e = {});

                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx,
                  });

                  return this;
                },

                once: function (name, callback, ctx) {
                  var self = this;
                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }

                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },

                emit: function (name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;

                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }

                  return this;
                },

                off: function (name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];

                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                        liveEvents.push(evts[i]);
                    }
                  }

                  // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

                  liveEvents.length ? (e[name] = liveEvents) : delete e[name];

                  return this;
                },
              };

              module.exports = E;
              module.exports.TinyEmitter = E;

              /***/
            },

            /******/
          }; // The module cache
          /************************************************************************/
          /******/ /******/ var __webpack_module_cache__ = {}; // The require function
          /******/

          /******/ /******/ function __webpack_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/ if (__webpack_module_cache__[moduleId]) {
              /******/ return __webpack_module_cache__[moduleId].exports;
              /******/
            } // Create a new module (and put it into the cache)
            /******/ /******/ var module = (__webpack_module_cache__[
              moduleId
            ] = {
              /******/ // no module.id needed
              /******/ // no module.loaded needed
              /******/ exports: {},
              /******/
            }); // Execute the module function
            /******/

            /******/ /******/ __webpack_modules__[moduleId](
              module,
              module.exports,
              __webpack_require__
            ); // Return the exports of the module
            /******/

            /******/ /******/ return module.exports;
            /******/
          } /* webpack/runtime/compat get default export */
          /******/

          /************************************************************************/
          /******/ /******/ !(function () {
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __webpack_require__.n = function (module) {
              /******/ var getter =
                module && module.__esModule
                  ? /******/ function () {
                      return module["default"];
                    }
                  : /******/ function () {
                      return module;
                    };
              /******/ __webpack_require__.d(getter, { a: getter });
              /******/ return getter;
              /******/
            };
            /******/
          })(); /* webpack/runtime/define property getters */
          /******/

          /******/ /******/ !(function () {
            /******/ // define getter functions for harmony exports
            /******/ __webpack_require__.d = function (exports, definition) {
              /******/ for (var key in definition) {
                /******/ if (
                  __webpack_require__.o(definition, key) &&
                  !__webpack_require__.o(exports, key)
                ) {
                  /******/ Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key],
                  });
                  /******/
                }
                /******/
              }
              /******/
            };
            /******/
          })(); /* webpack/runtime/hasOwnProperty shorthand */
          /******/

          /******/ /******/ !(function () {
            /******/ __webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/
          })(); // module exports must be returned from runtime so entry inlining is disabled // startup // Load entry module and return exports
          /******/

          /************************************************************************/
          /******/ /******/ /******/ /******/ return __webpack_require__(134);
          /******/
        })().default;
      });

      /***/
    },

    /***/ b639: /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (global) {
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <http://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        var base64 = __webpack_require__("1fb5");
        var ieee754 = __webpack_require__("9152");
        var isArray = __webpack_require__("e3db");

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;

        /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
        Buffer.TYPED_ARRAY_SUPPORT =
          global.TYPED_ARRAY_SUPPORT !== undefined
            ? global.TYPED_ARRAY_SUPPORT
            : typedArraySupport();

        /*
         * Export kMaxLength after typed array support is determined.
         */
        exports.kMaxLength = kMaxLength();

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              },
            };
            return (
              arr.foo() === 42 && // typed array instances can be augmented
              typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
              arr.subarray(1, 1).byteLength === 0
            ); // ie10 has broken `subarray`
          } catch (e) {
            return false;
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError("Invalid typed array length");
          }
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length);
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length);
            }
            that.length = length;
          }

          return that;
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length);
          }

          // Common case.
          if (typeof arg === "number") {
            if (typeof encodingOrOffset === "string") {
              throw new Error(
                "If encoding is specified then the first argument must be a string"
              );
            }
            return allocUnsafe(this, arg);
          }
          return from(this, arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation

        // TODO: Legacy, not needed anymore. Remove in next major version.
        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype;
          return arr;
        };

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === "number") {
            throw new TypeError('"value" argument must not be a number');
          }

          if (
            typeof ArrayBuffer !== "undefined" &&
            value instanceof ArrayBuffer
          ) {
            return fromArrayBuffer(that, value, encodingOrOffset, length);
          }

          if (typeof value === "string") {
            return fromString(that, value, encodingOrOffset);
          }

          return fromObject(that, value);
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length);
        };

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;
          if (
            typeof Symbol !== "undefined" &&
            Symbol.species &&
            Buffer[Symbol.species] === Buffer
          ) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true,
            });
          }
        }

        function assertSize(size) {
          if (typeof size !== "number") {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size);
          if (size <= 0) {
            return createBuffer(that, size);
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === "string"
              ? createBuffer(that, size).fill(fill, encoding)
              : createBuffer(that, size).fill(fill);
          }
          return createBuffer(that, size);
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding);
        };

        function allocUnsafe(that, size) {
          assertSize(size);
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0;
            }
          }
          return that;
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size);
        };

        function fromString(that, string, encoding) {
          if (typeof encoding !== "string" || encoding === "") {
            encoding = "utf8";
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          that = createBuffer(that, length);

          var actual = that.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual);
          }

          return that;
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          that = createBuffer(that, length);
          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255;
          }
          return that;
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength; // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError("'offset' is out of bounds");
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError("'length' is out of bounds");
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array);
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset);
          } else {
            array = new Uint8Array(array, byteOffset, length);
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array;
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array);
          }
          return that;
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            that = createBuffer(that, len);

            if (that.length === 0) {
              return that;
            }

            obj.copy(that, 0, 0, len);
            return that;
          }

          if (obj) {
            if (
              (typeof ArrayBuffer !== "undefined" &&
                obj.buffer instanceof ArrayBuffer) ||
              "length" in obj
            ) {
              if (typeof obj.length !== "number" || isnan(obj.length)) {
                return createBuffer(that, 0);
              }
              return fromArrayLike(that, obj);
            }

            if (obj.type === "Buffer" && isArray(obj.data)) {
              return fromArrayLike(that, obj.data);
            }
          }

          throw new TypeError(
            "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
          );
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum " +
                "size: 0x" +
                kMaxLength().toString(16) +
                " bytes"
            );
          }
          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }
          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer);
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError("Arguments must be Buffers");
          }

          if (a === b) return 0;

          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;
          if (length === undefined) {
            length = 0;
            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;
          for (i = 0; i < list.length; ++i) {
            var buf = list[i];
            if (!Buffer.isBuffer(buf)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }
            buf.copy(buffer, pos);
            pos += buf.length;
          }
          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }
          if (
            typeof ArrayBuffer !== "undefined" &&
            typeof ArrayBuffer.isView === "function" &&
            (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
          ) {
            return string.byteLength;
          }
          if (typeof string !== "string") {
            string = "" + string;
          }

          var len = string.length;
          if (len === 0) return 0;

          // Use a for loop to avoid recursion
          var loweredCase = false;
          for (;;) {
            switch (encoding) {
              case "ascii":
              case "latin1":
              case "binary":
                return len;
              case "utf8":
              case "utf-8":
              case undefined:
                return utf8ToBytes(string).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return len * 2;
              case "hex":
                return len >>> 1;
              case "base64":
                return base64ToBytes(string).length;
              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }
        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false;

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0;
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return "";
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return "";
          }

          // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return "";
          }

          if (!encoding) encoding = "utf8";

          while (true) {
            switch (encoding) {
              case "hex":
                return hexSlice(this, start, end);

              case "utf8":
              case "utf-8":
                return utf8Slice(this, start, end);

              case "ascii":
                return asciiSlice(this, start, end);

              case "latin1":
              case "binary":
                return latin1Slice(this, start, end);

              case "base64":
                return base64Slice(this, start, end);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = (encoding + "").toLowerCase();
                loweredCase = true;
            }
          }
        }

        // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.
        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;
          if (len % 2 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          }
          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }
          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;
          if (len % 4 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          }
          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }
          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;
          if (len % 8 !== 0) {
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          }
          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }
          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0;
          if (length === 0) return "";
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b))
            throw new TypeError("Argument must be a Buffer");
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = "";
          var max = exports.INSPECT_MAX_BYTES;
          if (this.length > 0) {
            str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
            if (this.length > max) str += " ... ";
          }
          return "<Buffer " + str + ">";
        };

        Buffer.prototype.compare = function compare(
          target,
          start,
          end,
          thisStart,
          thisEnd
        ) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError("Argument must be a Buffer");
          }

          if (start === undefined) {
            start = 0;
          }
          if (end === undefined) {
            end = target ? target.length : 0;
          }
          if (thisStart === undefined) {
            thisStart = 0;
          }
          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (
            start < 0 ||
            end > target.length ||
            thisStart < 0 ||
            thisEnd > this.length
          ) {
            throw new RangeError("out of range index");
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }
          if (thisStart >= thisEnd) {
            return -1;
          }
          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;

          if (this === target) return 0;

          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);

          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1;

          // Normalize byteOffset
          if (typeof byteOffset === "string") {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }
          byteOffset = +byteOffset; // Coerce to Number.
          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
          if (byteOffset >= buffer.length) {
            if (dir) return -1;
            else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;
            else return -1;
          }

          // Normalize val
          if (typeof val === "string") {
            val = Buffer.from(val, encoding);
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === "number") {
            val = val & 0xff; // Search for a byte value [0-255]
            if (
              Buffer.TYPED_ARRAY_SUPPORT &&
              typeof Uint8Array.prototype.indexOf === "function"
            ) {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              } else {
                return Uint8Array.prototype.lastIndexOf.call(
                  buffer,
                  val,
                  byteOffset
                );
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError("val must be string, number or Buffer");
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();
            if (
              encoding === "ucs2" ||
              encoding === "ucs-2" ||
              encoding === "utf16le" ||
              encoding === "utf-16le"
            ) {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }
              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;
          if (dir) {
            var foundIndex = -1;
            for (i = byteOffset; i < arrLength; i++) {
              if (
                read(arr, i) ===
                read(val, foundIndex === -1 ? 0 : i - foundIndex)
              ) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength)
                  return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength)
              byteOffset = arrLength - valLength;
            for (i = byteOffset; i >= 0; i--) {
              var found = true;
              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }
              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(
          val,
          byteOffset,
          encoding
        ) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(
          val,
          byteOffset,
          encoding
        ) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;
          if (!length) {
            length = remaining;
          } else {
            length = Number(length);
            if (length > remaining) {
              length = remaining;
            }
          }

          // must be an even number of digits
          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

          if (length > strLen / 2) {
            length = strLen / 2;
          }
          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (isNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }
          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(
            utf8ToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(
            utf16leToBytes(string, buf.length - offset),
            buf,
            offset,
            length
          );
        }

        Buffer.prototype.write = function write(
          string,
          offset,
          length,
          encoding
        ) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = "utf8";
            length = this.length;
            offset = 0;
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === "string") {
            encoding = offset;
            length = this.length;
            offset = 0;
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0;
            if (isFinite(length)) {
              length = length | 0;
              if (encoding === undefined) encoding = "utf8";
            } else {
              encoding = length;
              length = undefined;
            }
            // legacy write(string, encoding, offset, length) - remove in v0.13
          } else {
            throw new Error(
              "Buffer.write(string, encoding, offset[, length]) is no longer supported"
            );
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (
            (string.length > 0 && (length < 0 || offset < 0)) ||
            offset > this.length
          ) {
            throw new RangeError("Attempt to write outside buffer bounds");
          }

          if (!encoding) encoding = "utf8";

          var loweredCase = false;
          for (;;) {
            switch (encoding) {
              case "hex":
                return hexWrite(this, string, offset, length);

              case "utf8":
              case "utf-8":
                return utf8Write(this, string, offset, length);

              case "ascii":
                return asciiWrite(this, string, offset, length);

              case "latin1":
              case "binary":
                return latin1Write(this, string, offset, length);

              case "base64":
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase)
                  throw new TypeError("Unknown encoding: " + encoding);
                encoding = ("" + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0),
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];

          var i = start;
          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence =
              firstByte > 0xef
                ? 4
                : firstByte > 0xdf
                ? 3
                : firstByte > 0xbf
                ? 2
                : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }
                  break;
                case 2:
                  secondByte = buf[i + 1];
                  if ((secondByte & 0xc0) === 0x80) {
                    tempCodePoint =
                      ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                    if (tempCodePoint > 0x7f) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0xc) |
                      ((secondByte & 0x3f) << 0x6) |
                      (thirdByte & 0x3f);
                    if (
                      tempCodePoint > 0x7ff &&
                      (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                    ) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];
                  if (
                    (secondByte & 0xc0) === 0x80 &&
                    (thirdByte & 0xc0) === 0x80 &&
                    (fourthByte & 0xc0) === 0x80
                  ) {
                    tempCodePoint =
                      ((firstByte & 0xf) << 0x12) |
                      ((secondByte & 0x3f) << 0xc) |
                      ((thirdByte & 0x3f) << 0x6) |
                      (fourthByte & 0x3f);
                    if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xfffd;
              bytesPerSequence = 1;
            } else if (codePoint > 0xffff) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
              codePoint = 0xdc00 | (codePoint & 0x3ff);
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          var res = "";
          var i = 0;
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
            );
          }
          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = "";
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7f);
          }
          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = "";
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }
          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;

          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;

          var out = "";
          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }
          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = "";
          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }
          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;

          var newBuf;
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new Buffer(sliceLen, undefined);
            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }

          return newBuf;
        };

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0)
            throw new RangeError("offset is not uint");
          if (offset + ext > length)
            throw new RangeError("Trying to access beyond buffer length");
        }

        Buffer.prototype.readUIntLE = function readUIntLE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var val = this[offset];
          var mul = 1;
          var i = 0;
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;
          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | (this[offset + 1] << 8);
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return (this[offset] << 8) | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            (this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16)) +
            this[offset + 3] * 0x1000000
          );
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            this[offset] * 0x1000000 +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
          );
        };

        Buffer.prototype.readIntLE = function readIntLE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var val = this[offset];
          var mul = 1;
          var i = 0;
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(
          offset,
          byteLength,
          noAssert
        ) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);

          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }
          mul *= 0x80;

          if (val >= mul) val -= Math.pow(2, 8 * byteLength);

          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | (this[offset + 1] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | (this[offset] << 8);
          return val & 0x8000 ? val | 0xffff0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            this[offset] |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
          );
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);

          return (
            (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3]
          );
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(
          offset,
          noAssert
        ) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min)
            throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xff;
          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xff;
          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1;
          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] =
              (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
              ((littleEndian ? i : 1 - i) * 8);
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }
          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }
          return offset + 2;
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1;
          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] =
              (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }
          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }
          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xff;
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(
          value,
          offset,
          byteLength,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);

            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xff;
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }
            this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(
          value,
          offset,
          noAssert
        ) {
          value = +value;
          offset = offset | 0;
          if (!noAssert)
            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }
          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length)
            throw new RangeError("Index out of range");
          if (offset < 0) throw new RangeError("Index out of range");
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              4,
              3.4028234663852886e38,
              -3.4028234663852886e38
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(
          value,
          offset,
          noAssert
        ) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(
              buf,
              value,
              offset,
              8,
              1.7976931348623157e308,
              -1.7976931348623157e308
            );
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(
          value,
          offset,
          noAssert
        ) {
          return writeDouble(this, value, offset, false, noAssert);
        };

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start;

          // Copy 0 bytes; we're done
          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0;

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError("targetStart out of bounds");
          }
          if (start < 0 || start >= this.length)
            throw new RangeError("sourceStart out of bounds");
          if (end < 0) throw new RangeError("sourceEnd out of bounds");

          // Are we oob?
          if (end > this.length) end = this.length;
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, start + len),
              targetStart
            );
          }

          return len;
        };

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === "string") {
            if (typeof start === "string") {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === "string") {
              encoding = end;
              end = this.length;
            }
            if (val.length === 1) {
              var code = val.charCodeAt(0);
              if (code < 256) {
                val = code;
              }
            }
            if (encoding !== undefined && typeof encoding !== "string") {
              throw new TypeError("encoding must be a string");
            }
            if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
              throw new TypeError("Unknown encoding: " + encoding);
            }
          } else if (typeof val === "number") {
            val = val & 255;
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError("Out of range index");
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;

          if (!val) val = 0;

          var i;
          if (typeof val === "number") {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val)
              ? val
              : utf8ToBytes(new Buffer(val, encoding).toString());
            var len = bytes.length;
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        };

        // HELPER FUNCTIONS
        // ================

        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, "");
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return "";
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + "=";
          }
          return str;
        }

        function stringtrim(str) {
          if (str.trim) return str.trim();
          return str.replace(/^\s+|\s+$/g, "");
        }

        function toHex(n) {
          if (n < 16) return "0" + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i);

            // is surrogate component
            if (codePoint > 0xd7ff && codePoint < 0xe000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xdbff) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  continue;
                }

                // valid lead
                leadSurrogate = codePoint;

                continue;
              }

              // 2 leads in a row
              if (codePoint < 0xdc00) {
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                leadSurrogate = codePoint;
                continue;
              }

              // valid surrogate pair
              codePoint =
                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
            }

            leadSurrogate = null;

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(
                (codePoint >> 0xc) | 0xe0,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(
                (codePoint >> 0x12) | 0xf0,
                ((codePoint >> 0xc) & 0x3f) | 0x80,
                ((codePoint >> 0x6) & 0x3f) | 0x80,
                (codePoint & 0x3f) | 0x80
              );
            } else {
              throw new Error("Invalid code point");
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];
          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xff);
          }
          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];
          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;

            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }
          return i;
        }

        function isnan(val) {
          return val !== val; // eslint-disable-line no-self-compare
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("c8ba")));

      /***/
    },

    /***/ b7d1: /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (global) {
        /**
         * Module exports.
         */

        module.exports = deprecate;

        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config("noDeprecation")) {
            return fn;
          }

          var warned = false;
          function deprecated() {
            if (!warned) {
              if (config("throwDeprecation")) {
                throw new Error(msg);
              } else if (config("traceDeprecation")) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }
              warned = true;
            }
            return fn.apply(this, arguments);
          }

          return deprecated;
        }

        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */

        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }
          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === "true";
        }

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("c8ba")));

      /***/
    },

    /***/ be5e: /***/ function (module, exports) {
      function webpackEmptyContext(req) {
        var e = new Error("Cannot find module '" + req + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      webpackEmptyContext.keys = function () {
        return [];
      };
      webpackEmptyContext.resolve = webpackEmptyContext;
      module.exports = webpackEmptyContext;
      webpackEmptyContext.id = "be5e";

      /***/
    },

    /***/ c1df: /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (module) {
        var require; //! moment.js
        //! version : 2.29.1
        //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
        //! license : MIT
        //! momentjs.com

        (function (global, factory) {
          true ? (module.exports = factory()) : undefined;
        })(this, function () {
          "use strict";

          var hookCallback;

          function hooks() {
            return hookCallback.apply(null, arguments);
          }

          // This is done to register the method called with moment()
          // without creating circular dependencies.
          function setHookCallback(callback) {
            hookCallback = callback;
          }

          function isArray(input) {
            return (
              input instanceof Array ||
              Object.prototype.toString.call(input) === "[object Array]"
            );
          }

          function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
              input != null &&
              Object.prototype.toString.call(input) === "[object Object]"
            );
          }

          function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }

          function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
            } else {
              var k;
              for (k in obj) {
                if (hasOwnProp(obj, k)) {
                  return false;
                }
              }
              return true;
            }
          }

          function isUndefined(input) {
            return input === void 0;
          }

          function isNumber(input) {
            return (
              typeof input === "number" ||
              Object.prototype.toString.call(input) === "[object Number]"
            );
          }

          function isDate(input) {
            return (
              input instanceof Date ||
              Object.prototype.toString.call(input) === "[object Date]"
            );
          }

          function map(arr, fn) {
            var res = [],
              i;
            for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
            }
            return res;
          }

          function extend(a, b) {
            for (var i in b) {
              if (hasOwnProp(b, i)) {
                a[i] = b[i];
              }
            }

            if (hasOwnProp(b, "toString")) {
              a.toString = b.toString;
            }

            if (hasOwnProp(b, "valueOf")) {
              a.valueOf = b.valueOf;
            }

            return a;
          }

          function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
          }

          function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidEra: null,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              era: null,
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false,
            };
          }

          function getParsingFlags(m) {
            if (m._pf == null) {
              m._pf = defaultParsingFlags();
            }
            return m._pf;
          }

          var some;
          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function (fun) {
              var t = Object(this),
                len = t.length >>> 0,
                i;

              for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
                }
              }

              return false;
            };
          }

          function isValid(m) {
            if (m._isValid == null) {
              var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                  return i != null;
                }),
                isNowValid =
                  !isNaN(m._d.getTime()) &&
                  flags.overflow < 0 &&
                  !flags.empty &&
                  !flags.invalidEra &&
                  !flags.invalidMonth &&
                  !flags.invalidWeekday &&
                  !flags.weekdayMismatch &&
                  !flags.nullInput &&
                  !flags.invalidFormat &&
                  !flags.userInvalidated &&
                  (!flags.meridiem || (flags.meridiem && parsedParts));

              if (m._strict) {
                isNowValid =
                  isNowValid &&
                  flags.charsLeftOver === 0 &&
                  flags.unusedTokens.length === 0 &&
                  flags.bigHour === undefined;
              }

              if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
              } else {
                return isNowValid;
              }
            }
            return m._isValid;
          }

          function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
              extend(getParsingFlags(m), flags);
            } else {
              getParsingFlags(m).userInvalidated = true;
            }

            return m;
          }

          // Plugins that add properties should also add the key here (null value),
          // so we can properly clone ourselves.
          var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;

          function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
              to._i = from._i;
            }
            if (!isUndefined(from._f)) {
              to._f = from._f;
            }
            if (!isUndefined(from._l)) {
              to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
              to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
              to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
              to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                  to[prop] = val;
                }
              }
            }

            return to;
          }

          // Moment prototype object
          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
              this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }

          function isMoment(obj) {
            return (
              obj instanceof Moment ||
              (obj != null && obj._isAMomentObject != null)
            );
          }

          function warn(msg) {
            if (
              hooks.suppressDeprecationWarnings === false &&
              typeof console !== "undefined" &&
              console.warn
            ) {
              console.warn("Deprecation warning: " + msg);
            }
          }

          function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                var args = [],
                  arg,
                  i,
                  key;
                for (i = 0; i < arguments.length; i++) {
                  arg = "";
                  if (typeof arguments[i] === "object") {
                    arg += "\n[" + i + "] ";
                    for (key in arguments[0]) {
                      if (hasOwnProp(arguments[0], key)) {
                        arg += key + ": " + arguments[0][key] + ", ";
                      }
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                    arg = arguments[i];
                  }
                  args.push(arg);
                }
                warn(
                  msg +
                    "\nArguments: " +
                    Array.prototype.slice.call(args).join("") +
                    "\n" +
                    new Error().stack
                );
                firstTime = false;
              }
              return fn.apply(this, arguments);
            }, fn);
          }

          var deprecations = {};

          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }

          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;

          function isFunction(input) {
            return (
              (typeof Function !== "undefined" && input instanceof Function) ||
              Object.prototype.toString.call(input) === "[object Function]"
            );
          }

          function set(config) {
            var prop, i;
            for (i in config) {
              if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                  this[i] = prop;
                } else {
                  this["_" + i] = prop;
                }
              }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
              (this._dayOfMonthOrdinalParse.source ||
                this._ordinalParse.source) +
                "|" +
                /\d{1,2}/.source
            );
          }

          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
              prop;
            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (
                  isObject(parentConfig[prop]) &&
                  isObject(childConfig[prop])
                ) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }
            for (prop in parentConfig) {
              if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
              ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
              }
            }
            return res;
          }

          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }

          var keys;

          if (Object.keys) {
            keys = Object.keys;
          } else {
            keys = function (obj) {
              var i,
                res = [];
              for (i in obj) {
                if (hasOwnProp(obj, i)) {
                  res.push(i);
                }
              }
              return res;
            };
          }

          var defaultCalendar = {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L",
          };

          function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar["sameElse"];
            return isFunction(output) ? output.call(mom, now) : output;
          }

          function zeroFill(number, targetLength, forceSign) {
            var absNumber = "" + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
            return (
              (sign ? (forceSign ? "+" : "") : "-") +
              Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
              absNumber
            );
          }

          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

          // token:    'M'
          // padded:   ['MM', 2]
          // ordinal:  'Mo'
          // callback: function () { this.month() + 1 }
          function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === "string") {
              func = function () {
                return this[callback]();
              };
            }
            if (token) {
              formatTokenFunctions[token] = func;
            }
            if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                return zeroFill(
                  func.apply(this, arguments),
                  padded[1],
                  padded[2]
                );
              };
            }
            if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                  func.apply(this, arguments),
                  token
                );
              };
            }
          }

          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, "");
            }
            return input.replace(/\\/g, "");
          }

          function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
              i,
              length;

            for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
              } else {
                array[i] = removeFormattingTokens(array[i]);
              }
            }

            return function (mom) {
              var output = "",
                i;
              for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                  ? array[i].call(mom, format)
                  : array[i];
              }
              return output;
            };
          }

          // format date using native date object
          function formatMoment(m, format) {
            if (!m.isValid()) {
              return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
              formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
          }

          function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
              );
              localFormattingTokens.lastIndex = 0;
              i -= 1;
            }

            return format;
          }

          var defaultLongDateFormat = {
            LTS: "h:mm:ss A",
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY h:mm A",
            LLLL: "dddd, MMMM D, YYYY h:mm A",
          };

          function longDateFormat(key) {
            var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
              return format;
            }

            this._longDateFormat[key] = formatUpper
              .match(formattingTokens)
              .map(function (tok) {
                if (
                  tok === "MMMM" ||
                  tok === "MM" ||
                  tok === "DD" ||
                  tok === "dddd"
                ) {
                  return tok.slice(1);
                }
                return tok;
              })
              .join("");

            return this._longDateFormat[key];
          }

          var defaultInvalidDate = "Invalid date";

          function invalidDate() {
            return this._invalidDate;
          }

          var defaultOrdinal = "%d",
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;

          function ordinal(number) {
            return this._ordinal.replace("%d", number);
          }

          var defaultRelativeTime = {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            ss: "%d seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            w: "a week",
            ww: "%d weeks",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years",
          };

          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
              ? output(number, withoutSuffix, string, isFuture)
              : output.replace(/%d/i, number);
          }

          function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? "future" : "past"];
            return isFunction(format)
              ? format(output)
              : format.replace(/%s/i, output);
          }

          var aliases = {};

          function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[
              shorthand
            ] = unit;
          }

          function normalizeUnits(units) {
            return typeof units === "string"
              ? aliases[units] || aliases[units.toLowerCase()]
              : undefined;
          }

          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
              normalizedProp,
              prop;

            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }

            return normalizedInput;
          }

          var priorities = {};

          function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
          }

          function getPrioritizedUnits(unitsObj) {
            var units = [],
              u;
            for (u in unitsObj) {
              if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
              }
            }
            units.sort(function (a, b) {
              return a.priority - b.priority;
            });
            return units;
          }

          function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
          }

          function absFloor(number) {
            if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }

          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
              value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }

            return value;
          }

          function makeGetSet(unit, keepTime) {
            return function (value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }

          function get(mom, unit) {
            return mom.isValid()
              ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]()
              : NaN;
          }

          function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
              if (
                unit === "FullYear" &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
              ) {
                value = toInt(value);
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
                  value,
                  mom.month(),
                  daysInMonth(value, mom.month())
                );
              } else {
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
              }
            }
          }

          // MOMENTS

          function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units]();
            }
            return this;
          }

          function stringSet(units, value) {
            if (typeof units === "object") {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units),
                i;
              for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
              }
            } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units](value);
              }
            }
            return this;
          }

          var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            regexes;

          regexes = {};

          function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
              ? regex
              : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
                };
          }

          function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
          }

          // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
          function unescapeFormat(s) {
            return regexEscape(
              s
                .replace("\\", "")
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                  matched,
                  p1,
                  p2,
                  p3,
                  p4
                ) {
                  return p1 || p2 || p3 || p4;
                })
            );
          }

          function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
          }

          var tokens = {};

          function addParseToken(token, callback) {
            var i,
              func = callback;
            if (typeof token === "string") {
              token = [token];
            }
            if (isNumber(callback)) {
              func = function (input, array) {
                array[callback] = toInt(input);
              };
            }
            for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
            }
          }

          function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
            });
          }

          function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
            }
          }

          var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

          function mod(n, x) {
            return ((n % x) + x) % x;
          }

          var indexOf;

          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function (o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                  return i;
                }
              }
              return -1;
            };
          }

          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
              ? isLeapYear(year)
                ? 29
                : 28
              : 31 - ((modMonth % 7) % 2);
          }

          // FORMATTING

          addFormatToken("M", ["MM", 2], "Mo", function () {
            return this.month() + 1;
          });

          addFormatToken("MMM", 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
          });

          addFormatToken("MMMM", 0, 0, function (format) {
            return this.localeData().months(this, format);
          });

          // ALIASES

          addUnitAlias("month", "M");

          // PRIORITY

          addUnitPriority("month", 8);

          // PARSING

          addRegexToken("M", match1to2);
          addRegexToken("MM", match1to2, match2);
          addRegexToken("MMM", function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
          });
          addRegexToken("MMMM", function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
          });

          addParseToken(["M", "MM"], function (input, array) {
            array[MONTH] = toInt(input) - 1;
          });

          addParseToken(["MMM", "MMMM"], function (
            input,
            array,
            config,
            token
          ) {
            var month = config._locale.monthsParse(
              input,
              token,
              config._strict
            );
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          });

          // LOCALES

          var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
              "_"
            ),
            defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
              "_"
            ),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;

          function localeMonths(m, format) {
            if (!m) {
              return isArray(this._months)
                ? this._months
                : this._months["standalone"];
            }
            return isArray(this._months)
              ? this._months[m.month()]
              : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                    ? "format"
                    : "standalone"
                ][m.month()];
          }

          function localeMonthsShort(m, format) {
            if (!m) {
              return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort["standalone"];
            }
            return isArray(this._monthsShort)
              ? this._monthsShort[m.month()]
              : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"
                ][m.month()];
          }

          function handleStrictParse(monthName, format, strict) {
            var i,
              ii,
              mom,
              llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                  mom,
                  ""
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(
                  mom,
                  ""
                ).toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                  "^" + this.months(mom, "").replace(".", "") + "$",
                  "i"
                );
                this._shortMonthsParse[i] = new RegExp(
                  "^" + this.monthsShort(mom, "").replace(".", "") + "$",
                  "i"
                );
              }
              if (!strict && !this._monthsParse[i]) {
                regex =
                  "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
              }
              // test the regex
              if (
                strict &&
                format === "MMMM" &&
                this._longMonthsParse[i].test(monthName)
              ) {
                return i;
              } else if (
                strict &&
                format === "MMM" &&
                this._shortMonthsParse[i].test(monthName)
              ) {
                return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
              // No op
              return mom;
            }

            if (typeof value === "string") {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                  return mom;
                }
              }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](
              value,
              dayOfMonth
            );
            return mom;
          }

          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, "Month");
            }
          }

          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }

          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, "_monthsShortRegex")) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
            }
          }

          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, "_monthsRegex")) {
                this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
            }
          }

          function computeMonthsParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom;
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ""));
              longPieces.push(this.months(mom, ""));
              mixedPieces.push(this.months(mom, ""));
              mixedPieces.push(this.monthsShort(mom, ""));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp(
              "^(" + mixedPieces.join("|") + ")",
              "i"
            );
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
              "^(" + longPieces.join("|") + ")",
              "i"
            );
            this._monthsShortStrictRegex = new RegExp(
              "^(" + shortPieces.join("|") + ")",
              "i"
            );
          }

          // FORMATTING

          addFormatToken("Y", 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : "+" + y;
          });

          addFormatToken(0, ["YY", 2], 0, function () {
            return this.year() % 100;
          });

          addFormatToken(0, ["YYYY", 4], 0, "year");
          addFormatToken(0, ["YYYYY", 5], 0, "year");
          addFormatToken(0, ["YYYYYY", 6, true], 0, "year");

          // ALIASES

          addUnitAlias("year", "y");

          // PRIORITIES

          addUnitPriority("year", 1);

          // PARSING

          addRegexToken("Y", matchSigned);
          addRegexToken("YY", match1to2, match2);
          addRegexToken("YYYY", match1to4, match4);
          addRegexToken("YYYYY", match1to6, match6);
          addRegexToken("YYYYYY", match1to6, match6);

          addParseToken(["YYYYY", "YYYYYY"], YEAR);
          addParseToken("YYYY", function (input, array) {
            array[YEAR] =
              input.length === 2
                ? hooks.parseTwoDigitYear(input)
                : toInt(input);
          });
          addParseToken("YY", function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken("Y", function (input, array) {
            array[YEAR] = parseInt(input, 10);
          });

          // HELPERS

          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          }

          // HOOKS

          hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
          };

          // MOMENTS

          var getSetYear = makeGetSet("FullYear", true);

          function getIsLeapYear() {
            return isLeapYear(this.year());
          }

          function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);
              if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
              }
            } else {
              date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
          }

          function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              args = Array.prototype.slice.call(arguments);
              // preserve leap years using a full 400 year cycle, then reset
              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
              }
            } else {
              date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
          }

          // start-of-first-week - start-of-year
          function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
          }

          // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear,
              resDayOfYear;

            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }

            return {
              year: resYear,
              dayOfYear: resDayOfYear,
            };
          }

          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek,
              resYear;

            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }

            return {
              week: resWeek,
              year: resYear,
            };
          }

          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          }

          // FORMATTING

          addFormatToken("w", ["ww", 2], "wo", "week");
          addFormatToken("W", ["WW", 2], "Wo", "isoWeek");

          // ALIASES

          addUnitAlias("week", "w");
          addUnitAlias("isoWeek", "W");

          // PRIORITIES

          addUnitPriority("week", 5);
          addUnitPriority("isoWeek", 5);

          // PARSING

          addRegexToken("w", match1to2);
          addRegexToken("ww", match1to2, match2);
          addRegexToken("W", match1to2);
          addRegexToken("WW", match1to2, match2);

          addWeekParseToken(["w", "ww", "W", "WW"], function (
            input,
            week,
            config,
            token
          ) {
            week[token.substr(0, 1)] = toInt(input);
          });

          // HELPERS

          // LOCALES

          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }

          var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
          };

          function localeFirstDayOfWeek() {
            return this._week.dow;
          }

          function localeFirstDayOfYear() {
            return this._week.doy;
          }

          // MOMENTS

          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, "d");
          }

          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, "d");
          }

          // FORMATTING

          addFormatToken("d", 0, "do", "day");

          addFormatToken("dd", 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
          });

          addFormatToken("ddd", 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
          });

          addFormatToken("dddd", 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
          });

          addFormatToken("e", 0, 0, "weekday");
          addFormatToken("E", 0, 0, "isoWeekday");

          // ALIASES

          addUnitAlias("day", "d");
          addUnitAlias("weekday", "e");
          addUnitAlias("isoWeekday", "E");

          // PRIORITY
          addUnitPriority("day", 11);
          addUnitPriority("weekday", 11);
          addUnitPriority("isoWeekday", 11);

          // PARSING

          addRegexToken("d", match1to2);
          addRegexToken("e", match1to2);
          addRegexToken("E", match1to2);
          addRegexToken("dd", function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
          });
          addRegexToken("ddd", function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
          });
          addRegexToken("dddd", function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
          });

          addWeekParseToken(["dd", "ddd", "dddd"], function (
            input,
            week,
            config,
            token
          ) {
            var weekday = config._locale.weekdaysParse(
              input,
              token,
              config._strict
            );
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });

          addWeekParseToken(["d", "e", "E"], function (
            input,
            week,
            config,
            token
          ) {
            week[token] = toInt(input);
          });

          // HELPERS

          function parseWeekday(input, locale) {
            if (typeof input !== "string") {
              return input;
            }

            if (!isNaN(input)) {
              return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === "number") {
              return input;
            }

            return null;
          }

          function parseIsoWeekday(input, locale) {
            if (typeof input === "string") {
              return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
          }

          // LOCALES
          function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
          }

          var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
              "_"
            ),
            defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split(
              "_"
            ),
            defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;

          function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
              ? this._weekdays
              : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                    ? "format"
                    : "standalone"
                ];
            return m === true
              ? shiftWeekdays(weekdays, this._week.dow)
              : m
              ? weekdays[m.day()]
              : weekdays;
          }

          function localeWeekdaysShort(m) {
            return m === true
              ? shiftWeekdays(this._weekdaysShort, this._week.dow)
              : m
              ? this._weekdaysShort[m.day()]
              : this._weekdaysShort;
          }

          function localeWeekdaysMin(m) {
            return m === true
              ? shiftWeekdays(this._weekdaysMin, this._week.dow)
              : m
              ? this._weekdaysMin[m.day()]
              : this._weekdaysMin;
          }

          function handleStrictParse$1(weekdayName, format, strict) {
            var i,
              ii,
              mom,
              llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                  mom,
                  ""
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                  mom,
                  ""
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(
                  mom,
                  ""
                ).toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(
                this,
                weekdayName,
                format,
                strict
              );
            }

            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                  "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
                  "i"
                );
                this._shortWeekdaysParse[i] = new RegExp(
                  "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
                  "i"
                );
                this._minWeekdaysParse[i] = new RegExp(
                  "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
                  "i"
                );
              }
              if (!this._weekdaysParse[i]) {
                regex =
                  "^" +
                  this.weekdays(mom, "") +
                  "|^" +
                  this.weekdaysShort(mom, "") +
                  "|^" +
                  this.weekdaysMin(mom, "");
                this._weekdaysParse[i] = new RegExp(
                  regex.replace(".", ""),
                  "i"
                );
              }
              // test the regex
              if (
                strict &&
                format === "dddd" &&
                this._fullWeekdaysParse[i].test(weekdayName)
              ) {
                return i;
              } else if (
                strict &&
                format === "ddd" &&
                this._shortWeekdaysParse[i].test(weekdayName)
              ) {
                return i;
              } else if (
                strict &&
                format === "dd" &&
                this._minWeekdaysParse[i].test(weekdayName)
              ) {
                return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, "d");
            } else {
              return day;
            }
          }

          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, "d");
          }

          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }

          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
            }
          }

          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysShortRegex")) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
            }
          }

          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysMinRegex")) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
            }
          }

          function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var minPieces = [],
              shortPieces = [],
              longPieces = [],
              mixedPieces = [],
              i,
              mom,
              minp,
              shortp,
              longp;
            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = regexEscape(this.weekdaysMin(mom, ""));
              shortp = regexEscape(this.weekdaysShort(mom, ""));
              longp = regexEscape(this.weekdays(mom, ""));
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._weekdaysRegex = new RegExp(
              "^(" + mixedPieces.join("|") + ")",
              "i"
            );
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp(
              "^(" + longPieces.join("|") + ")",
              "i"
            );
            this._weekdaysShortStrictRegex = new RegExp(
              "^(" + shortPieces.join("|") + ")",
              "i"
            );
            this._weekdaysMinStrictRegex = new RegExp(
              "^(" + minPieces.join("|") + ")",
              "i"
            );
          }

          // FORMATTING

          function hFormat() {
            return this.hours() % 12 || 12;
          }

          function kFormat() {
            return this.hours() || 24;
          }

          addFormatToken("H", ["HH", 2], 0, "hour");
          addFormatToken("h", ["hh", 2], 0, hFormat);
          addFormatToken("k", ["kk", 2], 0, kFormat);

          addFormatToken("hmm", 0, 0, function () {
            return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });

          addFormatToken("hmmss", 0, 0, function () {
            return (
              "" +
              hFormat.apply(this) +
              zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2)
            );
          });

          addFormatToken("Hmm", 0, 0, function () {
            return "" + this.hours() + zeroFill(this.minutes(), 2);
          });

          addFormatToken("Hmmss", 0, 0, function () {
            return (
              "" +
              this.hours() +
              zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2)
            );
          });

          function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
              );
            });
          }

          meridiem("a", true);
          meridiem("A", false);

          // ALIASES

          addUnitAlias("hour", "h");

          // PRIORITY
          addUnitPriority("hour", 13);

          // PARSING

          function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
          }

          addRegexToken("a", matchMeridiem);
          addRegexToken("A", matchMeridiem);
          addRegexToken("H", match1to2);
          addRegexToken("h", match1to2);
          addRegexToken("k", match1to2);
          addRegexToken("HH", match1to2, match2);
          addRegexToken("hh", match1to2, match2);
          addRegexToken("kk", match1to2, match2);

          addRegexToken("hmm", match3to4);
          addRegexToken("hmmss", match5to6);
          addRegexToken("Hmm", match3to4);
          addRegexToken("Hmmss", match5to6);

          addParseToken(["H", "HH"], HOUR);
          addParseToken(["k", "kk"], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(["a", "A"], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(["h", "hh"], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("hmm", function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("hmmss", function (input, array, config) {
            var pos1 = input.length - 4,
              pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("Hmm", function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken("Hmmss", function (input, array, config) {
            var pos1 = input.length - 4,
              pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          });

          // LOCALES

          function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + "").toLowerCase().charAt(0) === "p";
          }

          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet("Hours", true);

          function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? "pm" : "PM";
            } else {
              return isLower ? "am" : "AM";
            }
          }

          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
          };

          // internal storage for locale config files
          var locales = {},
            localeFamilies = {},
            globalLocale;

          function commonPrefix(arr1, arr2) {
            var i,
              minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
              if (arr1[i] !== arr2[i]) {
                return i;
              }
            }
            return minl;
          }

          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace("_", "-") : key;
          }

          // pick the locale from the array
          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
          function chooseLocale(names) {
            var i = 0,
              j,
              next,
              locale,
              split;

            while (i < names.length) {
              split = normalizeLocale(names[i]).split("-");
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split("-") : null;
              while (j > 0) {
                locale = loadLocale(split.slice(0, j).join("-"));
                if (locale) {
                  return locale;
                }
                if (
                  next &&
                  next.length >= j &&
                  commonPrefix(split, next) >= j - 1
                ) {
                  //the next array item is better than a shallower substring of this one
                  break;
                }
                j--;
              }
              i++;
            }
            return globalLocale;
          }

          function loadLocale(name) {
            var oldLocale = null,
              aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
              locales[name] === undefined &&
              typeof module !== "undefined" &&
              module &&
              module.exports
            ) {
              try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                __webpack_require__("be5e")("./" + name);
                getSetGlobalLocale(oldLocale);
              } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
              }
            }
            return locales[name];
          }

          // This function will load locale and then set the global locale.  If
          // no arguments are passed in, it will simply return the current global
          // locale key.
          function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }

              if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
              } else {
                if (typeof console !== "undefined" && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn(
                    "Locale " + key + " not found. Did you forget to load it?"
                  );
                }
              }
            }

            return globalLocale._abbr;
          }

          function defineLocale(name, config) {
            if (config !== null) {
              var locale,
                parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                deprecateSimple(
                  "defineLocaleOverride",
                  "use moment.updateLocale(localeName, config) to change " +
                    "an existing locale. moment.defineLocale(localeName, " +
                    "config) should only be used for creating a new locale " +
                    "See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
                );
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  locale = loadLocale(config.parentLocale);
                  if (locale != null) {
                    parentConfig = locale._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                      name: name,
                      config: config,
                    });
                    return null;
                  }
                }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
                });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);

              return locales[name];
            } else {
              // useful for testing
              delete locales[name];
              return null;
            }
          }

          function updateLocale(name, config) {
            if (config != null) {
              var locale,
                tmpLocale,
                parentConfig = baseConfig;

              if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
              } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                  // updateLocale is called for creating a new locale
                  // Set abbr so it will have a name (getters return
                  // undefined otherwise).
                  config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
              }

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
            } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                  if (name === getSetGlobalLocale()) {
                    getSetGlobalLocale(name);
                  }
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }
            return locales[name];
          }

          // returns locale data
          function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }

            if (!key) {
              return globalLocale;
            }

            if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                return locale;
              }
              key = [key];
            }

            return chooseLocale(key);
          }

          function listLocales() {
            return keys(locales);
          }

          function checkOverflow(m) {
            var overflow,
              a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
              overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                  ? MONTH
                  : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                  ? DATE
                  : a[HOUR] < 0 ||
                    a[HOUR] > 24 ||
                    (a[HOUR] === 24 &&
                      (a[MINUTE] !== 0 ||
                        a[SECOND] !== 0 ||
                        a[MILLISECOND] !== 0))
                  ? HOUR
                  : a[MINUTE] < 0 || a[MINUTE] > 59
                  ? MINUTE
                  : a[SECOND] < 0 || a[SECOND] > 59
                  ? SECOND
                  : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                  ? MILLISECOND
                  : -1;

              if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
              ) {
                overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
            }

            return m;
          }

          // iso 8601 regex
          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
              ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
              ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
              ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
              ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
              ["YYYY-DDD", /\d{4}-\d{3}/],
              ["YYYY-MM", /\d{4}-\d\d/, false],
              ["YYYYYYMMDD", /[+-]\d{10}/],
              ["YYYYMMDD", /\d{8}/],
              ["GGGG[W]WWE", /\d{4}W\d{3}/],
              ["GGGG[W]WW", /\d{4}W\d{2}/, false],
              ["YYYYDDD", /\d{7}/],
              ["YYYYMM", /\d{6}/, false],
              ["YYYY", /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
              ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
              ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
              ["HH:mm:ss", /\d\d:\d\d:\d\d/],
              ["HH:mm", /\d\d:\d\d/],
              ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
              ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
              ["HHmmss", /\d\d\d\d\d\d/],
              ["HHmm", /\d\d\d\d/],
              ["HH", /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
              UT: 0,
              GMT: 0,
              EDT: -4 * 60,
              EST: -5 * 60,
              CDT: -5 * 60,
              CST: -6 * 60,
              MDT: -6 * 60,
              MST: -7 * 60,
              PDT: -7 * 60,
              PST: -8 * 60,
            };

          // date from iso format
          function configFromISO(config) {
            var i,
              l,
              string = config._i,
              match =
                extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime,
              dateFormat,
              timeFormat,
              tzFormat;

            if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
                }
              }
              if (dateFormat == null) {
                config._isValid = false;
                return;
              }
              if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || " ") + isoTimes[i][0];
                    break;
                  }
                }
                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }
              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }
              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = "Z";
                } else {
                  config._isValid = false;
                  return;
                }
              }
              config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }

          function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
          ) {
            var result = [
              untruncateYear(yearStr),
              defaultLocaleMonthsShort.indexOf(monthStr),
              parseInt(dayStr, 10),
              parseInt(hourStr, 10),
              parseInt(minuteStr, 10),
            ];

            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }

            return result;
          }

          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
              return 2000 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }
            return year;
          }

          function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
              .replace(/\([^)]*\)|[\n\t]/g, " ")
              .replace(/(\s\s+)/g, " ")
              .replace(/^\s\s*/, "")
              .replace(/\s\s*$/, "");
          }

          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(
                  weekdayStr
                ),
                weekdayActual = new Date(
                  parsedInput[0],
                  parsedInput[1],
                  parsedInput[2]
                ).getDay();
              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }
            return true;
          }

          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
            } else {
              var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
              return h * 60 + m;
            }
          }

          // date and time from ref 2822 format
          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
              parsedArray;
            if (match) {
              parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
              );
              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);

              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          }

          // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }

            configFromISO(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            if (config._strict) {
              config._isValid = false;
            } else {
              // Final attempt, use Input Fallback
              hooks.createFromInputFallback(config);
            }
          }

          hooks.createFromInputFallback = deprecate(
            "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), " +
              "which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are " +
              "discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
            function (config) {
              config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
            }
          );

          // Pick the first defined of two or three arguments.
          function defaults(a, b, c) {
            if (a != null) {
              return a;
            }
            if (b != null) {
              return b;
            }
            return c;
          }

          function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
              return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
              ];
            }
            return [
              nowValue.getFullYear(),
              nowValue.getMonth(),
              nowValue.getDate(),
            ];
          }

          // convert an array to a date.
          // the array should mirror the parameters below
          // note: all values past the year are optional and will default to the lowest possible value.
          // [year, month, day , hour, minute, second, millisecond]
          function configFromArray(config) {
            var i,
              date,
              input = [],
              currentDate,
              expectedWeekday,
              yearToUse;

            if (config._d) {
              return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (
              config._w &&
              config._a[DATE] == null &&
              config._a[MONTH] == null
            ) {
              dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
              ) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
              config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
              config._a[HOUR] === 24 &&
              config._a[MINUTE] === 0 &&
              config._a[SECOND] === 0 &&
              config._a[MILLISECOND] === 0
            ) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(
              null,
              input
            );
            expectedWeekday = config._useUTC
              ? config._d.getUTCDay()
              : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
              config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
              config._w &&
              typeof config._w.d !== "undefined" &&
              config._w.d !== expectedWeekday
            ) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }

          function dayOfYearFromWeekInfo(config) {
            var w,
              weekYear,
              week,
              weekday,
              dow,
              doy,
              temp,
              weekdayOverflow,
              curWeek;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
              );
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              curWeek = weekOfYear(createLocal(), dow, doy);

              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                // default to beginning of week
                weekday = dow;
              }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          }

          // constant that refers to the ISO standard
          hooks.ISO_8601 = function () {};

          // constant that refers to the RFC 2822 form
          hooks.RFC_2822 = function () {};

          // date from string and format string
          function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }
            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = "" + config._i,
              i,
              parsedInput,
              tokens,
              token,
              skipped,
              stringLength = string.length,
              totalParsedInputLength = 0,
              era;

            tokens =
              expandFormat(config._f, config._locale).match(formattingTokens) ||
              [];

            for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(
                getParseRegexForToken(token, config)
              ) || [])[0];
              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                  string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
              }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
              stringLength - totalParsedInputLength;
            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
              config._a[HOUR] <= 12 &&
              getParsingFlags(config).bigHour === true &&
              config._a[HOUR] > 0
            ) {
              getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
              config._locale,
              config._a[HOUR],
              config._meridiem
            );

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
              config._a[YEAR] = config._locale.erasConvertYear(
                era,
                config._a[YEAR]
              );
            }

            configFromArray(config);
            checkOverflow(config);
          }

          function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
              // nothing to do
              return hour;
            }
            if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                hour += 12;
              }
              if (!isPm && hour === 12) {
                hour = 0;
              }
              return hour;
            } else {
              // this is not supposed to happen
              return hour;
            }
          }

          // date from string and array of format strings
          function configFromStringAndArray(config) {
            var tempConfig,
              bestMoment,
              scoreToBeat,
              i,
              currentScore,
              validFormatFound,
              bestFormatIsValid = false;

            if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }

            for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              validFormatFound = false;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (isValid(tempConfig)) {
                validFormatFound = true;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore +=
                getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (!bestFormatIsValid) {
                if (
                  scoreToBeat == null ||
                  currentScore < scoreToBeat ||
                  validFormatFound
                ) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                  if (validFormatFound) {
                    bestFormatIsValid = true;
                  }
                }
              } else {
                if (currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                }
              }
            }

            extend(config, bestMoment || tempConfig);
          }

          function configFromObject(config) {
            if (config._d) {
              return;
            }

            var i = normalizeObjectUnits(config._i),
              dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
              [
                i.year,
                i.month,
                dayOrDate,
                i.hour,
                i.minute,
                i.second,
                i.millisecond,
              ],
              function (obj) {
                return obj && parseInt(obj, 10);
              }
            );

            configFromArray(config);
          }

          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, "d");
              res._nextDay = undefined;
            }

            return res;
          }

          function prepareConfig(config) {
            var input = config._i,
              format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === "")) {
              return createInvalid({ nullInput: true });
            }

            if (typeof input === "string") {
              config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format)) {
              configFromStringAndArray(config);
            } else if (format) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }

            if (!isValid(config)) {
              config._d = null;
            }

            return config;
          }

          function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === "string") {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }

          function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
              strict = format;
              format = undefined;
            }

            if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
            }

            if (
              (isObject(input) && isObjectEmpty(input)) ||
              (isArray(input) && input.length === 0)
            ) {
              input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
          }

          function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
          }

          var prototypeMin = deprecate(
              "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
              function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                  return other < this ? this : other;
                } else {
                  return createInvalid();
                }
              }
            ),
            prototypeMax = deprecate(
              "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
              function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                  return other > this ? this : other;
                } else {
                  return createInvalid();
                }
              }
            );

          // Pick a moment m from moments so that m[fn](other) is true for all
          // other. This relies on the function fn to be transitive.
          //
          // moments should either be an array of moment objects or an array, whose
          // first element is an array of moment objects.
          function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }
            if (!moments.length) {
              return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
              }
            }
            return res;
          }

          // TODO: Use [].sort instead?
          function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy("isBefore", args);
          }

          function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy("isAfter", args);
          }

          var now = function () {
            return Date.now ? Date.now() : +new Date();
          };

          var ordering = [
            "year",
            "quarter",
            "month",
            "week",
            "day",
            "hour",
            "minute",
            "second",
            "millisecond",
          ];

          function isDurationValid(m) {
            var key,
              unitHasDecimal = false,
              i;
            for (key in m) {
              if (
                hasOwnProp(m, key) &&
                !(
                  indexOf.call(ordering, key) !== -1 &&
                  (m[key] == null || !isNaN(m[key]))
                )
              ) {
                return false;
              }
            }

            for (i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
                }
              }
            }

            return true;
          }

          function isValid$1() {
            return this._isValid;
          }

          function createInvalid$1() {
            return createDuration(NaN);
          }

          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
              +milliseconds +
              seconds * 1e3 + // 1000
              minutes * 6e4 + // 1000 * 60
              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
          }

          function isDuration(obj) {
            return obj instanceof Duration;
          }

          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          }

          // compare two arrays, return the number of differences
          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
            for (i = 0; i < len; i++) {
              if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
              ) {
                diffs++;
              }
            }
            return diffs + lengthDiff;
          }

          // FORMATTING

          function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset(),
                sign = "+";
              if (offset < 0) {
                offset = -offset;
                sign = "-";
              }
              return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
              );
            });
          }

          offset("Z", ":");
          offset("ZZ", "");

          // PARSING

          addRegexToken("Z", matchShortOffset);
          addRegexToken("ZZ", matchShortOffset);
          addParseToken(["Z", "ZZ"], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          });

          // HELPERS

          // timezone chunker
          // '+10:00' > ['10',  '00']
          // '-1530'  > ['-15', '30']
          var chunkOffset = /([\+\-]|\d\d)/gi;

          function offsetFromString(matcher, string) {
            var matches = (string || "").match(matcher),
              chunk,
              parts,
              minutes;

            if (matches === null) {
              return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
          }

          // Return a moment from input, that is local/utc/zone equivalent to model.
          function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
              res = model.clone();
              diff =
                (isMoment(input) || isDate(input)
                  ? input.valueOf()
                  : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }

          function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
          }

          // HOOKS

          // This function will be called whenever a moment is mutated.
          // It is intended to keep the offset in sync with the timezone.
          hooks.updateOffset = function () {};

          // MOMENTS

          // keepLocalTime = true means only change the timezone, without
          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
          // +0200, so we adjust the time as needed, to be valid.
          //
          // Keeping the time actually adds/subtracts (one hour)
          // from the actual represented time. That is why we call updateOffset
          // a second time. In case it wants us to change the offset again
          // _changeInProgress == true case, then we have to adjust, because
          // there is no such time in the given timezone.
          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
              localAdjust;
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              if (typeof input === "string") {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                this.add(localAdjust, "m");
              }
              if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(
                    this,
                    createDuration(input - offset, "m"),
                    1,
                    false
                  );
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }
              return this;
            } else {
              return this._isUTC ? offset : getDateOffset(this);
            }
          }

          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== "string") {
                input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
            } else {
              return -this.utcOffset();
            }
          }

          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }

          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                this.subtract(getDateOffset(this), "m");
              }
            }
            return this;
          }

          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === "string") {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }
            return this;
          }

          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
          }

          function isDaylightSavingTime() {
            return (
              this.utcOffset() > this.clone().month(0).utcOffset() ||
              this.utcOffset() > this.clone().month(5).utcOffset()
            );
          }

          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }

            var c = {},
              other;

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
              other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }

            return this._isDSTShifted;
          }

          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }

          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }

          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          }

          // ASP.NET json date format regex
          var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

          function createDuration(input, key) {
            var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;

            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
              };
            } else if (isNumber(input) || !isNaN(+input)) {
              duration = {};
              if (key) {
                duration[key] = +input;
              } else {
                duration.milliseconds = +input;
              }
            } else if ((match = aspNetRegex.exec(input))) {
              sign = match[1] === "-" ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
              };
            } else if ((match = isoRegex.exec(input))) {
              sign = match[1] === "-" ? -1 : 1;
              duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
              };
            } else if (duration == null) {
              // checks for null or undefined
              duration = {};
            } else if (
              typeof duration === "object" &&
              ("from" in duration || "to" in duration)
            ) {
              diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
              );

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, "_locale")) {
              ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, "_isValid")) {
              ret._isValid = input._isValid;
            }

            return ret;
          }

          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;

          function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(",", "."));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
          }

          function positiveMomentsDifference(base, other) {
            var res = {};

            res.months =
              other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, "M").isAfter(other)) {
              --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, "M");

            return res;
          }

          function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
              return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }

            return res;
          }

          // TODO: remove 'name' arg after deprecation is removed
          function createAdder(direction, name) {
            return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                  name,
                  "moment()." +
                    name +
                    "(period, number) is deprecated. Please use moment()." +
                    name +
                    "(number, period). " +
                    "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
                );
                tmp = val;
                val = period;
                period = tmp;
              }

              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }

          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);

            if (!mom.isValid()) {
              // No op
              return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
              setMonth(mom, get(mom, "Month") + months * isAdding);
            }
            if (days) {
              set$1(mom, "Date", get(mom, "Date") + days * isAdding);
            }
            if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
              hooks.updateOffset(mom, days || months);
            }
          }

          var add = createAdder(1, "add"),
            subtract = createAdder(-1, "subtract");

          function isString(input) {
            return typeof input === "string" || input instanceof String;
          }

          // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
          function isMomentInput(input) {
            return (
              isMoment(input) ||
              isDate(input) ||
              isString(input) ||
              isNumber(input) ||
              isNumberOrStringArray(input) ||
              isMomentInputObject(input) ||
              input === null ||
              input === undefined
            );
          }

          function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = [
                "years",
                "year",
                "y",
                "months",
                "month",
                "M",
                "days",
                "day",
                "d",
                "dates",
                "date",
                "D",
                "hours",
                "hour",
                "h",
                "minutes",
                "minute",
                "m",
                "seconds",
                "second",
                "s",
                "milliseconds",
                "millisecond",
                "ms",
              ],
              i,
              property;

            for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
          }

          function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
              dataTypeTest = false;
            if (arrayTest) {
              dataTypeTest =
                input.filter(function (item) {
                  return !isNumber(item) && isString(input);
                }).length === 0;
            }
            return arrayTest && dataTypeTest;
          }

          function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
              propertyTest = false,
              properties = [
                "sameDay",
                "nextDay",
                "lastDay",
                "nextWeek",
                "lastWeek",
                "sameElse",
              ],
              i,
              property;

            for (i = 0; i < properties.length; i += 1) {
              property = properties[i];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
          }

          function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, "days", true);
            return diff < -6
              ? "sameElse"
              : diff < -1
              ? "lastWeek"
              : diff < 0
              ? "lastDay"
              : diff < 1
              ? "sameDay"
              : diff < 2
              ? "nextDay"
              : diff < 7
              ? "nextWeek"
              : "sameElse";
          }

          function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
              if (!arguments[0]) {
                time = undefined;
                formats = undefined;
              } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
              } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
              }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
              sod = cloneWithOffset(now, this).startOf("day"),
              format = hooks.calendarFormat(this, sod) || "sameElse",
              output =
                formats &&
                (isFunction(formats[format])
                  ? formats[format].call(this, now)
                  : formats[format]);

            return this.format(
              output ||
                this.localeData().calendar(format, this, createLocal(now))
            );
          }

          function clone() {
            return new Moment(this);
          }

          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() > localInput.valueOf();
            } else {
              return (
                localInput.valueOf() < this.clone().startOf(units).valueOf()
              );
            }
          }

          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() < localInput.valueOf();
            } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
          }

          function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
              localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
            }
            inclusivity = inclusivity || "()";
            return (
              (inclusivity[0] === "("
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
              (inclusivity[1] === ")"
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
            );
          }

          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
              inputMs;
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
              );
            }
          }

          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }

          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }

          function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
              return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
              return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
              case "year":
                output = monthDiff(this, that) / 12;
                break;
              case "month":
                output = monthDiff(this, that);
                break;
              case "quarter":
                output = monthDiff(this, that) / 3;
                break;
              case "second":
                output = (this - that) / 1e3;
                break; // 1000
              case "minute":
                output = (this - that) / 6e4;
                break; // 1000 * 60
              case "hour":
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
              case "day":
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
              case "week":
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
              default:
                output = this - that;
            }

            return asFloat ? output : absFloor(output);
          }

          function monthDiff(a, b) {
            if (a.date() < b.date()) {
              // end-of-month calculations work correct when the start month has more
              // days than the end month.
              return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff =
                (b.year() - a.year()) * 12 + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, "months"),
              anchor2,
              adjust;

            if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
          }

          hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
          hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";

          function toString() {
            return this.clone()
              .locale("en")
              .format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
          }

          function toISOString(keepOffset) {
            if (!this.isValid()) {
              return null;
            }
            var utc = keepOffset !== true,
              m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(
                m,
                utc
                  ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                  : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
              );
            }
            if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                return this.toDate().toISOString();
              } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                  .toISOString()
                  .replace("Z", formatMoment(m, "Z"));
              }
            }
            return formatMoment(
              m,
              utc
                ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"
                : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
            );
          }

          /**
           * Return a human readable representation of a moment that can
           * also be evaluated to get a new moment which is the same
           *
           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
           */
          function inspect() {
            if (!this.isValid()) {
              return "moment.invalid(/* " + this._i + " */)";
            }
            var func = "moment",
              zone = "",
              prefix,
              year,
              datetime,
              suffix;
            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
              zone = "Z";
            }
            prefix = "[" + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
            datetime = "-MM-DD[T]HH:mm:ss.SSS";
            suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
          }

          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }

          function from(time, withoutSuffix) {
            if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
                createLocal(time).isValid())
            ) {
              return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }

          function to(time, withoutSuffix) {
            if (
              this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
                createLocal(time).isValid())
            ) {
              return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          }

          // If passed a locale key, it will set the locale for this
          // instance.  Otherwise, it will return the locale configuration
          // variables for this instance.
          function locale(key) {
            var newLocaleData;

            if (key === undefined) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }
              return this;
            }
          }

          var lang = deprecate(
            "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
            function (key) {
              if (key === undefined) {
                return this.localeData();
              } else {
                return this.locale(key);
              }
            }
          );

          function localeData() {
            return this._locale;
          }

          var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

          // actual modulo - handles negative numbers (for dates before 1970):
          function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
          }

          function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return new Date(y, m, d).valueOf();
            }
          }

          function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
              return Date.UTC(y, m, d);
            }
          }

          function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (
              units === undefined ||
              units === "millisecond" ||
              !this.isValid()
            ) {
              return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case "year":
                time = startOfDate(this.year(), 0, 1);
                break;
              case "quarter":
                time = startOfDate(
                  this.year(),
                  this.month() - (this.month() % 3),
                  1
                );
                break;
              case "month":
                time = startOfDate(this.year(), this.month(), 1);
                break;
              case "week":
                time = startOfDate(
                  this.year(),
                  this.month(),
                  this.date() - this.weekday()
                );
                break;
              case "isoWeek":
                time = startOfDate(
                  this.year(),
                  this.month(),
                  this.date() - (this.isoWeekday() - 1)
                );
                break;
              case "day":
              case "date":
                time = startOfDate(this.year(), this.month(), this.date());
                break;
              case "hour":
                time = this._d.valueOf();
                time -= mod$1(
                  time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                  MS_PER_HOUR
                );
                break;
              case "minute":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
              case "second":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }

          function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (
              units === undefined ||
              units === "millisecond" ||
              !this.isValid()
            ) {
              return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
              case "year":
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
              case "quarter":
                time =
                  startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3) + 3,
                    1
                  ) - 1;
                break;
              case "month":
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
              case "week":
                time =
                  startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday() + 7
                  ) - 1;
                break;
              case "isoWeek":
                time =
                  startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1) + 7
                  ) - 1;
                break;
              case "day":
              case "date":
                time =
                  startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
              case "hour":
                time = this._d.valueOf();
                time +=
                  MS_PER_HOUR -
                  mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                  ) -
                  1;
                break;
              case "minute":
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
              case "second":
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }

          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
          }

          function unix() {
            return Math.floor(this.valueOf() / 1000);
          }

          function toDate() {
            return new Date(this.valueOf());
          }

          function toArray() {
            var m = this;
            return [
              m.year(),
              m.month(),
              m.date(),
              m.hour(),
              m.minute(),
              m.second(),
              m.millisecond(),
            ];
          }

          function toObject() {
            var m = this;
            return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds(),
            };
          }

          function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
          }

          function isValid$2() {
            return isValid(this);
          }

          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }

          function invalidAt() {
            return getParsingFlags(this).overflow;
          }

          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict,
            };
          }

          addFormatToken("N", 0, 0, "eraAbbr");
          addFormatToken("NN", 0, 0, "eraAbbr");
          addFormatToken("NNN", 0, 0, "eraAbbr");
          addFormatToken("NNNN", 0, 0, "eraName");
          addFormatToken("NNNNN", 0, 0, "eraNarrow");

          addFormatToken("y", ["y", 1], "yo", "eraYear");
          addFormatToken("y", ["yy", 2], 0, "eraYear");
          addFormatToken("y", ["yyy", 3], 0, "eraYear");
          addFormatToken("y", ["yyyy", 4], 0, "eraYear");

          addRegexToken("N", matchEraAbbr);
          addRegexToken("NN", matchEraAbbr);
          addRegexToken("NNN", matchEraAbbr);
          addRegexToken("NNNN", matchEraName);
          addRegexToken("NNNNN", matchEraNarrow);

          addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function (
            input,
            array,
            config,
            token
          ) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          });

          addRegexToken("y", matchUnsigned);
          addRegexToken("yy", matchUnsigned);
          addRegexToken("yyy", matchUnsigned);
          addRegexToken("yyyy", matchUnsigned);
          addRegexToken("yo", matchEraYearOrdinal);

          addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
          addParseToken(["yo"], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
              match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
              array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
              array[YEAR] = parseInt(input, 10);
            }
          });

          function localeEras(m, format) {
            var i,
              l,
              date,
              eras = this._eras || getLocale("en")._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
              switch (typeof eras[i].since) {
                case "string":
                  // truncate time
                  date = hooks(eras[i].since).startOf("day");
                  eras[i].since = date.valueOf();
                  break;
              }

              switch (typeof eras[i].until) {
                case "undefined":
                  eras[i].until = +Infinity;
                  break;
                case "string":
                  // truncate time
                  date = hooks(eras[i].until).startOf("day").valueOf();
                  eras[i].until = date.valueOf();
                  break;
              }
            }
            return eras;
          }

          function localeErasParse(eraName, format, strict) {
            var i,
              l,
              eras = this.eras(),
              name,
              abbr,
              narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
              name = eras[i].name.toUpperCase();
              abbr = eras[i].abbr.toUpperCase();
              narrow = eras[i].narrow.toUpperCase();

              if (strict) {
                switch (format) {
                  case "N":
                  case "NN":
                  case "NNN":
                    if (abbr === eraName) {
                      return eras[i];
                    }
                    break;

                  case "NNNN":
                    if (name === eraName) {
                      return eras[i];
                    }
                    break;

                  case "NNNNN":
                    if (narrow === eraName) {
                      return eras[i];
                    }
                    break;
                }
              } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
              }
            }
          }

          function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
              return hooks(era.since).year();
            } else {
              return hooks(era.since).year() + (year - era.offset) * dir;
            }
          }

          function getEraName() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf("day").valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
              }
            }

            return "";
          }

          function getEraNarrow() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf("day").valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
              }
            }

            return "";
          }

          function getEraAbbr() {
            var i,
              l,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              // truncate time
              val = this.clone().startOf("day").valueOf();

              if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
              }
              if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
              }
            }

            return "";
          }

          function getEraYear() {
            var i,
              l,
              dir,
              val,
              eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
              dir = eras[i].since <= eras[i].until ? +1 : -1;

              // truncate time
              val = this.clone().startOf("day").valueOf();

              if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
              ) {
                return (
                  (this.year() - hooks(eras[i].since).year()) * dir +
                  eras[i].offset
                );
              }
            }

            return this.year();
          }

          function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, "_erasNameRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
          }

          function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, "_erasAbbrRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
          }

          function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, "_erasNarrowRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
          }

          function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
          }

          function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
          }

          function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
          }

          function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
          }

          function computeErasParse() {
            var abbrPieces = [],
              namePieces = [],
              narrowPieces = [],
              mixedPieces = [],
              i,
              l,
              eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
              namePieces.push(regexEscape(eras[i].name));
              abbrPieces.push(regexEscape(eras[i].abbr));
              narrowPieces.push(regexEscape(eras[i].narrow));

              mixedPieces.push(regexEscape(eras[i].name));
              mixedPieces.push(regexEscape(eras[i].abbr));
              mixedPieces.push(regexEscape(eras[i].narrow));
            }

            this._erasRegex = new RegExp(
              "^(" + mixedPieces.join("|") + ")",
              "i"
            );
            this._erasNameRegex = new RegExp(
              "^(" + namePieces.join("|") + ")",
              "i"
            );
            this._erasAbbrRegex = new RegExp(
              "^(" + abbrPieces.join("|") + ")",
              "i"
            );
            this._erasNarrowRegex = new RegExp(
              "^(" + narrowPieces.join("|") + ")",
              "i"
            );
          }

          // FORMATTING

          addFormatToken(0, ["gg", 2], 0, function () {
            return this.weekYear() % 100;
          });

          addFormatToken(0, ["GG", 2], 0, function () {
            return this.isoWeekYear() % 100;
          });

          function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
          }

          addWeekYearFormatToken("gggg", "weekYear");
          addWeekYearFormatToken("ggggg", "weekYear");
          addWeekYearFormatToken("GGGG", "isoWeekYear");
          addWeekYearFormatToken("GGGGG", "isoWeekYear");

          // ALIASES

          addUnitAlias("weekYear", "gg");
          addUnitAlias("isoWeekYear", "GG");

          // PRIORITY

          addUnitPriority("weekYear", 1);
          addUnitPriority("isoWeekYear", 1);

          // PARSING

          addRegexToken("G", matchSigned);
          addRegexToken("g", matchSigned);
          addRegexToken("GG", match1to2, match2);
          addRegexToken("gg", match1to2, match2);
          addRegexToken("GGGG", match1to4, match4);
          addRegexToken("gggg", match1to4, match4);
          addRegexToken("GGGGG", match1to6, match6);
          addRegexToken("ggggg", match1to6, match6);

          addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function (
            input,
            week,
            config,
            token
          ) {
            week[token.substr(0, 2)] = toInt(input);
          });

          addWeekParseToken(["gg", "GG"], function (
            input,
            week,
            config,
            token
          ) {
            week[token] = hooks.parseTwoDigitYear(input);
          });

          // MOMENTS

          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
              this,
              input,
              this.week(),
              this.weekday(),
              this.localeData()._week.dow,
              this.localeData()._week.doy
            );
          }

          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
              this,
              input,
              this.isoWeek(),
              this.isoWeekday(),
              1,
              4
            );
          }

          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }

          function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
          }

          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }

          function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
          }

          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }

          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(
                weekYear,
                week,
                weekday,
                dow,
                doy
              ),
              date = createUTCDate(
                dayOfYearData.year,
                0,
                dayOfYearData.dayOfYear
              );

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          }

          // FORMATTING

          addFormatToken("Q", 0, "Qo", "quarter");

          // ALIASES

          addUnitAlias("quarter", "Q");

          // PRIORITY

          addUnitPriority("quarter", 7);

          // PARSING

          addRegexToken("Q", match1);
          addParseToken("Q", function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          });

          // MOMENTS

          function getSetQuarter(input) {
            return input == null
              ? Math.ceil((this.month() + 1) / 3)
              : this.month((input - 1) * 3 + (this.month() % 3));
          }

          // FORMATTING

          addFormatToken("D", ["DD", 2], "Do", "date");

          // ALIASES

          addUnitAlias("date", "D");

          // PRIORITY
          addUnitPriority("date", 9);

          // PARSING

          addRegexToken("D", match1to2);
          addRegexToken("DD", match1to2, match2);
          addRegexToken("Do", function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
              ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
              : locale._dayOfMonthOrdinalParseLenient;
          });

          addParseToken(["D", "DD"], DATE);
          addParseToken("Do", function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
          });

          // MOMENTS

          var getSetDayOfMonth = makeGetSet("Date", true);

          // FORMATTING

          addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");

          // ALIASES

          addUnitAlias("dayOfYear", "DDD");

          // PRIORITY
          addUnitPriority("dayOfYear", 4);

          // PARSING

          addRegexToken("DDD", match1to3);
          addRegexToken("DDDD", match3);
          addParseToken(["DDD", "DDDD"], function (input, array, config) {
            config._dayOfYear = toInt(input);
          });

          // HELPERS

          // MOMENTS

          function getSetDayOfYear(input) {
            var dayOfYear =
              Math.round(
                (this.clone().startOf("day") - this.clone().startOf("year")) /
                  864e5
              ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
          }

          // FORMATTING

          addFormatToken("m", ["mm", 2], 0, "minute");

          // ALIASES

          addUnitAlias("minute", "m");

          // PRIORITY

          addUnitPriority("minute", 14);

          // PARSING

          addRegexToken("m", match1to2);
          addRegexToken("mm", match1to2, match2);
          addParseToken(["m", "mm"], MINUTE);

          // MOMENTS

          var getSetMinute = makeGetSet("Minutes", false);

          // FORMATTING

          addFormatToken("s", ["ss", 2], 0, "second");

          // ALIASES

          addUnitAlias("second", "s");

          // PRIORITY

          addUnitPriority("second", 15);

          // PARSING

          addRegexToken("s", match1to2);
          addRegexToken("ss", match1to2, match2);
          addParseToken(["s", "ss"], SECOND);

          // MOMENTS

          var getSetSecond = makeGetSet("Seconds", false);

          // FORMATTING

          addFormatToken("S", 0, 0, function () {
            return ~~(this.millisecond() / 100);
          });

          addFormatToken(0, ["SS", 2], 0, function () {
            return ~~(this.millisecond() / 10);
          });

          addFormatToken(0, ["SSS", 3], 0, "millisecond");
          addFormatToken(0, ["SSSS", 4], 0, function () {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ["SSSSS", 5], 0, function () {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ["SSSSSS", 6], 0, function () {
            return this.millisecond() * 1000;
          });
          addFormatToken(0, ["SSSSSSS", 7], 0, function () {
            return this.millisecond() * 10000;
          });
          addFormatToken(0, ["SSSSSSSS", 8], 0, function () {
            return this.millisecond() * 100000;
          });
          addFormatToken(0, ["SSSSSSSSS", 9], 0, function () {
            return this.millisecond() * 1000000;
          });

          // ALIASES

          addUnitAlias("millisecond", "ms");

          // PRIORITY

          addUnitPriority("millisecond", 16);

          // PARSING

          addRegexToken("S", match1to3, match1);
          addRegexToken("SS", match1to3, match2);
          addRegexToken("SSS", match1to3, match3);

          var token, getSetMillisecond;
          for (token = "SSSS"; token.length <= 9; token += "S") {
            addRegexToken(token, matchUnsigned);
          }

          function parseMs(input, array) {
            array[MILLISECOND] = toInt(("0." + input) * 1000);
          }

          for (token = "S"; token.length <= 9; token += "S") {
            addParseToken(token, parseMs);
          }

          getSetMillisecond = makeGetSet("Milliseconds", false);

          // FORMATTING

          addFormatToken("z", 0, 0, "zoneAbbr");
          addFormatToken("zz", 0, 0, "zoneName");

          // MOMENTS

          function getZoneAbbr() {
            return this._isUTC ? "UTC" : "";
          }

          function getZoneName() {
            return this._isUTC ? "Coordinated Universal Time" : "";
          }

          var proto = Moment.prototype;

          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;
          if (typeof Symbol !== "undefined" && Symbol.for != null) {
            proto[Symbol.for("nodejs.util.inspect.custom")] = function () {
              return "Moment<" + this.format() + ">";
            };
          }
          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;
          proto.eraName = getEraName;
          proto.eraNarrow = getEraNarrow;
          proto.eraAbbr = getEraAbbr;
          proto.eraYear = getEraYear;
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;
          proto.quarter = proto.quarters = getSetQuarter;
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.weeksInWeekYear = getWeeksInWeekYear;
          proto.isoWeeksInYear = getISOWeeksInYear;
          proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;
          proto.hour = proto.hours = getSetHour;
          proto.minute = proto.minutes = getSetMinute;
          proto.second = proto.seconds = getSetSecond;
          proto.millisecond = proto.milliseconds = getSetMillisecond;
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;
          proto.dates = deprecate(
            "dates accessor is deprecated. Use date instead.",
            getSetDayOfMonth
          );
          proto.months = deprecate(
            "months accessor is deprecated. Use month instead",
            getSetMonth
          );
          proto.years = deprecate(
            "years accessor is deprecated. Use year instead",
            getSetYear
          );
          proto.zone = deprecate(
            "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
            getSetZone
          );
          proto.isDSTShifted = deprecate(
            "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
            isDaylightSavingTimeShifted
          );

          function createUnix(input) {
            return createLocal(input * 1000);
          }

          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }

          function preParsePostFormat(string) {
            return string;
          }

          var proto$1 = Locale.prototype;

          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;
          proto$1.eras = localeEras;
          proto$1.erasParse = localeErasParse;
          proto$1.erasConvertYear = localeErasConvertYear;
          proto$1.erasAbbrRegex = erasAbbrRegex;
          proto$1.erasNameRegex = erasNameRegex;
          proto$1.erasNarrowRegex = erasNarrowRegex;

          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;

          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;

          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;

          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;

          function get$1(format, index, field, setter) {
            var locale = getLocale(),
              utc = createUTC().set(setter, index);
            return locale[field](utc, format);
          }

          function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
              index = format;
              format = undefined;
            }

            format = format || "";

            if (index != null) {
              return get$1(format, index, field, "month");
            }

            var i,
              out = [];
            for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, "month");
            }
            return out;
          }

          // ()
          // (5)
          // (fmt, 5)
          // (fmt)
          // (true)
          // (true, 5)
          // (true, fmt, 5)
          // (true, fmt)
          function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === "boolean") {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || "";
            } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || "";
            }

            var locale = getLocale(),
              shift = localeSorted ? locale._week.dow : 0,
              i,
              out = [];

            if (index != null) {
              return get$1(format, (index + shift) % 7, field, "day");
            }

            for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, "day");
            }
            return out;
          }

          function listMonths(format, index) {
            return listMonthsImpl(format, index, "months");
          }

          function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, "monthsShort");
          }

          function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, "weekdays");
          }

          function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(
              localeSorted,
              format,
              index,
              "weekdaysShort"
            );
          }

          function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
          }

          getSetGlobalLocale("en", {
            eras: [
              {
                since: "0001-01-01",
                until: +Infinity,
                offset: 1,
                name: "Anno Domini",
                narrow: "AD",
                abbr: "AD",
              },
              {
                since: "0000-12-31",
                until: -Infinity,
                offset: 1,
                name: "Before Christ",
                narrow: "BC",
                abbr: "BC",
              },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
              var b = number % 10,
                output =
                  toInt((number % 100) / 10) === 1
                    ? "th"
                    : b === 1
                    ? "st"
                    : b === 2
                    ? "nd"
                    : b === 3
                    ? "rd"
                    : "th";
              return number + output;
            },
          });

          // Side effect imports

          hooks.lang = deprecate(
            "moment.lang is deprecated. Use moment.locale instead.",
            getSetGlobalLocale
          );
          hooks.langData = deprecate(
            "moment.langData is deprecated. Use moment.localeData instead.",
            getLocale
          );

          var mathAbs = Math.abs;

          function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
          }

          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
          }

          // supports only 2.0-style add(1, 's') or add(duration)
          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          }

          // supports only 2.0-style subtract(1, 's') or subtract(duration)
          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }

          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }

          function bubble() {
            var milliseconds = this._milliseconds,
              days = this._days,
              months = this._months,
              data = this._data,
              seconds,
              minutes,
              hours,
              years,
              monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
              !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
              )
            ) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
          }

          function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
          }

          function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
          }

          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }
            var days,
              months,
              milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === "month" || units === "quarter" || units === "year") {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              switch (units) {
                case "month":
                  return months;
                case "quarter":
                  return months / 3;
                case "year":
                  return months / 12;
              }
            } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                case "week":
                  return days / 7 + milliseconds / 6048e5;
                case "day":
                  return days + milliseconds / 864e5;
                case "hour":
                  return days * 24 + milliseconds / 36e5;
                case "minute":
                  return days * 1440 + milliseconds / 6e4;
                case "second":
                  return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case "millisecond":
                  return Math.floor(days * 864e5) + milliseconds;
                default:
                  throw new Error("Unknown unit " + units);
              }
            }
          }

          // TODO: Use this.as('ms')?
          function valueOf$1() {
            if (!this.isValid()) {
              return NaN;
            }
            return (
              this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6
            );
          }

          function makeAs(alias) {
            return function () {
              return this.as(alias);
            };
          }

          var asMilliseconds = makeAs("ms"),
            asSeconds = makeAs("s"),
            asMinutes = makeAs("m"),
            asHours = makeAs("h"),
            asDays = makeAs("d"),
            asWeeks = makeAs("w"),
            asMonths = makeAs("M"),
            asQuarters = makeAs("Q"),
            asYears = makeAs("y");

          function clone$1() {
            return createDuration(this);
          }

          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + "s"]() : NaN;
          }

          function makeGetter(name) {
            return function () {
              return this.isValid() ? this._data[name] : NaN;
            };
          }

          var milliseconds = makeGetter("milliseconds"),
            seconds = makeGetter("seconds"),
            minutes = makeGetter("minutes"),
            hours = makeGetter("hours"),
            days = makeGetter("days"),
            months = makeGetter("months"),
            years = makeGetter("years");

          function weeks() {
            return absFloor(this.days() / 7);
          }

          var round = Math.round,
            thresholds = {
              ss: 44, // a few seconds to seconds
              s: 45, // seconds to minute
              m: 45, // minutes to hour
              h: 22, // hours to day
              d: 26, // days to month/week
              w: null, // weeks to month
              M: 11, // months to year
            };

          // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
          function substituteTimeAgo(
            string,
            number,
            withoutSuffix,
            isFuture,
            locale
          ) {
            return locale.relativeTime(
              number || 1,
              !!withoutSuffix,
              string,
              isFuture
            );
          }

          function relativeTime$1(
            posNegDuration,
            withoutSuffix,
            thresholds,
            locale
          ) {
            var duration = createDuration(posNegDuration).abs(),
              seconds = round(duration.as("s")),
              minutes = round(duration.as("m")),
              hours = round(duration.as("h")),
              days = round(duration.as("d")),
              months = round(duration.as("M")),
              weeks = round(duration.as("w")),
              years = round(duration.as("y")),
              a =
                (seconds <= thresholds.ss && ["s", seconds]) ||
                (seconds < thresholds.s && ["ss", seconds]) ||
                (minutes <= 1 && ["m"]) ||
                (minutes < thresholds.m && ["mm", minutes]) ||
                (hours <= 1 && ["h"]) ||
                (hours < thresholds.h && ["hh", hours]) ||
                (days <= 1 && ["d"]) ||
                (days < thresholds.d && ["dd", days]);

            if (thresholds.w != null) {
              a =
                a ||
                (weeks <= 1 && ["w"]) ||
                (weeks < thresholds.w && ["ww", weeks]);
            }
            a = a ||
              (months <= 1 && ["M"]) ||
              (months < thresholds.M && ["MM", months]) ||
              (years <= 1 && ["y"]) || ["yy", years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
          }

          // This function allows you to set the rounding function for relative time strings
          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
              return round;
            }
            if (typeof roundingFunction === "function") {
              round = roundingFunction;
              return true;
            }
            return false;
          }

          // This function allows you to set a threshold for relative time strings
          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
              return false;
            }
            if (limit === undefined) {
              return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === "s") {
              thresholds.ss = limit - 1;
            }
            return true;
          }

          function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var withSuffix = false,
              th = thresholds,
              locale,
              output;

            if (typeof argWithSuffix === "object") {
              argThresholds = argWithSuffix;
              argWithSuffix = false;
            }
            if (typeof argWithSuffix === "boolean") {
              withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === "object") {
              th = Object.assign({}, thresholds, argThresholds);
              if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
              }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
              output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
          }

          var abs$1 = Math.abs;

          function sign(x) {
            return (x > 0) - (x < 0) || +x;
          }

          function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
              days = abs$1(this._days),
              months = abs$1(this._months),
              minutes,
              hours,
              years,
              s,
              total = this.asSeconds(),
              totalSign,
              ymSign,
              daysSign,
              hmsSign;

            if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return "P0D";
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";

            totalSign = total < 0 ? "-" : "";
            ymSign = sign(this._months) !== sign(total) ? "-" : "";
            daysSign = sign(this._days) !== sign(total) ? "-" : "";
            hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";

            return (
              totalSign +
              "P" +
              (years ? ymSign + years + "Y" : "") +
              (months ? ymSign + months + "M" : "") +
              (days ? daysSign + days + "D" : "") +
              (hours || minutes || seconds ? "T" : "") +
              (hours ? hmsSign + hours + "H" : "") +
              (minutes ? hmsSign + minutes + "M" : "") +
              (seconds ? hmsSign + s + "S" : "")
            );
          }

          var proto$2 = Duration.prototype;

          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asQuarters = asQuarters;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;

          proto$2.toIsoString = deprecate(
            "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
            toISOString$1
          );
          proto$2.lang = lang;

          // FORMATTING

          addFormatToken("X", 0, 0, "unix");
          addFormatToken("x", 0, 0, "valueOf");

          // PARSING

          addRegexToken("x", matchSigned);
          addRegexToken("X", matchTimestamp);
          addParseToken("X", function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
          });
          addParseToken("x", function (input, array, config) {
            config._d = new Date(toInt(input));
          });

          //! moment.js

          hooks.version = "2.29.1";

          setHookCallback(createLocal);

          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto;

          // currently HTML5 input type only supports 24-hour formats
          hooks.HTML5_FMT = {
            DATETIME_LOCAL: "YYYY-MM-DDTHH:mm", // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss", // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS", // <input type="datetime-local" step="0.001" />
            DATE: "YYYY-MM-DD", // <input type="date" />
            TIME: "HH:mm", // <input type="time" />
            TIME_SECONDS: "HH:mm:ss", // <input type="time" step="1" />
            TIME_MS: "HH:mm:ss.SSS", // <input type="time" step="0.001" />
            WEEK: "GGGG-[W]WW", // <input type="week" />
            MONTH: "YYYY-MM", // <input type="month" />
          };

          return hooks;
        });

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("62e4")(module)));

      /***/
    },

    /***/ c2ae: /***/ function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("e372").PassThrough;

      /***/
    },

    /***/ c8ba: /***/ function (module, exports) {
      var g;

      // This works in non-strict mode
      g = (function () {
        return this;
      })();

      try {
        // This works if eval is allowed (see CSP)
        g = g || new Function("return this")();
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;

      /***/
    },

    /***/ d17b: /***/ function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("e372").Transform;

      /***/
    },

    /***/ d485: /***/ function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      module.exports = Stream;

      var EE = __webpack_require__("faa1").EventEmitter;
      var inherits = __webpack_require__("3fb5");

      inherits(Stream, EE);
      Stream.Readable = __webpack_require__("e372");
      Stream.Writable = __webpack_require__("2c63");
      Stream.Duplex = __webpack_require__("0960");
      Stream.Transform = __webpack_require__("d17b");
      Stream.PassThrough = __webpack_require__("c2ae");

      // Backwards-compat with node 0.4.x
      Stream.Stream = Stream;

      // old-style streams.  Note that the pipe method (the only relevant
      // part of this class) is overridden in the Readable class.

      function Stream() {
        EE.call(this);
      }

      Stream.prototype.pipe = function (dest, options) {
        var source = this;

        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }

        source.on("data", ondata);

        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }

        dest.on("drain", ondrain);

        // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.
        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on("end", onend);
          source.on("close", onclose);
        }

        var didOnEnd = false;
        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;

          dest.end();
        }

        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;

          if (typeof dest.destroy === "function") dest.destroy();
        }

        // don't leave dangling pipes when there are errors.
        function onerror(er) {
          cleanup();
          if (EE.listenerCount(this, "error") === 0) {
            throw er; // Unhandled stream error in pipe.
          }
        }

        source.on("error", onerror);
        dest.on("error", onerror);

        // remove all the event listeners that were added.
        function cleanup() {
          source.removeListener("data", ondata);
          dest.removeListener("drain", ondrain);

          source.removeListener("end", onend);
          source.removeListener("close", onclose);

          source.removeListener("error", onerror);
          dest.removeListener("error", onerror);

          source.removeListener("end", cleanup);
          source.removeListener("close", cleanup);

          dest.removeListener("close", cleanup);
        }

        source.on("end", cleanup);
        source.on("close", cleanup);

        dest.on("close", cleanup);

        dest.emit("pipe", source);

        // Allow for unix-like usage: A.pipe(B).pipe(C)
        return dest;
      };

      /***/
    },

    /***/ dc14: /***/ function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */ (function (process, global) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.

        /*<replacement>*/

        var pna = __webpack_require__("966d");
        /*</replacement>*/

        module.exports = Writable;

        /* <replacement> */
        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        }

        // It seems a linked list but it is not
        // there will be only 2 of these for each stream
        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;
          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/
        var asyncWrite =
          !process.browser &&
          ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1
            ? setImmediate
            : pna.nextTick;
        /*</replacement>*/

        /*<replacement>*/
        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;

        /*<replacement>*/
        var util = Object.create(__webpack_require__("3a7c"));
        util.inherits = __webpack_require__("3fb5");
        /*</replacement>*/

        /*<replacement>*/
        var internalUtil = {
          deprecate: __webpack_require__("b7d1"),
        };
        /*</replacement>*/

        /*<replacement>*/
        var Stream = __webpack_require__("429b");
        /*</replacement>*/

        /*<replacement>*/

        var Buffer = __webpack_require__("8707").Buffer;
        var OurUint8Array = global.Uint8Array || function () {};
        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        /*</replacement>*/

        var destroyImpl = __webpack_require__("4681");

        util.inherits(Writable, Stream);

        function nop() {}

        function WritableState(options, stream) {
          Duplex = Duplex || __webpack_require__("b19a");

          options = options || {};

          // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.
          var isDuplex = stream instanceof Duplex;

          // object stream flag to indicate whether or not this stream
          // contains buffers or objects.
          this.objectMode = !!options.objectMode;

          if (isDuplex)
            this.objectMode = this.objectMode || !!options.writableObjectMode;

          // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()
          var hwm = options.highWaterMark;
          var writableHwm = options.writableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;

          if (hwm || hwm === 0) this.highWaterMark = hwm;
          else if (isDuplex && (writableHwm || writableHwm === 0))
            this.highWaterMark = writableHwm;
          else this.highWaterMark = defaultHwm;

          // cast to ints.
          this.highWaterMark = Math.floor(this.highWaterMark);

          // if _final has been called
          this.finalCalled = false;

          // drain event flag.
          this.needDrain = false;
          // at the start of calling end()
          this.ending = false;
          // when end() has been called, and returned
          this.ended = false;
          // when 'finish' is emitted
          this.finished = false;

          // has it been destroyed
          this.destroyed = false;

          // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.
          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode;

          // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.
          this.defaultEncoding = options.defaultEncoding || "utf8";

          // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.
          this.length = 0;

          // a flag to see when we're in the middle of a write.
          this.writing = false;

          // when true all writes will be buffered until .uncork() call
          this.corked = 0;

          // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.
          this.sync = true;

          // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.
          this.bufferProcessing = false;

          // the callback that's passed to _write(chunk,cb)
          this.onwrite = function (er) {
            onwrite(stream, er);
          };

          // the callback that the user supplies to write(chunk,encoding,cb)
          this.writecb = null;

          // the amount that is being written when _write is called.
          this.writelen = 0;

          this.bufferedRequest = null;
          this.lastBufferedRequest = null;

          // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted
          this.pendingcb = 0;

          // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams
          this.prefinished = false;

          // True if the error was already emitted and should not be thrown again
          this.errorEmitted = false;

          // count buffered requests
          this.bufferedRequestCount = 0;

          // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two
          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];
          while (current) {
            out.push(current);
            current = current.next;
          }
          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, "buffer", {
              get: internalUtil.deprecate(
                function () {
                  return this.getBuffer();
                },
                "_writableState.buffer is deprecated. Use _writableState.getBuffer " +
                  "instead.",
                "DEP0003"
              ),
            });
          } catch (_) {}
        })();

        // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.
        var realHasInstance;
        if (
          typeof Symbol === "function" &&
          Symbol.hasInstance &&
          typeof Function.prototype[Symbol.hasInstance] === "function"
        ) {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function (object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;

              return object && object._writableState instanceof WritableState;
            },
          });
        } else {
          realHasInstance = function (object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || __webpack_require__("b19a");

          // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.

          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          if (
            !realHasInstance.call(Writable, this) &&
            !(this instanceof Duplex)
          ) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this);

          // legacy.
          this.writable = true;

          if (options) {
            if (typeof options.write === "function")
              this._write = options.write;

            if (typeof options.writev === "function")
              this._writev = options.writev;

            if (typeof options.destroy === "function")
              this._destroy = options.destroy;

            if (typeof options.final === "function")
              this._final = options.final;
          }

          Stream.call(this);
        }

        // Otherwise people can pipe Writable streams, which is just wrong.
        Writable.prototype.pipe = function () {
          this.emit("error", new Error("Cannot pipe, not readable"));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error("write after end");
          // TODO: defer error events consistently everywhere, not just the cb
          stream.emit("error", er);
          pna.nextTick(cb, er);
        }

        // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.
        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError("May not write null values to stream");
          } else if (
            typeof chunk !== "string" &&
            chunk !== undefined &&
            !state.objectMode
          ) {
            er = new TypeError("Invalid non-string/buffer chunk");
          }
          if (er) {
            stream.emit("error", er);
            pna.nextTick(cb, er);
            valid = false;
          }
          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;
          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === "function") {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = "buffer";
          else if (!encoding) encoding = state.defaultEncoding;

          if (typeof cb !== "function") cb = nop;

          if (state.ended) writeAfterEnd(this, cb);
          else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }

          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;

          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;

            if (
              !state.writing &&
              !state.corked &&
              !state.finished &&
              !state.bufferProcessing &&
              state.bufferedRequest
            )
              clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
          encoding
        ) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === "string") encoding = encoding.toLowerCase();
          if (
            !(
              [
                "hex",
                "utf8",
                "utf-8",
                "ascii",
                "binary",
                "base64",
                "ucs2",
                "ucs-2",
                "utf16le",
                "utf-16le",
                "raw",
              ].indexOf((encoding + "").toLowerCase()) > -1
            )
          )
            throw new TypeError("Unknown encoding: " + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (
            !state.objectMode &&
            state.decodeStrings !== false &&
            typeof chunk === "string"
          ) {
            chunk = Buffer.from(chunk, encoding);
          }
          return chunk;
        }

        Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function () {
            return this._writableState.highWaterMark;
          },
        });

        // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.
        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);
            if (chunk !== newChunk) {
              isBuf = true;
              encoding = "buffer";
              chunk = newChunk;
            }
          }
          var len = state.objectMode ? 1 : chunk.length;

          state.length += len;

          var ret = state.length < state.highWaterMark;
          // we must ensure that previous needDrain will not be reset to false.
          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null,
            };
            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }
            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite);
          else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            pna.nextTick(cb, er);
            // this can emit finish, and it will always happen
            // after error
            pna.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            stream.emit("error", er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            stream.emit("error", er);
            // this can emit finish, but finish must
            // always follow error
            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;

          onwriteStateUpdate(state);

          if (er) onwriteError(stream, state, sync, er, cb);
          else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (
              !finished &&
              !state.corked &&
              !state.bufferProcessing &&
              state.bufferedRequest
            ) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        }

        // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.
        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit("drain");
          }
        }

        // if there's something in the buffer waiting, then process it
        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;

            var count = 0;
            var allBuffers = true;
            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }
            buffer.allBuffers = allBuffers;

            doWrite(
              stream,
              state,
              true,
              state.length,
              buffer,
              "",
              holder.finish
            );

            // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite
            state.pendingcb++;
            state.lastBufferedRequest = null;
            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }
            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;

              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--;
              // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.
              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error("_write() is not implemented"));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === "function") {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === "function") {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined)
            this.write(chunk, encoding);

          // .end() fully uncorks
          if (state.corked) {
            state.corked = 1;
            this.uncork();
          }

          // ignore unnecessary end() calls.
          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return (
            state.ending &&
            state.length === 0 &&
            state.bufferedRequest === null &&
            !state.finished &&
            !state.writing
          );
        }
        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;
            if (err) {
              stream.emit("error", err);
            }
            state.prefinished = true;
            stream.emit("prefinish");
            finishMaybe(stream, state);
          });
        }
        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === "function") {
              state.pendingcb++;
              state.finalCalled = true;
              pna.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit("prefinish");
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);
          if (need) {
            prefinish(stream, state);
            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit("finish");
            }
          }
          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);
          if (cb) {
            if (state.finished) pna.nextTick(cb);
            else stream.once("finish", cb);
          }
          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;
          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }
          if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = corkReq;
          } else {
            state.corkedRequestsFree = corkReq;
          }
        }

        Object.defineProperty(Writable.prototype, "destroyed", {
          get: function () {
            if (this._writableState === undefined) {
              return false;
            }
            return this._writableState.destroyed;
          },
          set: function (value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._writableState.destroyed = value;
          },
        });

        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;
        Writable.prototype._destroy = function (err, cb) {
          this.end();
          cb(err);
        };
        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("4362"), __webpack_require__("c8ba")));

      /***/
    },

    /***/ df7c: /***/ function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ (function (process) {
        // .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
        // backported and transplited with Babel, with backwards-compat fixes

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // resolves . and .. elements in a path array with directory names there
        // must be no slashes, empty elements, or device names (c:\) in the array
        // (so also no leading and trailing slashes - it does not distinguish
        // relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
              parts.splice(i, 1);
            } else if (last === "..") {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }

          // if the path is allowed to go above the root, restore leading ..s
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift("..");
            }
          }

          return parts;
        }

        // path.resolve([from ...], to)
        // posix version
        exports.resolve = function () {
          var resolvedPath = "",
            resolvedAbsolute = false;

          for (
            var i = arguments.length - 1;
            i >= -1 && !resolvedAbsolute;
            i--
          ) {
            var path = i >= 0 ? arguments[i] : process.cwd();

            // Skip empty and invalid entries
            if (typeof path !== "string") {
              throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path) {
              continue;
            }

            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/";
          }

          // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)

          // Normalize the path
          resolvedPath = normalizeArray(
            filter(resolvedPath.split("/"), function (p) {
              return !!p;
            }),
            !resolvedAbsolute
          ).join("/");

          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
        };

        // path.normalize(path)
        // posix version
        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
            trailingSlash = substr(path, -1) === "/";

          // Normalize the path
          path = normalizeArray(
            filter(path.split("/"), function (p) {
              return !!p;
            }),
            !isAbsolute
          ).join("/");

          if (!path && !isAbsolute) {
            path = ".";
          }
          if (path && trailingSlash) {
            path += "/";
          }

          return (isAbsolute ? "/" : "") + path;
        };

        // posix version
        exports.isAbsolute = function (path) {
          return path.charAt(0) === "/";
        };

        // posix version
        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(
            filter(paths, function (p, index) {
              if (typeof p !== "string") {
                throw new TypeError("Arguments to path.join must be strings");
              }
              return p;
            }).join("/")
          );
        };

        // path.relative(from, to)
        // posix version
        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);

          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== "") break;
            }

            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== "") break;
            }

            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }

          var fromParts = trim(from.split("/"));
          var toParts = trim(to.split("/"));

          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }

          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
          }

          outputParts = outputParts.concat(toParts.slice(samePartsLength));

          return outputParts.join("/");
        };

        exports.sep = "/";
        exports.delimiter = ":";

        exports.dirname = function (path) {
          if (typeof path !== "string") path = path + "";
          if (path.length === 0) return ".";
          var code = path.charCodeAt(0);
          var hasRoot = code === 47; /*/*/
          var end = -1;
          var matchedSlash = true;
          for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);
            if (code === 47 /*/*/) {
              if (!matchedSlash) {
                end = i;
                break;
              }
            } else {
              // We saw the first non-path separator
              matchedSlash = false;
            }
          }

          if (end === -1) return hasRoot ? "/" : ".";
          if (hasRoot && end === 1) {
            // return '//';
            // Backwards-compat fix:
            return "/";
          }
          return path.slice(0, end);
        };

        function basename(path) {
          if (typeof path !== "string") path = path + "";

          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;

          for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === 47 /*/*/) {
              // If we reached a path separator that was not part of a set of path
              // separators at the end of the string, stop now
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // path component
              matchedSlash = false;
              end = i + 1;
            }
          }

          if (end === -1) return "";
          return path.slice(start, end);
        }

        // Uses a mixed approach for backwards-compatibility, as ext behavior changed
        // in new Node.js versions, so only basename() above is backported here
        exports.basename = function (path, ext) {
          var f = basename(path);
          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }
          return f;
        };

        exports.extname = function (path) {
          if (typeof path !== "string") path = path + "";
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          // Track the state of characters (if any) we see before our first dot and
          // after any path separator we find
          var preDotState = 0;
          for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/) {
              // If we reached a path separator that was not part of a set of path
              // separators at the end of the string, stop now
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              // We saw the first non-path separator, mark this as the end of our
              // extension
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46 /*.*/) {
              // If this is our first dot, mark it as the start of our extension
              if (startDot === -1) startDot = i;
              else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) {
              // We saw a non-dot and non-path separator before our dot, so we should
              // have a good chance at having a non-empty extension
              preDotState = -1;
            }
          }

          if (
            startDot === -1 ||
            end === -1 ||
            // We saw a non-dot character immediately before the dot
            preDotState === 0 ||
            // The (right-most) trimmed path component is exactly '..'
            (preDotState === 1 &&
              startDot === end - 1 &&
              startDot === startPart + 1)
          ) {
            return "";
          }
          return path.slice(startDot, end);
        };

        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }
          return res;
        }

        // String.prototype.substr - negative index don't work in IE8
        var substr =
          "ab".substr(-1) === "b"
            ? function (str, start, len) {
                return str.substr(start, len);
              }
            : function (str, start, len) {
                if (start < 0) start = str.length + start;
                return str.substr(start, len);
              };

        /* WEBPACK VAR INJECTION */
      }.call(this, __webpack_require__("4362")));

      /***/
    },

    /***/ e372: /***/ function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__("ad71");
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = __webpack_require__("dc14");
      exports.Duplex = __webpack_require__("b19a");
      exports.Transform = __webpack_require__("27bf");
      exports.PassThrough = __webpack_require__("780f");

      /***/
    },

    /***/ e3db: /***/ function (module, exports) {
      var toString = {}.toString;

      module.exports =
        Array.isArray ||
        function (arr) {
          return toString.call(arr) == "[object Array]";
        };

      /***/
    },

    /***/ e6a9: /***/ function (module, exports, __webpack_require__) {
      "use strict";

      var __importDefault =
        (this && this.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      var clipboard_1 = __importDefault(__webpack_require__("b311"));
      exports.default = function (opts) {
        // default appendToBody true
        var appendToBody =
          (opts === null || opts === void 0 ? void 0 : opts.appendToBody) ===
          undefined
            ? true
            : opts.appendToBody;
        return {
          toClipboard: function (text, container) {
            return new Promise(function (resolve, reject) {
              // make fake element
              var fakeEl = document.createElement("button");
              // setup a new Clipboard.js
              var clipboard = new clipboard_1.default(fakeEl, {
                text: function () {
                  return text;
                },
                action: function () {
                  return "copy";
                },
                container: container !== undefined ? container : document.body,
              });
              clipboard.on("success", function (e) {
                clipboard.destroy();
                resolve(e);
              });
              clipboard.on("error", function (e) {
                clipboard.destroy();
                reject(e);
              });
              // appendToBody fixes IE
              if (appendToBody) document.body.appendChild(fakeEl);
              // simulate click
              fakeEl.click();
              // remove from body if appended
              if (appendToBody) document.body.removeChild(fakeEl);
            });
          },
        };
      };

      /***/
    },

    /***/ f851: /***/ function (module, exports) {
      /*
Language: PostgreSQL and PL/pgSQL
Author: Egor Rogov (e.rogov@postgrespro.ru)
Website: https://www.postgresql.org/docs/11/sql.html
Description:
    This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
    It is based on PostgreSQL version 11. Some notes:
    - Text in double-dollar-strings is _always_ interpreted as some programming code. Text
      in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
    - There are quite a bit "special cases". That's because many keywords are not strictly
      they are keywords in some contexts and ordinary identifiers in others. Only some
      of such cases are handled; you still can get some of your identifiers highlighted
      wrong way.
    - Function names deliberately are not highlighted. There is no way to tell function
      call from other constructs, hence we can't highlight _all_ function names. And
      some names highlighted while others not looks ugly.
*/

      function pgsql(hljs) {
        const COMMENT_MODE = hljs.COMMENT("--", "$");
        const UNQUOTED_IDENT = "[a-zA-Z_][a-zA-Z_0-9$]*";
        const DOLLAR_STRING = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$";
        const LABEL = "<<\\s*" + UNQUOTED_IDENT + "\\s*>>";

        const SQL_KW =
          // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
          // https://www.postgresql.org/docs/11/static/sql-commands.html
          // SQL commands (starting words)
          "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE " +
          "DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY " +
          "PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW " +
          "START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES " +
          // SQL commands (others)
          "AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN " +
          "WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS " +
          "FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM " +
          "TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS " +
          "METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION " +
          "INDEX PROCEDURE ASSERTION " +
          // additional reserved key words
          "ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK " +
          "COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS " +
          "DEFERRABLE RANGE " +
          "DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING " +
          "ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT " +
          "NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY " +
          "REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN " +
          "TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH " +
          // some of non-reserved (which are used in clauses or as PL/pgSQL keyword)
          "BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN " +
          "BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT " +
          "TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN " +
          "EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH " +
          "REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL " +
          "ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED " +
          "INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 " +
          "INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE " +
          "ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES " +
          "RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS " +
          "UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF " +
          // some parameters of VACUUM/ANALYZE/EXPLAIN
          "FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING " +
          //
          "RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED " +
          "OF NOTHING NONE EXCLUDE ATTRIBUTE " +
          // from GRANT (not keywords actually)
          "USAGE ROUTINES " +
          // actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)
          "TRUE FALSE NAN INFINITY ";

        const ROLE_ATTRS = // only those not in keywrods already
          "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT " +
          "LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ";

        const PLPGSQL_KW =
          "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS " +
          "STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT " +
          "OPEN ";

        const TYPES =
          // https://www.postgresql.org/docs/11/static/datatype.html
          "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR " +
          "CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 " +
          "MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 " +
          "SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 " +
          "TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR " +
          "INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 " +
          // pseudotypes
          "ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL " +
          "RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR " +
          // spec. type
          "NAME " +
          // OID-types
          "OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 " +
          "REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 "; // +

        const TYPES_RE = TYPES.trim()
          .split(" ")
          .map(function (val) {
            return val.split("|")[0];
          })
          .join("|");

        const SQL_BI =
          "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP " +
          "CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ";

        const PLPGSQL_BI =
          "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 " +
          "TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 " +
          // get diagnostics
          "ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME " +
          "PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 " +
          "PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ";

        const PLPGSQL_EXCEPTIONS =
          // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
          "SQLSTATE SQLERRM|10 " +
          "SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING " +
          "NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED " +
          "STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED " +
          "SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE " +
          "SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION " +
          "TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED " +
          "INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR " +
          "INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION " +
          "STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION " +
          "DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW " +
          "DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW " +
          "INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION " +
          "INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION " +
          "INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST " +
          "INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE " +
          "NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE " +
          "INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE " +
          "INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT " +
          "INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH " +
          "NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE " +
          "SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION " +
          "SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING " +
          "FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION " +
          "BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT " +
          "INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION " +
          "INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION " +
          "UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE " +
          "INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE " +
          "HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION " +
          "INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION " +
          "NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION " +
          "SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION " +
          "IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME " +
          "TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD " +
          "DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST " +
          "INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT " +
          "MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED " +
          "READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION " +
          "CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED " +
          "PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED " +
          "EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED " +
          "TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED " +
          "SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME " +
          "INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION " +
          "SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED " +
          "SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE " +
          "GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME " +
          "NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH " +
          "INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN " +
          "UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT " +
          "DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION " +
          "DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS " +
          "DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS " +
          "INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION " +
          "INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION " +
          "INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION " +
          "INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL " +
          "OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED " +
          "STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE " +
          "OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION " +
          "QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED " +
          "SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR " +
          "LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED " +
          "FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION " +
          "FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER " +
          "FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS " +
          "FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX " +
          "FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH " +
          "FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES " +
          "FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE " +
          "FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION " +
          "FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR " +
          "RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED " +
          "INDEX_CORRUPTED ";

        const FUNCTIONS =
          // https://www.postgresql.org/docs/11/static/functions-aggregate.html
          "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG " +
          "JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG " +
          "CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE " +
          "REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP " +
          "PERCENTILE_CONT PERCENTILE_DISC " +
          // https://www.postgresql.org/docs/11/static/functions-window.html
          "ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE " +
          // https://www.postgresql.org/docs/11/static/functions-comparison.html
          "NUM_NONNULLS NUM_NULLS " +
          // https://www.postgresql.org/docs/11/static/functions-math.html
          "ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT " +
          "TRUNC WIDTH_BUCKET " +
          "RANDOM SETSEED " +
          "ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND " +
          // https://www.postgresql.org/docs/11/static/functions-string.html
          "BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER " +
          "ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP " +
          "LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 " +
          "QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY " +
          "REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR " +
          "TO_ASCII TO_HEX TRANSLATE " +
          // https://www.postgresql.org/docs/11/static/functions-binarystring.html
          "OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE " +
          // https://www.postgresql.org/docs/11/static/functions-formatting.html
          "TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP " +
          // https://www.postgresql.org/docs/11/static/functions-datetime.html
          "AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL " +
          "MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 " +
          "TIMEOFDAY TRANSACTION_TIMESTAMP|10 " +
          // https://www.postgresql.org/docs/11/static/functions-enum.html
          "ENUM_FIRST ENUM_LAST ENUM_RANGE " +
          // https://www.postgresql.org/docs/11/static/functions-geometry.html
          "AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH " +
          "BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON " +
          // https://www.postgresql.org/docs/11/static/functions-net.html
          "ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY " +
          "INET_MERGE MACADDR8_SET7BIT " +
          // https://www.postgresql.org/docs/11/static/functions-textsearch.html
          "ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY " +
          "QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE " +
          "TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY " +
          "TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN " +
          // https://www.postgresql.org/docs/11/static/functions-xml.html
          "XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT " +
          "XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT " +
          "XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES " +
          "TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA " +
          "QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA " +
          "CURSOR_TO_XML CURSOR_TO_XMLSCHEMA " +
          "SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA " +
          "DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA " +
          "XMLATTRIBUTES " +
          // https://www.postgresql.org/docs/11/static/functions-json.html
          "TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT " +
          "JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH " +
          "JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH " +
          "JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET " +
          "JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT " +
          "JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET " +
          "JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY " +
          // https://www.postgresql.org/docs/11/static/functions-sequence.html
          "CURRVAL LASTVAL NEXTVAL SETVAL " +
          // https://www.postgresql.org/docs/11/static/functions-conditional.html
          "COALESCE NULLIF GREATEST LEAST " +
          // https://www.postgresql.org/docs/11/static/functions-array.html
          "ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION " +
          "ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY " +
          "STRING_TO_ARRAY UNNEST " +
          // https://www.postgresql.org/docs/11/static/functions-range.html
          "ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE " +
          // https://www.postgresql.org/docs/11/static/functions-srf.html
          "GENERATE_SERIES GENERATE_SUBSCRIPTS " +
          // https://www.postgresql.org/docs/11/static/functions-info.html
          "CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT " +
          "INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE " +
          "TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE " +
          "COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION " +
          "TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX " +
          "TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS " +
          // https://www.postgresql.org/docs/11/static/functions-admin.html
          "CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE " +
          "GIN_CLEAN_PENDING_LIST " +
          // https://www.postgresql.org/docs/11/static/functions-trigger.html
          "SUPPRESS_REDUNDANT_UPDATES_TRIGGER " +
          // ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html
          "LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE " +
          //
          "GROUPING CAST ";

        const FUNCTIONS_RE = FUNCTIONS.trim()
          .split(" ")
          .map(function (val) {
            return val.split("|")[0];
          })
          .join("|");

        return {
          name: "PostgreSQL",
          aliases: ["postgres", "postgresql"],
          case_insensitive: true,
          keywords: {
            keyword: SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
            built_in: SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS,
          },
          // Forbid some cunstructs from other languages to improve autodetect. In fact
          // "[a-z]:" is legal (as part of array slice), but improbabal.
          illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
          contains: [
            // special handling of some words, which are reserved only in some contexts
            {
              className: "keyword",
              variants: [
                {
                  begin: /\bTEXT\s*SEARCH\b/,
                },
                {
                  begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/,
                },
                {
                  begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/,
                },
                {
                  begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/,
                },
                {
                  begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/,
                },
                {
                  begin: /\bNULLS\s+(FIRST|LAST)\b/,
                },
                {
                  begin: /\bEVENT\s+TRIGGER\b/,
                },
                {
                  begin: /\b(MAPPING|OR)\s+REPLACE\b/,
                },
                {
                  begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/,
                },
                {
                  begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/,
                },
                {
                  begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/,
                },
                {
                  begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/,
                },
                {
                  begin: /\bPRESERVE\s+ROWS\b/,
                },
                {
                  begin: /\bDISCARD\s+PLANS\b/,
                },
                {
                  begin: /\bREFERENCING\s+(OLD|NEW)\b/,
                },
                {
                  begin: /\bSKIP\s+LOCKED\b/,
                },
                {
                  begin: /\bGROUPING\s+SETS\b/,
                },
                {
                  begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/,
                },
                {
                  begin: /\b(WITH|WITHOUT)\s+HOLD\b/,
                },
                {
                  begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/,
                },
                {
                  begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/,
                },
                {
                  begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/,
                },
                {
                  begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/,
                },
                {
                  begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/,
                },
                {
                  begin: /\bSECURITY\s+LABEL\b/,
                },
                {
                  begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/,
                },
                {
                  begin: /\bWITH\s+(NO\s+)?DATA\b/,
                },
                {
                  begin: /\b(FOREIGN|SET)\s+DATA\b/,
                },
                {
                  begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/,
                },
                {
                  begin: /\b(WITH|FOR)\s+ORDINALITY\b/,
                },
                {
                  begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/,
                },
                {
                  begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/,
                },
                {
                  begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/,
                },
                {
                  begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/,
                },
                {
                  begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/,
                },
                {
                  begin: /\bAT\s+TIME\s+ZONE\b/,
                },
                {
                  begin: /\bGRANTED\s+BY\b/,
                },
                {
                  begin: /\bRETURN\s+(QUERY|NEXT)\b/,
                },
                {
                  begin: /\b(ATTACH|DETACH)\s+PARTITION\b/,
                },
                {
                  begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/,
                },
                {
                  begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/,
                },
                {
                  begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/,
                },
              ],
            },
            // functions named as keywords, followed by '('
            {
              begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/,
              // keywords: { built_in: 'FORMAT FAMILY VERSION' }
            },
            // INCLUDE ( ... ) in index_parameters in CREATE TABLE
            {
              begin: /\bINCLUDE\s*\(/,
              keywords: "INCLUDE",
            },
            // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
            {
              begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/,
            },
            // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
            // and in PL/pgSQL RAISE ... USING
            {
              begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/,
            },
            // PG_smth; HAS_some_PRIVILEGE
            {
              // className: 'built_in',
              begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
              relevance: 10,
            },
            // extract
            {
              begin: /\bEXTRACT\s*\(/,
              end: /\bFROM\b/,
              returnEnd: true,
              keywords: {
                // built_in: 'EXTRACT',
                type:
                  "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS " +
                  "MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR " +
                  "TIMEZONE_MINUTE WEEK YEAR",
              },
            },
            // xmlelement, xmlpi - special NAME
            {
              begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
              keywords: {
                // built_in: 'XMLELEMENT XMLPI',
                keyword: "NAME",
              },
            },
            // xmlparse, xmlserialize
            {
              begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
              keywords: {
                // built_in: 'XMLPARSE XMLSERIALIZE',
                keyword: "DOCUMENT CONTENT",
              },
            },
            // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
            // nearest following numeric constant. Without with trick we find a lot of "keywords"
            // in 'avrasm' autodetection test...
            {
              beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
              end: hljs.C_NUMBER_RE,
              returnEnd: true,
              keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE",
            },
            // WITH|WITHOUT TIME ZONE as part of datatype
            {
              className: "type",
              begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/,
            },
            // INTERVAL optional fields
            {
              className: "type",
              begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/,
            },
            // Pseudo-types which allowed only as return type
            {
              begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
              keywords: {
                keyword: "RETURNS",
                type:
                  "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER",
              },
            },
            // Known functions - only when followed by '('
            {
              begin: "\\b(" + FUNCTIONS_RE + ")\\s*\\(",
              // keywords: { built_in: FUNCTIONS }
            },
            // Types
            {
              begin: "\\.(" + TYPES_RE + ")\\b", // prevent highlight as type, say, 'oid' in 'pgclass.oid'
            },
            {
              begin: "\\b(" + TYPES_RE + ")\\s+PATH\\b", // in XMLTABLE
              keywords: {
                keyword: "PATH", // hopefully no one would use PATH type in XMLTABLE...
                type: TYPES.replace("PATH ", ""),
              },
            },
            {
              className: "type",
              begin: "\\b(" + TYPES_RE + ")\\b",
            },
            // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
            {
              className: "string",
              begin: "'",
              end: "'",
              contains: [
                {
                  begin: "''",
                },
              ],
            },
            {
              className: "string",
              begin: "(e|E|u&|U&)'",
              end: "'",
              contains: [
                {
                  begin: "\\\\.",
                },
              ],
              relevance: 10,
            },
            hljs.END_SAME_AS_BEGIN({
              begin: DOLLAR_STRING,
              end: DOLLAR_STRING,
              contains: [
                {
                  // actually we want them all except SQL; listed are those with known implementations
                  // and XML + JSON just in case
                  subLanguage: [
                    "pgsql",
                    "perl",
                    "python",
                    "tcl",
                    "r",
                    "lua",
                    "java",
                    "php",
                    "ruby",
                    "bash",
                    "scheme",
                    "xml",
                    "json",
                  ],
                  endsWithParent: true,
                },
              ],
            }),
            // identifiers in quotes
            {
              begin: '"',
              end: '"',
              contains: [
                {
                  begin: '""',
                },
              ],
            },
            // numbers
            hljs.C_NUMBER_MODE,
            // comments
            hljs.C_BLOCK_COMMENT_MODE,
            COMMENT_MODE,
            // PL/pgSQL staff
            // %ROWTYPE, %TYPE, $n
            {
              className: "meta",
              variants: [
                {
                  // %TYPE, %ROWTYPE
                  begin: "%(ROW)?TYPE",
                  relevance: 10,
                },
                {
                  // $n
                  begin: "\\$\\d+",
                },
                {
                  // #compiler option
                  begin: "^#\\w",
                  end: "$",
                },
              ],
            },
            // <<labeles>>
            {
              className: "symbol",
              begin: LABEL,
              relevance: 10,
            },
          ],
        };
      }

      module.exports = pgsql;

      /***/
    },

    /***/ faa1: /***/ function (module, exports, __webpack_require__) {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var R = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply =
        R && typeof R.apply === "function"
          ? R.apply
          : function ReflectApply(target, receiver, args) {
              return Function.prototype.apply.call(target, receiver, args);
            };

      var ReflectOwnKeys;
      if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
          return Object.getOwnPropertyNames(target).concat(
            Object.getOwnPropertySymbols(target)
          );
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys(target) {
          return Object.getOwnPropertyNames(target);
        };
      }

      function ProcessEmitWarning(warning) {
        if (console && console.warn) console.warn(warning);
      }

      var NumberIsNaN =
        Number.isNaN ||
        function NumberIsNaN(value) {
          return value !== value;
        };

      function EventEmitter() {
        EventEmitter.init.call(this);
      }
      module.exports = EventEmitter;
      module.exports.once = once;

      // Backwards-compat with node 0.10.x
      EventEmitter.EventEmitter = EventEmitter;

      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._eventsCount = 0;
      EventEmitter.prototype._maxListeners = undefined;

      // By default EventEmitters will print a warning if more than 10 listeners are
      // added to it. This is a useful default which helps finding memory leaks.
      var defaultMaxListeners = 10;

      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError(
            'The "listener" argument must be of type Function. Received type ' +
              typeof listener
          );
        }
      }

      Object.defineProperty(EventEmitter, "defaultMaxListeners", {
        enumerable: true,
        get: function () {
          return defaultMaxListeners;
        },
        set: function (arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError(
              'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                arg +
                "."
            );
          }
          defaultMaxListeners = arg;
        },
      });

      EventEmitter.init = function () {
        if (
          this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events
        ) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        }

        this._maxListeners = this._maxListeners || undefined;
      };

      // Obviously not all Emitters should be limited to 10. This function allows
      // that to be increased. Set to zero for unlimited.
      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError(
            'The value of "n" is out of range. It must be a non-negative number. Received ' +
              n +
              "."
          );
        }
        this._maxListeners = n;
        return this;
      };

      function _getMaxListeners(that) {
        if (that._maxListeners === undefined)
          return EventEmitter.defaultMaxListeners;
        return that._maxListeners;
      }

      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };

      EventEmitter.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
        var doError = type === "error";

        var events = this._events;
        if (events !== undefined)
          doError = doError && events.error === undefined;
        else if (!doError) return false;

        // If there is no 'error' event listener then throw.
        if (doError) {
          var er;
          if (args.length > 0) er = args[0];
          if (er instanceof Error) {
            // Note: The comments on the `throw` lines are intentional, they show
            // up in Node's output if this results in an unhandled exception.
            throw er; // Unhandled 'error' event
          }
          // At least give some kind of context to the user
          var err = new Error(
            "Unhandled error." + (er ? " (" + er.message + ")" : "")
          );
          err.context = er;
          throw err; // Unhandled 'error' event
        }

        var handler = events[type];

        if (handler === undefined) return false;

        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
        }

        return true;
      };

      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;

        checkListener(listener);

        events = target._events;
        if (events === undefined) {
          events = target._events = Object.create(null);
          target._eventsCount = 0;
        } else {
          // To avoid recursion in the case that type === "newListener"! Before
          // adding it to the listeners, first emit "newListener".
          if (events.newListener !== undefined) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );

            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
          }
          existing = events[type];
        }

        if (existing === undefined) {
          // Optimize the case of one listener. Don't need the extra array object.
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            // Adding the second element, need to change to array.
            existing = events[type] = prepend
              ? [listener, existing]
              : [existing, listener];
            // If we've already got an array, just append.
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }

          // Check for listener leak
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error(
              "Possible EventEmitter memory leak detected. " +
                existing.length +
                " " +
                String(type) +
                " listeners " +
                "added. Use emitter.setMaxListeners() to " +
                "increase limit"
            );
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }

        return target;
      }

      EventEmitter.prototype.addListener = function addListener(
        type,
        listener
      ) {
        return _addListener(this, type, listener, false);
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.prependListener = function prependListener(
        type,
        listener
      ) {
        return _addListener(this, type, listener, true);
      };

      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0) return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }

      function _onceWrap(target, type, listener) {
        var state = {
          fired: false,
          wrapFn: undefined,
          target: target,
          type: type,
          listener: listener,
        };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }

      EventEmitter.prototype.once = function once(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };

      EventEmitter.prototype.prependOnceListener = function prependOnceListener(
        type,
        listener
      ) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

      // Emits a 'removeListener' event if and only if the listener was removed.
      EventEmitter.prototype.removeListener = function removeListener(
        type,
        listener
      ) {
        var list, events, position, i, originalListener;

        checkListener(listener);

        events = this._events;
        if (events === undefined) return this;

        list = events[type];
        if (list === undefined) return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0) this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0) return this;

          if (position === 0) list.shift();
          else {
            spliceOne(list, position);
          }

          if (list.length === 1) events[type] = list[0];

          if (events.removeListener !== undefined)
            this.emit("removeListener", type, originalListener || listener);
        }

        return this;
      };

      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

      EventEmitter.prototype.removeAllListeners = function removeAllListeners(
        type
      ) {
        var listeners, events, i;

        events = this._events;
        if (events === undefined) return this;

        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

      function _listeners(target, type, unwrap) {
        var events = target._events;

        if (events === undefined) return [];

        var evlistener = events[type];
        if (evlistener === undefined) return [];

        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];

        return unwrap
          ? unwrapListeners(evlistener)
          : arrayClone(evlistener, evlistener.length);
      }

      EventEmitter.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };

      EventEmitter.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };

      EventEmitter.listenerCount = function (emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };

      EventEmitter.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;

        if (events !== undefined) {
          var evlistener = events[type];

          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== undefined) {
            return evlistener.length;
          }
        }

        return 0;
      }

      EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };

      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i) copy[i] = arr[i];
        return copy;
      }

      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++) list[index] = list[index + 1];
        list.pop();
      }

      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }

      function once(emitter, name) {
        return new Promise(function (resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }

          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }

          eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true,
          });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, {
              once: true,
            });
          }
        });
      }

      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }

      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          // EventTarget does not have `error` event semantics like Node
          // EventEmitters, we do not listen for `error` events here.
          emitter.addEventListener(name, function wrapListener(arg) {
            // IE does not have builtin `{ once: true }` support so we
            // have to do it manually.
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          });
        } else {
          throw new TypeError(
            'The "emitter" argument must be of type EventEmitter. Received type ' +
              typeof emitter
          );
        }
      }

      /***/
    },

    /***/ fb15: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__
    ) {
      "use strict";
      // ESM COMPAT FLAG
      __webpack_require__.r(__webpack_exports__);

      // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
      // This file is imported into lib/wc client bundles.

      if (typeof window !== "undefined") {
        var currentScript = window.document.currentScript;
        if (true) {
          var getCurrentScript = __webpack_require__("8875");
          currentScript = getCurrentScript();

          // for backward compatibility, because previously we directly included the polyfill
          if (!("currentScript" in document)) {
            Object.defineProperty(document, "currentScript", {
              get: getCurrentScript,
            });
          }
        }

        var src =
          currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
        if (src) {
          __webpack_require__.p = src[1]; // eslint-disable-line
        }
      }

      // Indicate to webpack that this file can be concatenated
      /* harmony default export */ var setPublicPath = null;

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Plan.vue?vue&type=template&id=d7bf405a&
      var render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass:
              "plan-container d-flex flex-column overflow-hidden flex-grow-1 bg-light",
          },
          [
            _c("div", [
              _c("ul", { staticClass: "nav nav-pills" }, [
                _c("li", { staticClass: "nav-item p-1" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link px-2 py-0",
                      class: { active: _vm.activeTab === "plan" },
                      attrs: { href: "#plan" },
                    },
                    [_vm._v("Plan")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", { staticClass: "nav-item p-1" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link px-2 py-0",
                      class: { active: _vm.activeTab === "raw" },
                      attrs: { href: "#raw" },
                    },
                    [_vm._v("Raw")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", { staticClass: "nav-item p-1" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link px-2 py-0",
                      class: {
                        active: _vm.activeTab === "query",
                        disabled: !_vm.queryText,
                      },
                      attrs: { href: "#query" },
                    },
                    [_vm._v("Query")]
                  ),
                ]),
                _vm._v(" "),
                _c("li", { staticClass: "nav-item p-1" }, [
                  _c(
                    "a",
                    {
                      staticClass: "nav-link px-2 py-0",
                      class: { active: _vm.activeTab === "stats" },
                      attrs: { href: "#stats" },
                    },
                    [_vm._v("Stats")]
                  ),
                ]),
              ]),
            ]),
            _vm._v(" "),
            _c(
              "div",
              { staticClass: "tab-content flex-grow-1 d-flex overflow-hidden" },
              [
                _vm.validationMessage
                  ? _c(
                      "div",
                      {
                        staticClass:
                          "flex-grow-1 d-flex justify-content-center",
                      },
                      [
                        _c(
                          "div",
                          {
                            staticClass: "alert alert-danger align-self-center",
                          },
                          [_vm._v(_vm._s(_vm.validationMessage))]
                        ),
                      ]
                    )
                  : _vm._e(),
                _vm._v(" "),
                !_vm.validationMessage
                  ? _c(
                      "div",
                      {
                        staticClass: "tab-pane flex-grow-1 overflow-hidden",
                        class: {
                          "show active d-flex": _vm.activeTab === "plan",
                        },
                      },
                      [
                        _c(
                          "div",
                          {
                            staticClass:
                              "d-flex flex-column flex-grow-1 overflow-hidden",
                            class: [
                              _vm.viewOptions.viewMode,
                              _vm.viewOptions.orientation,
                            ],
                          },
                          [
                            _vm.plan
                              ? _c(
                                  "div",
                                  {
                                    staticClass:
                                      "plan-stats flex-shrink-0 d-flex border-bottom border-top form-inline",
                                  },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "d-inline-block px-2" },
                                      [
                                        _vm._v(
                                          "\n            Execution time:\n            "
                                        ),
                                        !_vm.plan.planStats.executionTime
                                          ? [
                                              _c(
                                                "span",
                                                { staticClass: "text-muted" },
                                                [
                                                  _vm._v(
                                                    "\n                N/A\n                "
                                                  ),
                                                  _c("i", {
                                                    directives: [
                                                      {
                                                        name: "tippy",
                                                        rawName: "v-tippy",
                                                      },
                                                    ],
                                                    staticClass:
                                                      "fa fa-info-circle cursor-help",
                                                    attrs: {
                                                      content: _vm.getHelpMessage(
                                                        "missing execution time"
                                                      ),
                                                    },
                                                  }),
                                                ]
                                              ),
                                            ]
                                          : [
                                              _c("span", {
                                                staticClass: "stat-value",
                                                domProps: {
                                                  innerHTML: _vm._s(
                                                    _vm.$options.filters.duration(
                                                      _vm.plan.planStats
                                                        .executionTime
                                                    )
                                                  ),
                                                },
                                              }),
                                            ],
                                      ],
                                      2
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "d-inline-block border-left px-2",
                                      },
                                      [
                                        _vm._v(
                                          "\n            Planning time:\n            "
                                        ),
                                        !_vm.plan.planStats.planningTime
                                          ? [
                                              _c(
                                                "span",
                                                { staticClass: "text-muted" },
                                                [
                                                  _vm._v(
                                                    "\n                N/A\n                "
                                                  ),
                                                  _c("i", {
                                                    directives: [
                                                      {
                                                        name: "tippy",
                                                        rawName: "v-tippy",
                                                      },
                                                    ],
                                                    staticClass:
                                                      "fa fa-info-circle cursor-help",
                                                    attrs: {
                                                      content: _vm.getHelpMessage(
                                                        "missing planning time"
                                                      ),
                                                    },
                                                  }),
                                                ]
                                              ),
                                            ]
                                          : [
                                              _c(
                                                "span",
                                                { staticClass: "stat-value" },
                                                [
                                                  _c("span", {
                                                    class:
                                                      "mb-0 p-0 px-1 alert " +
                                                      _vm.planningTimeClass(
                                                        (_vm.plan.planStats
                                                          .planningTime /
                                                          _vm.plan.planStats
                                                            .executionTime) *
                                                          100
                                                      ),
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        _vm.$options.filters.duration(
                                                          _vm.plan.planStats
                                                            .planningTime
                                                        )
                                                      ),
                                                    },
                                                  }),
                                                ]
                                              ),
                                            ],
                                      ],
                                      2
                                    ),
                                    _vm._v(" "),
                                    _vm.plan.planStats.jitTime
                                      ? _c(
                                          "div",
                                          {
                                            staticClass:
                                              "d-inline-block border-left px-2",
                                          },
                                          [
                                            _vm._v(
                                              "\n            JIT:\n            "
                                            ),
                                            _c(
                                              "span",
                                              { staticClass: "stat-value" },
                                              [
                                                _c("span", {
                                                  class:
                                                    "mb-0 p-0 px-1 alert " +
                                                    _vm.planningTimeClass(
                                                      (_vm.plan.planStats
                                                        .jitTime /
                                                        _vm.plan.planStats
                                                          .executionTime) *
                                                        100
                                                    ),
                                                  domProps: {
                                                    innerHTML: _vm._s(
                                                      _vm.$options.filters.duration(
                                                        _vm.plan.planStats
                                                          .jitTime
                                                      )
                                                    ),
                                                  },
                                                }),
                                              ]
                                            ),
                                          ]
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "d-inline-block border-left px-2 position-relative",
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "stat-label" },
                                          [_vm._v("Triggers: ")]
                                        ),
                                        _vm._v(" "),
                                        _vm.plan.planStats.triggers.length
                                          ? [
                                              _c(
                                                "span",
                                                { staticClass: "stat-value" },
                                                [
                                                  _c("span", {
                                                    class:
                                                      "mb-0 p-0 px-1 alert " +
                                                      _vm.$options.filters.durationClass(
                                                        _vm.totalTriggerDurationPercent
                                                      ),
                                                    domProps: {
                                                      innerHTML: _vm._s(
                                                        _vm.$options.filters.duration(
                                                          _vm.triggersTotalDuration
                                                        )
                                                      ),
                                                    },
                                                  }),
                                                ]
                                              ),
                                              _vm._v(" "),
                                              _c(
                                                "button",
                                                {
                                                  staticClass:
                                                    "bg-transparent border-0 p-0 m-0 pl-1",
                                                  on: {
                                                    click: function ($event) {
                                                      $event.preventDefault();
                                                      _vm.showTriggers = !_vm.showTriggers;
                                                    },
                                                  },
                                                },
                                                [
                                                  _c("i", {
                                                    staticClass:
                                                      "fa fa-caret-down text-muted",
                                                  }),
                                                ]
                                              ),
                                              _vm._v(" "),
                                              _vm.showTriggers
                                                ? _c(
                                                    "div",
                                                    {
                                                      staticClass:
                                                        "stat-dropdown-container text-left",
                                                    },
                                                    [
                                                      _c(
                                                        "button",
                                                        {
                                                          staticClass:
                                                            "btn btn-close float-right",
                                                          on: {
                                                            click: function (
                                                              $event
                                                            ) {
                                                              _vm.showTriggers = false;
                                                            },
                                                          },
                                                        },
                                                        [
                                                          _c("i", {
                                                            staticClass:
                                                              "fa fa-times",
                                                          }),
                                                        ]
                                                      ),
                                                      _vm._v(" "),
                                                      _c("h3", [
                                                        _vm._v("Triggers"),
                                                      ]),
                                                      _vm._v(" "),
                                                      _vm._l(
                                                        _vm.plan.planStats
                                                          .triggers,
                                                        function (
                                                          trigger,
                                                          index
                                                        ) {
                                                          return _c("div", [
                                                            _vm._v(
                                                              "\n                  " +
                                                                _vm._s(
                                                                  trigger[
                                                                    "Trigger Name"
                                                                  ]
                                                                ) +
                                                                "\n                  "
                                                            ),
                                                            _c("br"),
                                                            _vm._v(" "),
                                                            _c(
                                                              "span",
                                                              {
                                                                staticClass:
                                                                  "text-muted",
                                                              },
                                                              [_vm._v("Called")]
                                                            ),
                                                            _vm._v(
                                                              " " +
                                                                _vm._s(
                                                                  trigger[
                                                                    "Calls"
                                                                  ]
                                                                )
                                                            ),
                                                            _c(
                                                              "span",
                                                              {
                                                                staticClass:
                                                                  "text-muted",
                                                              },
                                                              [_vm._v("×")]
                                                            ),
                                                            _vm._v(" "),
                                                            _c(
                                                              "span",
                                                              {
                                                                staticClass:
                                                                  "float-right",
                                                              },
                                                              [
                                                                _c("span", {
                                                                  class:
                                                                    "p-0 px-1 alert " +
                                                                    _vm.$options.filters.durationClass(
                                                                      _vm.triggerDurationPercent(
                                                                        trigger
                                                                      )
                                                                    ),
                                                                  domProps: {
                                                                    innerHTML: _vm._s(
                                                                      _vm.$options.filters.duration(
                                                                        trigger.Time
                                                                      )
                                                                    ),
                                                                  },
                                                                }),
                                                                _vm._v(
                                                                  "\n                    | " +
                                                                    _vm._s(
                                                                      _vm.triggerDurationPercent(
                                                                        trigger
                                                                      )
                                                                    )
                                                                ),
                                                                _c(
                                                                  "span",
                                                                  {
                                                                    staticClass:
                                                                      "text-muted",
                                                                  },
                                                                  [_vm._v("%")]
                                                                ),
                                                              ]
                                                            ),
                                                            _vm._v(" "),
                                                            _c("br"),
                                                            _vm._v(" "),
                                                            trigger.Relation
                                                              ? _c(
                                                                  "span",
                                                                  {
                                                                    staticClass:
                                                                      "text-muted",
                                                                  },
                                                                  [_vm._v("on")]
                                                                )
                                                              : _vm._e(),
                                                            _vm._v(
                                                              "\n                  " +
                                                                _vm._s(
                                                                  trigger.Relation
                                                                ) +
                                                                "\n                  "
                                                            ),
                                                            _c("div", {
                                                              staticClass:
                                                                "clearfix",
                                                            }),
                                                            _vm._v(" "),
                                                            index !=
                                                            _vm.plan.planStats
                                                              .triggers.length -
                                                              1
                                                              ? _c("hr", {
                                                                  staticClass:
                                                                    "my-2",
                                                                })
                                                              : _vm._e(),
                                                          ]);
                                                        }
                                                      ),
                                                    ],
                                                    2
                                                  )
                                                : _vm._e(),
                                            ]
                                          : _c(
                                              "span",
                                              { staticClass: "text-muted" },
                                              [
                                                _vm._v(
                                                  "\n              N/A\n            "
                                                ),
                                              ]
                                            ),
                                      ],
                                      2
                                    ),
                                    _vm._v(" "),
                                    _vm.plan.planStats.settings
                                      ? _c(
                                          "div",
                                          {
                                            staticClass:
                                              "d-inline-block border-left px-2 position-relative",
                                          },
                                          [
                                            _c(
                                              "span",
                                              { staticClass: "stat-label" },
                                              [
                                                _vm._v("Settings: "),
                                                _c(
                                                  "span",
                                                  {
                                                    staticClass:
                                                      "badge badge-secondary",
                                                  },
                                                  [
                                                    _vm._v(
                                                      _vm._s(
                                                        _vm.lodash.keys(
                                                          _vm.plan.planStats
                                                            .settings
                                                        ).length
                                                      )
                                                    ),
                                                  ]
                                                ),
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _c(
                                              "button",
                                              {
                                                staticClass:
                                                  "bg-transparent border-0 p-0 m-0 pl-1",
                                                on: {
                                                  click: function ($event) {
                                                    $event.preventDefault();
                                                    _vm.showSettings = !_vm.showSettings;
                                                  },
                                                },
                                              },
                                              [
                                                _c("i", {
                                                  staticClass:
                                                    "fa fa-caret-down text-muted",
                                                }),
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _vm.showSettings
                                              ? _c(
                                                  "div",
                                                  {
                                                    staticClass:
                                                      "stat-dropdown-container text-left",
                                                  },
                                                  [
                                                    _c(
                                                      "button",
                                                      {
                                                        staticClass:
                                                          "btn btn-close float-right",
                                                        on: {
                                                          click: function (
                                                            $event
                                                          ) {
                                                            _vm.showSettings = false;
                                                          },
                                                        },
                                                      },
                                                      [
                                                        _c("i", {
                                                          staticClass:
                                                            "fa fa-times",
                                                        }),
                                                      ]
                                                    ),
                                                    _vm._v(" "),
                                                    _c("h3", [
                                                      _vm._v("PG Settings"),
                                                    ]),
                                                    _vm._v(" "),
                                                    _c(
                                                      "em",
                                                      {
                                                        staticClass:
                                                          "text-muted d-block pb-2",
                                                      },
                                                      [
                                                        _vm._v(
                                                          "\n              Configuration parameters affecting query planning with value different from the built-in default value.\n              "
                                                        ),
                                                      ]
                                                    ),
                                                    _vm._v(" "),
                                                    _c(
                                                      "table",
                                                      {
                                                        staticClass:
                                                          "table table-sm table-striped mb-0",
                                                      },
                                                      [
                                                        _c(
                                                          "tbody",
                                                          _vm._l(
                                                            _vm.plan.planStats
                                                              .settings,
                                                            function (
                                                              value,
                                                              key
                                                            ) {
                                                              return _c("tr", [
                                                                _c("td", [
                                                                  _vm._v(
                                                                    _vm._s(key)
                                                                  ),
                                                                ]),
                                                                _vm._v(" "),
                                                                _c("td", [
                                                                  _vm._v(
                                                                    _vm._s(
                                                                      value
                                                                    )
                                                                  ),
                                                                ]),
                                                              ]);
                                                            }
                                                          ),
                                                          0
                                                        ),
                                                      ]
                                                    ),
                                                  ]
                                                )
                                              : _vm._e(),
                                          ]
                                        )
                                      : _vm._e(),
                                    _vm._v(" "),
                                    _c(
                                      "button",
                                      {
                                        class: [
                                          "border-left btn btn-sm p-0 px-2 ml-auto",
                                          {
                                            "text-primary": !_vm.viewOptions
                                              .menuHidden,
                                          },
                                        ],
                                        on: { click: _vm.showHideMenu },
                                      },
                                      [
                                        _c("i", {
                                          staticClass: "fa fa-cog p-0",
                                        }),
                                        _vm._v(" Settings\n          "),
                                      ]
                                    ),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _c(
                              "div",
                              {
                                staticClass:
                                  "flex-grow-1 d-flex overflow-hidden",
                              },
                              [
                                _c(
                                  "div",
                                  {
                                    staticClass: "flex-grow-1 overflow-hidden",
                                  },
                                  [
                                    _c(
                                      "splitpanes",
                                      {
                                        staticClass: "default-theme",
                                        on: {
                                          resize: function ($event) {
                                            _vm.viewOptions.diagramWidth =
                                              $event[0].size;
                                          },
                                        },
                                      },
                                      [
                                        _vm.viewOptions.showDiagram
                                          ? _c(
                                              "pane",
                                              {
                                                staticClass: "d-flex",
                                                attrs: {
                                                  size:
                                                    _vm.viewOptions
                                                      .diagramWidth,
                                                },
                                              },
                                              [
                                                _c("diagram", {
                                                  ref: "diagram",
                                                  staticClass:
                                                    "d-flex flex-column flex-grow-1 overflow-hidden plan-diagram",
                                                  attrs: {
                                                    plan: _vm.plan,
                                                    eventBus: _vm.eventBus,
                                                  },
                                                  scopedSlots: _vm._u(
                                                    [
                                                      {
                                                        key: "nodeindex",
                                                        fn: function (ref) {
                                                          var node = ref.node;
                                                          return [
                                                            _vm._t(
                                                              "nodeindex",
                                                              null,
                                                              { node: node }
                                                            ),
                                                          ];
                                                        },
                                                      },
                                                    ],
                                                    null,
                                                    true
                                                  ),
                                                }),
                                              ],
                                              1
                                            )
                                          : _vm._e(),
                                        _vm._v(" "),
                                        _c(
                                          "pane",
                                          {
                                            ref: "plan",
                                            staticClass:
                                              "plan d-flex flex-column flex-grow-1 grab-bing overflow-auto",
                                          },
                                          [
                                            _c(
                                              "ul",
                                              {
                                                staticClass:
                                                  "main-plan p-2 mb-0",
                                              },
                                              [
                                                _c(
                                                  "li",
                                                  [
                                                    _c("plan-node", {
                                                      ref: "root",
                                                      attrs: {
                                                        node: _vm.rootNode,
                                                        plan: _vm.plan,
                                                        viewOptions:
                                                          _vm.viewOptions,
                                                        eventBus: _vm.eventBus,
                                                      },
                                                      scopedSlots: _vm._u(
                                                        [
                                                          {
                                                            key: "nodeindex",
                                                            fn: function (ref) {
                                                              var node =
                                                                ref.node;
                                                              return [
                                                                _vm._t(
                                                                  "nodeindex",
                                                                  null,
                                                                  { node: node }
                                                                ),
                                                              ];
                                                            },
                                                          },
                                                        ],
                                                        null,
                                                        true
                                                      ),
                                                    }),
                                                  ],
                                                  1
                                                ),
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _vm.plan.ctes.length
                                              ? _c(
                                                  "ul",
                                                  {
                                                    staticClass:
                                                      "init-plans p-2 mb-0",
                                                  },
                                                  _vm._l(
                                                    _vm.plan.ctes,
                                                    function (node) {
                                                      return _c(
                                                        "li",
                                                        [
                                                          _c("plan-node", {
                                                            ref: "root",
                                                            refInFor: true,
                                                            attrs: {
                                                              node: node,
                                                              plan: _vm.plan,
                                                              viewOptions:
                                                                _vm.viewOptions,
                                                              eventBus:
                                                                _vm.eventBus,
                                                            },
                                                            scopedSlots: _vm._u(
                                                              [
                                                                {
                                                                  key:
                                                                    "nodeindex",
                                                                  fn: function (
                                                                    ref
                                                                  ) {
                                                                    var node =
                                                                      ref.node;
                                                                    return [
                                                                      _vm._t(
                                                                        "nodeindex",
                                                                        null,
                                                                        {
                                                                          node: node,
                                                                        }
                                                                      ),
                                                                    ];
                                                                  },
                                                                },
                                                              ],
                                                              null,
                                                              true
                                                            ),
                                                          }),
                                                        ],
                                                        1
                                                      );
                                                    }
                                                  ),
                                                  0
                                                )
                                              : _vm._e(),
                                          ]
                                        ),
                                      ],
                                      1
                                    ),
                                  ],
                                  1
                                ),
                                _vm._v(" "),
                                _vm.plan && !_vm.viewOptions.menuHidden
                                  ? _c(
                                      "div",
                                      { staticClass: "small p-2 border-left" },
                                      [
                                        _c(
                                          "div",
                                          {
                                            staticClass: "text-right clearfix",
                                          },
                                          [
                                            _c(
                                              "button",
                                              {
                                                staticClass: "close",
                                                attrs: {
                                                  type: "button",
                                                  "aria-label": "Close",
                                                },
                                                on: {
                                                  click: function ($event) {
                                                    _vm.viewOptions.menuHidden = true;
                                                  },
                                                },
                                              },
                                              [
                                                _c(
                                                  "span",
                                                  {
                                                    attrs: {
                                                      "aria-hidden": "true",
                                                    },
                                                  },
                                                  [_vm._v("×")]
                                                ),
                                              ]
                                            ),
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "div",
                                          { staticClass: "form-check" },
                                          [
                                            _c("input", {
                                              directives: [
                                                {
                                                  name: "model",
                                                  rawName: "v-model",
                                                  value:
                                                    _vm.viewOptions.showDiagram,
                                                  expression:
                                                    "viewOptions.showDiagram",
                                                },
                                              ],
                                              staticClass: "form-check-input",
                                              attrs: {
                                                id: "showDiagram",
                                                type: "checkbox",
                                              },
                                              domProps: {
                                                checked: Array.isArray(
                                                  _vm.viewOptions.showDiagram
                                                )
                                                  ? _vm._i(
                                                      _vm.viewOptions
                                                        .showDiagram,
                                                      null
                                                    ) > -1
                                                  : _vm.viewOptions.showDiagram,
                                              },
                                              on: {
                                                change: function ($event) {
                                                  var $$a =
                                                      _vm.viewOptions
                                                        .showDiagram,
                                                    $$el = $event.target,
                                                    $$c = $$el.checked
                                                      ? true
                                                      : false;
                                                  if (Array.isArray($$a)) {
                                                    var $$v = null,
                                                      $$i = _vm._i($$a, $$v);
                                                    if ($$el.checked) {
                                                      $$i < 0 &&
                                                        _vm.$set(
                                                          _vm.viewOptions,
                                                          "showDiagram",
                                                          $$a.concat([$$v])
                                                        );
                                                    } else {
                                                      $$i > -1 &&
                                                        _vm.$set(
                                                          _vm.viewOptions,
                                                          "showDiagram",
                                                          $$a
                                                            .slice(0, $$i)
                                                            .concat(
                                                              $$a.slice($$i + 1)
                                                            )
                                                        );
                                                    }
                                                  } else {
                                                    _vm.$set(
                                                      _vm.viewOptions,
                                                      "showDiagram",
                                                      $$c
                                                    );
                                                  }
                                                },
                                              },
                                            }),
                                            _vm._v(" "),
                                            _vm._m(0),
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c("hr"),
                                        _vm._v(" "),
                                        _c(
                                          "label",
                                          { staticClass: "text-uppercase" },
                                          [_vm._v("Density")]
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "div",
                                          { staticClass: "form-group" },
                                          [
                                            _c(
                                              "div",
                                              {
                                                staticClass:
                                                  "btn-group btn-group-sm",
                                              },
                                              [
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .viewMode ==
                                                        _vm.viewModes.FULL,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.viewMode =
                                                          _vm.viewModes.FULL;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("full")]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .viewMode ==
                                                        _vm.viewModes.COMPACT,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.viewMode =
                                                          _vm.viewModes.COMPACT;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("compact")]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .viewMode ==
                                                        _vm.viewModes.DOT,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.viewMode =
                                                          _vm.viewModes.DOT;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("dot")]
                                                ),
                                              ]
                                            ),
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c("hr"),
                                        _vm._v(" "),
                                        _c(
                                          "label",
                                          { staticClass: "text-uppercase" },
                                          [_vm._v("Orientation")]
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "div",
                                          { staticClass: "form-group" },
                                          [
                                            _c(
                                              "div",
                                              {
                                                staticClass:
                                                  "btn-group btn-group-sm",
                                              },
                                              [
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .orientation ==
                                                        _vm.orientations.TWOD,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.orientation =
                                                          _vm.orientations.TWOD;
                                                      },
                                                    },
                                                  },
                                                  [
                                                    _c("i", {
                                                      staticClass:
                                                        "fa fa-sitemap",
                                                    }),
                                                    _vm._v(
                                                      "\n                  2D\n                "
                                                    ),
                                                  ]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .orientation ==
                                                        _vm.orientations
                                                          .CLASSIC,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.orientation =
                                                          _vm.orientations.CLASSIC;
                                                      },
                                                    },
                                                  },
                                                  [
                                                    _c("i", {
                                                      staticClass: "fa fa-list",
                                                    }),
                                                    _vm._v(
                                                      "\n                  classic\n                "
                                                    ),
                                                  ]
                                                ),
                                              ]
                                            ),
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c("hr"),
                                        _vm._v(" "),
                                        _c(
                                          "label",
                                          { staticClass: "text-uppercase" },
                                          [_vm._v("Graph metric")]
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "div",
                                          { staticClass: "form-group" },
                                          [
                                            _c(
                                              "div",
                                              {
                                                staticClass:
                                                  "btn-group btn-group-sm",
                                              },
                                              [
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .highlightType ===
                                                        _vm.highlightTypes.NONE,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.highlightType =
                                                          _vm.highlightTypes.NONE;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("none")]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .highlightType ===
                                                        _vm.highlightTypes
                                                          .DURATION,
                                                    },
                                                    attrs: {
                                                      disabled: !_vm.plan
                                                        .isAnalyze,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.highlightType =
                                                          _vm.highlightTypes.DURATION;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("duration")]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .highlightType ===
                                                        _vm.highlightTypes.ROWS,
                                                    },
                                                    attrs: {
                                                      disabled:
                                                        _vm.rootNode[
                                                          _vm.nodeProps
                                                            .ACTUAL_ROWS
                                                        ] === undefined,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.highlightType =
                                                          _vm.highlightTypes.ROWS;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("rows")]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                  "button",
                                                  {
                                                    staticClass:
                                                      "btn btn-outline-secondary",
                                                    class: {
                                                      active:
                                                        _vm.viewOptions
                                                          .highlightType ===
                                                        _vm.highlightTypes.COST,
                                                    },
                                                    on: {
                                                      click: function ($event) {
                                                        _vm.viewOptions.highlightType =
                                                          _vm.highlightTypes.COST;
                                                      },
                                                    },
                                                  },
                                                  [_vm._v("cost")]
                                                ),
                                              ]
                                            ),
                                          ]
                                        ),
                                      ]
                                    )
                                  : _vm._e(),
                              ]
                            ),
                          ]
                        ),
                      ]
                    )
                  : _vm._e(),
                _vm._v(" "),
                _c(
                  "div",
                  {
                    staticClass:
                      "tab-pane flex-grow-1 overflow-hidden position-relative",
                    class: { "show active": _vm.activeTab === "raw" },
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "overflow-hidden d-flex w-100 h-100" },
                      [
                        _c(
                          "div",
                          { staticClass: "overflow-auto flex-grow-1" },
                          [
                            _c("pre", { staticClass: "small p-2 mb-0" }, [
                              _c("code", {
                                domProps: {
                                  innerHTML: _vm._s(
                                    _vm.$options.filters.json(_vm.planSource)
                                  ),
                                },
                              }),
                            ]),
                          ]
                        ),
                        _vm._v(" "),
                        _c("copy", { attrs: { content: _vm.planSource } }),
                      ],
                      1
                    ),
                  ]
                ),
                _vm._v(" "),
                _vm.queryText
                  ? _c(
                      "div",
                      {
                        staticClass:
                          "tab-pane flex-grow-1 overflow-hidden position-relative",
                        class: { "show active": _vm.activeTab === "query" },
                      },
                      [
                        _c(
                          "div",
                          { staticClass: "overflow-hidden d-flex w-100 h-100" },
                          [
                            _c(
                              "div",
                              { staticClass: "overflow-auto flex-grow-1" },
                              [
                                _c("pre", { staticClass: "small p-2 mb-0" }, [
                                  _c("code", {
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.$options.filters.pgsql(
                                          _vm.queryText
                                        )
                                      ),
                                    },
                                  }),
                                ]),
                              ]
                            ),
                          ]
                        ),
                        _vm._v(" "),
                        _c("copy", { attrs: { content: _vm.queryText } }),
                      ],
                      1
                    )
                  : _vm._e(),
                _vm._v(" "),
                _c(
                  "div",
                  {
                    staticClass: "tab-pane flex-grow-1 overflow-auto",
                    class: { "show active": _vm.activeTab === "stats" },
                  },
                  [_c("stats", { attrs: { plan: _vm.plan } })],
                  1
                ),
              ]
            ),
          ]
        );
      };
      var staticRenderFns = [
        function () {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c(
            "label",
            { staticClass: "form-check-label", attrs: { for: "showDiagram" } },
            [_c("i", { staticClass: "fa fa-align-left" }), _vm._v(" Diagram")]
          );
        },
      ];

      // CONCATENATED MODULE: ./src/components/Plan.vue?vue&type=template&id=d7bf405a&

      // CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
      /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
      /* global Reflect, Promise */

      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };

      function __extends(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype =
          b === null
            ? Object.create(b)
            : ((__.prototype = b.prototype), new __());
      }

      var __assign = function () {
        __assign =
          Object.assign ||
          function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          };
        return __assign.apply(this, arguments);
      };

      function __rest(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (
            var i = 0, p = Object.getOwnPropertySymbols(s);
            i < p.length;
            i++
          ) {
            if (
              e.indexOf(p[i]) < 0 &&
              Object.prototype.propertyIsEnumerable.call(s, p[i])
            )
              t[p[i]] = s[p[i]];
          }
        return t;
      }

      function __decorate(decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === "object" &&
          typeof Reflect.decorate === "function"
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }

      function __param(paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      }

      function __metadata(metadataKey, metadataValue) {
        if (
          typeof Reflect === "object" &&
          typeof Reflect.metadata === "function"
        )
          return Reflect.metadata(metadataKey, metadataValue);
      }

      function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }

      function __generator(thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === "function" &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t =
                    op[0] & 2
                      ? y["return"]
                      : op[0]
                      ? y["throw"] || ((t = y["return"]) && t.call(y), 0)
                      : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (
                    !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                    (op[0] === 6 || op[0] === 2)
                  ) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      }

      function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      }

      function __exportStar(m, exports) {
        for (var p in m)
          if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
      }

      function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(
          s ? "Object is not iterable." : "Symbol.iterator is not defined."
        );
      }

      function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error: error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      }

      function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      }

      function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      }

      function __await(v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      }

      function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb("next"),
          verb("throw"),
          verb("return"),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await
            ? Promise.resolve(r.value.v).then(fulfill, reject)
            : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      }

      function __asyncDelegator(o) {
        var i, p;
        return (
          (i = {}),
          verb("next"),
          verb("throw", function (e) {
            throw e;
          }),
          verb("return"),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p)
                  ? { value: __await(o[n](v)), done: n === "return" }
                  : f
                  ? f(v)
                  : v;
              }
            : f;
        }
      }

      function __asyncValues(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o =
              typeof __values === "function"
                ? __values(o)
                : o[Symbol.iterator]()),
            (i = {}),
            verb("next"),
            verb("throw"),
            verb("return"),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v) {
            resolve({ value: v, done: d });
          }, reject);
        }
      }

      function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      }

      function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null)
          for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
      }

      function __importDefault(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      }

      function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      }

      function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      }

      // EXTERNAL MODULE: ./node_modules/lodash/lodash.js
      var lodash = __webpack_require__("2ef0");

      // EXTERNAL MODULE: ./node_modules/splitpanes/dist/splitpanes.common.js
      var splitpanes_common = __webpack_require__("512e");

      // EXTERNAL MODULE: external {"commonjs":"vue","commonjs2":"vue","root":"Vue"}
      var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__(
        "8bbf"
      );
      var external_commonjs_vue_commonjs2_vue_root_Vue_default = /*#__PURE__*/ __webpack_require__.n(
        external_commonjs_vue_commonjs2_vue_root_Vue_
      );

      // CONCATENATED MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js
      /**
       * vue-class-component v7.2.6
       * (c) 2015-present Evan You
       * @license MIT
       */

      function _typeof(obj) {
        if (
          typeof Symbol === "function" &&
          typeof Symbol.iterator === "symbol"
        ) {
          _typeof = function (obj) {
            return typeof obj;
          };
        } else {
          _typeof = function (obj) {
            return obj &&
              typeof Symbol === "function" &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? "symbol"
              : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _toConsumableArray(arr) {
        return (
          _arrayWithoutHoles(arr) ||
          _iterableToArray(arr) ||
          _nonIterableSpread()
        );
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
            arr2[i] = arr[i];

          return arr2;
        }
      }

      function _iterableToArray(iter) {
        if (
          Symbol.iterator in Object(iter) ||
          Object.prototype.toString.call(iter) === "[object Arguments]"
        )
          return Array.from(iter);
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      // The rational behind the verbose Reflect-feature check below is the fact that there are polyfills
      // which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.
      // Without this check consumers will encounter hard to track down runtime errors.
      function reflectionIsSupported() {
        return (
          typeof Reflect !== "undefined" &&
          Reflect.defineMetadata &&
          Reflect.getOwnMetadataKeys
        );
      }
      function copyReflectionMetadata(to, from) {
        forwardMetadata(to, from);
        Object.getOwnPropertyNames(from.prototype).forEach(function (key) {
          forwardMetadata(to.prototype, from.prototype, key);
        });
        Object.getOwnPropertyNames(from).forEach(function (key) {
          forwardMetadata(to, from, key);
        });
      }

      function forwardMetadata(to, from, propertyKey) {
        var metaKeys = propertyKey
          ? Reflect.getOwnMetadataKeys(from, propertyKey)
          : Reflect.getOwnMetadataKeys(from);
        metaKeys.forEach(function (metaKey) {
          var metadata = propertyKey
            ? Reflect.getOwnMetadata(metaKey, from, propertyKey)
            : Reflect.getOwnMetadata(metaKey, from);

          if (propertyKey) {
            Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
          } else {
            Reflect.defineMetadata(metaKey, metadata, to);
          }
        });
      }

      var fakeArray = {
        __proto__: [],
      };
      var hasProto = fakeArray instanceof Array;
      function createDecorator(factory) {
        return function (target, key, index) {
          var Ctor = typeof target === "function" ? target : target.constructor;

          if (!Ctor.__decorators__) {
            Ctor.__decorators__ = [];
          }

          if (typeof index !== "number") {
            index = undefined;
          }

          Ctor.__decorators__.push(function (options) {
            return factory(options, key, index);
          });
        };
      }
      function mixins() {
        for (
          var _len = arguments.length, Ctors = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          Ctors[_key] = arguments[_key];
        }

        return external_commonjs_vue_commonjs2_vue_root_Vue_default.a.extend({
          mixins: Ctors,
        });
      }
      function isPrimitive(value) {
        var type = _typeof(value);

        return value == null || (type !== "object" && type !== "function");
      }
      function warn(message) {
        if (typeof console !== "undefined") {
          console.warn("[vue-class-component] " + message);
        }
      }

      function collectDataFromConstructor(vm, Component) {
        // override _init to prevent to init as Vue instance
        var originalInit = Component.prototype._init;

        Component.prototype._init = function () {
          var _this = this;

          // proxy to actual vm
          var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)

          if (vm.$options.props) {
            for (var key in vm.$options.props) {
              if (!vm.hasOwnProperty(key)) {
                keys.push(key);
              }
            }
          }

          keys.forEach(function (key) {
            Object.defineProperty(_this, key, {
              get: function get() {
                return vm[key];
              },
              set: function set(value) {
                vm[key] = value;
              },
              configurable: true,
            });
          });
        }; // should be acquired class property values

        var data = new Component(); // restore original _init to avoid memory leak (#209)

        Component.prototype._init = originalInit; // create plain data object

        var plainData = {};
        Object.keys(data).forEach(function (key) {
          if (data[key] !== undefined) {
            plainData[key] = data[key];
          }
        });

        if (false) {
        }

        return plainData;
      }

      var $internalHooks = [
        "data",
        "beforeCreate",
        "created",
        "beforeMount",
        "mounted",
        "beforeDestroy",
        "destroyed",
        "beforeUpdate",
        "updated",
        "activated",
        "deactivated",
        "render",
        "errorCaptured",
        "serverPrefetch", // 2.6
      ];
      function componentFactory(Component) {
        var options =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {};
        options.name =
          options.name || Component._componentTag || Component.name; // prototype props.

        var proto = Component.prototype;
        Object.getOwnPropertyNames(proto).forEach(function (key) {
          if (key === "constructor") {
            return;
          } // hooks

          if ($internalHooks.indexOf(key) > -1) {
            options[key] = proto[key];
            return;
          }

          var descriptor = Object.getOwnPropertyDescriptor(proto, key);

          if (descriptor.value !== void 0) {
            // methods
            if (typeof descriptor.value === "function") {
              (options.methods || (options.methods = {}))[key] =
                descriptor.value;
            } else {
              // typescript decorated data
              (options.mixins || (options.mixins = [])).push({
                data: function data() {
                  return _defineProperty({}, key, descriptor.value);
                },
              });
            }
          } else if (descriptor.get || descriptor.set) {
            // computed properties
            (options.computed || (options.computed = {}))[key] = {
              get: descriptor.get,
              set: descriptor.set,
            };
          }
        });
        (options.mixins || (options.mixins = [])).push({
          data: function data() {
            return collectDataFromConstructor(this, Component);
          },
        }); // decorate options

        var decorators = Component.__decorators__;

        if (decorators) {
          decorators.forEach(function (fn) {
            return fn(options);
          });
          delete Component.__decorators__;
        } // find super

        var superProto = Object.getPrototypeOf(Component.prototype);
        var Super =
          superProto instanceof
          external_commonjs_vue_commonjs2_vue_root_Vue_default.a
            ? superProto.constructor
            : external_commonjs_vue_commonjs2_vue_root_Vue_default.a;
        var Extended = Super.extend(options);
        forwardStaticMembers(Extended, Component, Super);

        if (reflectionIsSupported()) {
          copyReflectionMetadata(Extended, Component);
        }

        return Extended;
      }
      var reservedPropertyNames = [
        // Unique id
        "cid", // Super Vue constructor
        "super", // Component options that will be used by the component
        "options",
        "superOptions",
        "extendOptions",
        "sealedOptions", // Private assets
        "component",
        "directive",
        "filter",
      ];
      var shouldIgnore = {
        prototype: true,
        arguments: true,
        callee: true,
        caller: true,
      };

      function forwardStaticMembers(Extended, Original, Super) {
        // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable
        Object.getOwnPropertyNames(Original).forEach(function (key) {
          // Skip the properties that should not be overwritten
          if (shouldIgnore[key]) {
            return;
          } // Some browsers does not allow reconfigure built-in properties

          var extendedDescriptor = Object.getOwnPropertyDescriptor(
            Extended,
            key
          );

          if (extendedDescriptor && !extendedDescriptor.configurable) {
            return;
          }

          var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),
          // the sub class properties may be inherited properties from the super class in TypeScript.
          // We need to exclude such properties to prevent to overwrite
          // the component options object which stored on the extended constructor (See #192).
          // If the value is a referenced value (object or function),
          // we can check equality of them and exclude it if they have the same reference.
          // If it is a primitive value, it will be forwarded for safety.

          if (!hasProto) {
            // Only `cid` is explicitly exluded from property forwarding
            // because we cannot detect whether it is a inherited property or not
            // on the no `__proto__` environment even though the property is reserved.
            if (key === "cid") {
              return;
            }

            var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);

            if (
              !isPrimitive(descriptor.value) &&
              superDescriptor &&
              superDescriptor.value === descriptor.value
            ) {
              return;
            }
          } // Warn if the users manually declare reserved properties

          if (false) {
          }

          Object.defineProperty(Extended, key, descriptor);
        });
      }

      function vue_class_component_esm_Component(options) {
        if (typeof options === "function") {
          return componentFactory(options);
        }

        return function (Component) {
          return componentFactory(Component, options);
        };
      }

      vue_class_component_esm_Component.registerHooks = function registerHooks(
        keys
      ) {
        $internalHooks.push.apply($internalHooks, _toConsumableArray(keys));
      };

      /* harmony default export */ var vue_class_component_esm = vue_class_component_esm_Component;

      // CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js
      /** vue-property-decorator verson 8.5.1 MIT LICENSE copyright 2020 kaorun343 */
      /// <reference types='reflect-metadata'/>

      /** Used for keying reactive provide/inject properties */
      var reactiveInjectKey = "__reactiveInject__";
      /**
       * decorator of an inject
       * @param from key
       * @return PropertyDecorator
       */
      function Inject(options) {
        return createDecorator(function (componentOptions, key) {
          if (typeof componentOptions.inject === "undefined") {
            componentOptions.inject = {};
          }
          if (!Array.isArray(componentOptions.inject)) {
            componentOptions.inject[key] = options || key;
          }
        });
      }
      /**
       * decorator of a reactive inject
       * @param from key
       * @return PropertyDecorator
       */
      function InjectReactive(options) {
        return createDecorator(function (componentOptions, key) {
          if (typeof componentOptions.inject === "undefined") {
            componentOptions.inject = {};
          }
          if (!Array.isArray(componentOptions.inject)) {
            var fromKey_1 = !!options ? options.from || options : key;
            var defaultVal_1 = (!!options && options.default) || undefined;
            if (!componentOptions.computed) componentOptions.computed = {};
            componentOptions.computed[key] = function () {
              var obj = this[reactiveInjectKey];
              return obj ? obj[fromKey_1] : defaultVal_1;
            };
            componentOptions.inject[reactiveInjectKey] = reactiveInjectKey;
          }
        });
      }
      function produceProvide(original) {
        var provide = function () {
          var _this = this;
          var rv =
            typeof original === "function" ? original.call(this) : original;
          rv = Object.create(rv || null);
          // set reactive services (propagates previous services if necessary)
          rv[reactiveInjectKey] = this[reactiveInjectKey] || {};
          for (var i in provide.managed) {
            rv[provide.managed[i]] = this[i];
          }
          var _loop_1 = function (i) {
            rv[provide.managedReactive[i]] = this_1[i]; // Duplicates the behavior of `@Provide`
            Object.defineProperty(
              rv[reactiveInjectKey],
              provide.managedReactive[i],
              {
                enumerable: true,
                get: function () {
                  return _this[i];
                },
              }
            );
          };
          var this_1 = this;
          for (var i in provide.managedReactive) {
            _loop_1(i);
          }
          return rv;
        };
        provide.managed = {};
        provide.managedReactive = {};
        return provide;
      }
      function needToProduceProvide(original) {
        return (
          typeof original !== "function" ||
          (!original.managed && !original.managedReactive)
        );
      }
      /**
       * decorator of a provide
       * @param key key
       * @return PropertyDecorator | void
       */
      function Provide(key) {
        return createDecorator(function (componentOptions, k) {
          var provide = componentOptions.provide;
          if (needToProduceProvide(provide)) {
            provide = componentOptions.provide = produceProvide(provide);
          }
          provide.managed[k] = key || k;
        });
      }
      /**
       * decorator of a reactive provide
       * @param key key
       * @return PropertyDecorator | void
       */
      function ProvideReactive(key) {
        return createDecorator(function (componentOptions, k) {
          var provide = componentOptions.provide;
          // inject parent reactive services (if any)
          if (!Array.isArray(componentOptions.inject)) {
            componentOptions.inject = componentOptions.inject || {};
            componentOptions.inject[reactiveInjectKey] = {
              from: reactiveInjectKey,
              default: {},
            };
          }
          if (needToProduceProvide(provide)) {
            provide = componentOptions.provide = produceProvide(provide);
          }
          provide.managedReactive[k] = key || k;
        });
      }
      /** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */
      var reflectMetadataIsSupported =
        typeof Reflect !== "undefined" &&
        typeof Reflect.getMetadata !== "undefined";
      function applyMetadata(options, target, key) {
        if (reflectMetadataIsSupported) {
          if (
            !Array.isArray(options) &&
            typeof options !== "function" &&
            typeof options.type === "undefined"
          ) {
            var type = Reflect.getMetadata("design:type", target, key);
            if (type !== Object) {
              options.type = type;
            }
          }
        }
      }
      /**
       * decorator of model
       * @param  event event name
       * @param options options
       * @return PropertyDecorator
       */
      function Model(event, options) {
        if (options === void 0) {
          options = {};
        }
        return function (target, key) {
          applyMetadata(options, target, key);
          createDecorator(function (componentOptions, k) {
            (componentOptions.props || (componentOptions.props = {}))[
              k
            ] = options;
            componentOptions.model = { prop: k, event: event || k };
          })(target, key);
        };
      }
      /**
       * decorator of a prop
       * @param  options the options for the prop
       * @return PropertyDecorator | void
       */
      function Prop(options) {
        if (options === void 0) {
          options = {};
        }
        return function (target, key) {
          applyMetadata(options, target, key);
          createDecorator(function (componentOptions, k) {
            (componentOptions.props || (componentOptions.props = {}))[
              k
            ] = options;
          })(target, key);
        };
      }
      /**
       * decorator of a synced prop
       * @param propName the name to interface with from outside, must be different from decorated property
       * @param options the options for the synced prop
       * @return PropertyDecorator | void
       */
      function PropSync(propName, options) {
        if (options === void 0) {
          options = {};
        }
        // @ts-ignore
        return function (target, key) {
          applyMetadata(options, target, key);
          createDecorator(function (componentOptions, k) {
            (componentOptions.props || (componentOptions.props = {}))[
              propName
            ] = options;
            (componentOptions.computed || (componentOptions.computed = {}))[
              k
            ] = {
              get: function () {
                return this[propName];
              },
              set: function (value) {
                // @ts-ignore
                this.$emit("update:" + propName, value);
              },
            };
          })(target, key);
        };
      }
      /**
       * decorator of a watch function
       * @param  path the path or the expression to observe
       * @param  WatchOption
       * @return MethodDecorator
       */
      function Watch(path, options) {
        if (options === void 0) {
          options = {};
        }
        var _a = options.deep,
          deep = _a === void 0 ? false : _a,
          _b = options.immediate,
          immediate = _b === void 0 ? false : _b;
        return createDecorator(function (componentOptions, handler) {
          if (typeof componentOptions.watch !== "object") {
            componentOptions.watch = Object.create(null);
          }
          var watch = componentOptions.watch;
          if (typeof watch[path] === "object" && !Array.isArray(watch[path])) {
            watch[path] = [watch[path]];
          } else if (typeof watch[path] === "undefined") {
            watch[path] = [];
          }
          watch[path].push({
            handler: handler,
            deep: deep,
            immediate: immediate,
          });
        });
      }
      // Code copied from Vue/src/shared/util.js
      var hyphenateRE = /\B([A-Z])/g;
      var hyphenate = function (str) {
        return str.replace(hyphenateRE, "-$1").toLowerCase();
      };
      /**
       * decorator of an event-emitter function
       * @param  event The name of the event
       * @return MethodDecorator
       */
      function Emit(event) {
        return function (_target, propertyKey, descriptor) {
          var key = hyphenate(propertyKey);
          var original = descriptor.value;
          descriptor.value = function emitter() {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var emit = function (returnValue) {
              var emitName = event || key;
              if (returnValue === undefined) {
                if (args.length === 0) {
                  _this.$emit(emitName);
                } else if (args.length === 1) {
                  _this.$emit(emitName, args[0]);
                } else {
                  _this.$emit.apply(_this, [emitName].concat(args));
                }
              } else {
                if (args.length === 0) {
                  _this.$emit(emitName, returnValue);
                } else if (args.length === 1) {
                  _this.$emit(emitName, returnValue, args[0]);
                } else {
                  _this.$emit.apply(
                    _this,
                    [emitName, returnValue].concat(args)
                  );
                }
              }
            };
            var returnValue = original.apply(this, args);
            if (isPromise(returnValue)) {
              returnValue.then(emit);
            } else {
              emit(returnValue);
            }
            return returnValue;
          };
        };
      }
      /**
       * decorator of a ref prop
       * @param refKey the ref key defined in template
       */
      function Ref(refKey) {
        return createDecorator(function (options, key) {
          options.computed = options.computed || {};
          options.computed[key] = {
            cache: false,
            get: function () {
              return this.$refs[refKey || key];
            },
          };
        });
      }
      function isPromise(obj) {
        return (
          obj instanceof Promise || (obj && typeof obj.then === "function")
        );
      }

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/PlanNode.vue?vue&type=template&id=895b845c&
      var PlanNodevue_type_template_id_895b845c_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: {
              subplan: _vm.node[_vm.nodeProps.SUBPLAN_NAME],
              "d-flex flex-column align-items-center":
                _vm.viewOptions.orientation == _vm.orientations.TWOD,
            },
          },
          [
            _vm.node[_vm.nodeProps.SUBPLAN_NAME]
              ? _c("h4", [_vm._v(_vm._s(_vm.node[_vm.nodeProps.SUBPLAN_NAME]))])
              : _vm._e(),
            _vm._v(" "),
            _c(
              "div",
              {
                class: [
                  "text-left plan-node",
                  {
                    detailed: _vm.showDetails,
                    "never-executed": _vm.isNeverExecuted,
                    parallel: _vm.workersPlannedCount,
                    selected: _vm.selected,
                  },
                ],
              },
              [
                _vm.workersPlannedCount
                  ? _c(
                      "div",
                      { staticClass: "workers text-muted py-0 px-1" },
                      _vm._l(_vm.workersPlannedCountReversed, function (index) {
                        return _c(
                          "div",
                          {
                            class: {
                              "border-dashed":
                                index >= _vm.workersLaunchedCount,
                            },
                            style:
                              "top: " +
                              (1 + index * 2) +
                              "px; left: " +
                              (1 + (index + 1) * 3) +
                              "px;",
                          },
                          [_vm._v("\n        " + _vm._s(index) + "\n      ")]
                        );
                      }),
                      0
                    )
                  : _vm._e(),
                _vm._v(" "),
                _vm.hasChildren
                  ? _c("div", { staticClass: "collapse-handle" }, [
                      _c("i", {
                        class: [
                          "fa fa-fw",
                          {
                            "fa-compress": !_vm.collapsed,
                            "fa-expand": _vm.collapsed,
                          },
                        ],
                        attrs: { title: "Collpase or expand child nodes" },
                        on: {
                          click: function ($event) {
                            $event.stopPropagation();
                            return _vm.toggleCollapsed();
                          },
                        },
                      }),
                    ])
                  : _vm._e(),
                _vm._v(" "),
                _c(
                  "div",
                  {
                    staticClass: "plan-node-body card",
                    on: {
                      mouseenter: function ($event) {
                        return _vm.eventBus.$emit(
                          "mouseovernode",
                          _vm.node.nodeId
                        );
                      },
                      mouseleave: function ($event) {
                        return _vm.eventBus.$emit(
                          "mouseoutnode",
                          _vm.node.nodeId
                        );
                      },
                    },
                  },
                  [
                    _c(
                      "div",
                      {
                        staticClass: "card-body header no-focus-outline",
                        on: {
                          click: function ($event) {
                            $event.stopPropagation();
                            _vm.showDetails = !_vm.showDetails;
                          },
                        },
                      },
                      [
                        _c("header", { staticClass: "mb-0" }, [
                          _c("h4", { staticClass: "text-body" }, [
                            _c(
                              "a",
                              {
                                staticClass: "font-weight-normal small",
                                attrs: {
                                  href: "#plan/node/" + _vm.node.nodeId,
                                },
                                on: {
                                  click: function ($event) {
                                    $event.stopPropagation();
                                  },
                                },
                              },
                              [_vm._v("#" + _vm._s(_vm.node.nodeId))]
                            ),
                            _vm._v(
                              "\n            " +
                                _vm._s(_vm.getNodeName()) +
                                "\n          "
                            ),
                          ]),
                          _vm._v(" "),
                          _c("div", { staticClass: "float-right" }, [
                            _vm.durationClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      { name: "tippy", rawName: "v-tippy" },
                                    ],
                                    class:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap alert " +
                                      _vm.durationClass,
                                    attrs: { content: "Slow" },
                                  },
                                  [
                                    _c("i", {
                                      staticClass: "fa fa-fw fa-clock",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.costClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      { name: "tippy", rawName: "v-tippy" },
                                    ],
                                    class:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap alert " +
                                      _vm.costClass,
                                    attrs: { content: "Cost is high" },
                                  },
                                  [
                                    _c("i", {
                                      staticClass: "fa fa-fw fa-dollar-sign",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.estimationClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      { name: "tippy", rawName: "v-tippy" },
                                    ],
                                    class:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap alert " +
                                      _vm.estimationClass,
                                    attrs: {
                                      content:
                                        "Bad estimation for number of rows",
                                    },
                                  },
                                  [
                                    _c("i", {
                                      staticClass: "fa fa-fw fa-thumbs-down",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.rowsRemovedClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      { name: "tippy", rawName: "v-tippy" },
                                    ],
                                    class:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap alert " +
                                      _vm.rowsRemovedClass,
                                    attrs: { content: _vm.filterTooltip },
                                  },
                                  [
                                    _c("i", {
                                      staticClass: "fa fa-fw fa-filter",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.heapFetchesClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      {
                                        name: "tippy",
                                        rawName: "v-tippy",
                                        value: { arrow: true },
                                        expression: "{arrow: true}",
                                      },
                                    ],
                                    class:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap alert " +
                                      _vm.heapFetchesClass,
                                    attrs: {
                                      content: "Heap Fetches number is high",
                                    },
                                  },
                                  [
                                    _c("i", {
                                      staticClass: "fa fa-fw fa-exchange-alt",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                            _vm._v(" "),
                            _vm.rowsRemoved && !_vm.rowsRemovedClass
                              ? _c(
                                  "span",
                                  {
                                    directives: [
                                      { name: "tippy", rawName: "v-tippy" },
                                    ],
                                    staticClass:
                                      "p-0  d-inline-block mb-0 ml-1 text-nowrap",
                                    attrs: { content: _vm.filterTooltip },
                                  },
                                  [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-fw fa-filter text-muted",
                                    }),
                                  ]
                                )
                              : _vm._e(),
                          ]),
                          _vm._v(" "),
                          _vm.viewOptions.viewMode === _vm.viewModes.FULL
                            ? _c("span", [
                                _vm.isNeverExecuted
                                  ? _c(
                                      "span",
                                      {
                                        staticClass:
                                          "node-duration text-warning",
                                      },
                                      [
                                        _vm._v(
                                          "\n              Never executed\n            "
                                        ),
                                      ]
                                    )
                                  : _vm._e(),
                              ])
                            : _vm._e(),
                        ]),
                        _vm._v(" "),
                        _vm.viewOptions.viewMode === _vm.viewModes.FULL
                          ? _c(
                              "div",
                              { staticClass: "text-left text-monospace" },
                              [
                                _vm.node[_vm.nodeProps.RELATION_NAME]
                                  ? _c(
                                      "div",
                                      {
                                        class: {
                                          "line-clamp-2": !_vm.showDetails,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v("on ")]
                                        ),
                                        _vm.node[_vm.nodeProps.SCHEMA]
                                          ? _c("span", [
                                              _vm._v(
                                                _vm._s(
                                                  _vm.node[_vm.nodeProps.SCHEMA]
                                                ) + "."
                                              ),
                                            ])
                                          : _vm._e(),
                                        _vm._v(
                                          _vm._s(
                                            _vm.node[
                                              _vm.nodeProps.RELATION_NAME
                                            ]
                                          ) + "\n            "
                                        ),
                                        _vm.node[_vm.nodeProps.ALIAS]
                                          ? _c("span", [
                                              _c(
                                                "span",
                                                { staticClass: "text-muted" },
                                                [_vm._v("as")]
                                              ),
                                              _vm._v(
                                                "\n              " +
                                                  _vm._s(
                                                    _vm.node[
                                                      _vm.nodeProps.ALIAS
                                                    ]
                                                  ) +
                                                  "\n            "
                                              ),
                                            ])
                                          : _vm._e(),
                                      ]
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.GROUP_KEY]
                                  ? _c(
                                      "div",
                                      {
                                        class: {
                                          "line-clamp-2": !_vm.showDetails,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v("by")]
                                        ),
                                        _vm._v(" "),
                                        _c("span", {
                                          domProps: {
                                            innerHTML: _vm._s(
                                              _vm.$options.filters.keysToString(
                                                _vm.node[
                                                  _vm.nodeProps.GROUP_KEY
                                                ]
                                              )
                                            ),
                                          },
                                        }),
                                      ]
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.SORT_KEY]
                                  ? _c(
                                      "div",
                                      {
                                        class: {
                                          "line-clamp-2": !_vm.showDetails,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v("by")]
                                        ),
                                        _vm._v(" "),
                                        _c("span", {
                                          domProps: {
                                            innerHTML: _vm._s(
                                              _vm.$options.filters.sortKeys(
                                                _vm.node[
                                                  _vm.nodeProps.SORT_KEY
                                                ],
                                                _vm.node[
                                                  _vm.nodeProps.PRESORTED_KEY
                                                ]
                                              )
                                            ),
                                          },
                                        }),
                                      ]
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.JOIN_TYPE]
                                  ? _c("div", [
                                      _vm._v(
                                        _vm._s(
                                          _vm.node[_vm.nodeProps.JOIN_TYPE]
                                        ) + "\n            "
                                      ),
                                      _c(
                                        "span",
                                        { staticClass: "text-muted" },
                                        [_vm._v("join")]
                                      ),
                                    ])
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.INDEX_NAME]
                                  ? _c(
                                      "div",
                                      {
                                        class: {
                                          "line-clamp-2": !_vm.showDetails,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v("using")]
                                        ),
                                        _vm._v(" "),
                                        _c("span", {
                                          domProps: {
                                            innerHTML: _vm._s(
                                              _vm.$options.filters.keysToString(
                                                _vm.node[
                                                  _vm.nodeProps.INDEX_NAME
                                                ]
                                              )
                                            ),
                                          },
                                        }),
                                      ]
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.HASH_CONDITION]
                                  ? _c(
                                      "div",
                                      {
                                        class: {
                                          "line-clamp-2": !_vm.showDetails,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "text-muted" },
                                          [_vm._v("on")]
                                        ),
                                        _vm._v(" "),
                                        _c("span", {
                                          domProps: {
                                            innerHTML: _vm._s(
                                              _vm.$options.filters.keysToString(
                                                _vm.node[
                                                  _vm.nodeProps.HASH_CONDITION
                                                ]
                                              )
                                            ),
                                          },
                                        }),
                                      ]
                                    )
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.CTE_NAME]
                                  ? _c("div", [
                                      _c(
                                        "a",
                                        {
                                          staticClass: "text-reset",
                                          attrs: { href: "" },
                                          on: {
                                            click: function ($event) {
                                              $event.stopPropagation();
                                              $event.preventDefault();
                                              return _vm.eventBus.$emit(
                                                "clickcte",
                                                "CTE " +
                                                  _vm.node[
                                                    _vm.nodeProps.CTE_NAME
                                                  ]
                                              );
                                            },
                                          },
                                        },
                                        [
                                          _c("i", {
                                            staticClass:
                                              "fa fa-search text-muted",
                                          }),
                                          _vm._v(" "),
                                          _c(
                                            "span",
                                            { staticClass: "text-muted" },
                                            [_vm._v("CTE")]
                                          ),
                                          _vm._v(
                                            " " +
                                              _vm._s(
                                                _vm.node[_vm.nodeProps.CTE_NAME]
                                              ) +
                                              "\n            "
                                          ),
                                        ]
                                      ),
                                    ])
                                  : _vm._e(),
                              ]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        !_vm.allWorkersLaunched &&
                        _vm.viewOptions.viewMode === _vm.viewModes.FULL
                          ? _c(
                              "div",
                              {
                                directives: [
                                  { name: "tippy", rawName: "v-tippy" },
                                ],
                                staticClass: "text-c-3 cursor-help",
                                attrs: {
                                  content: _vm.getHelpMessage(
                                    "workers planned not launched"
                                  ),
                                },
                              },
                              [
                                _c("i", {
                                  staticClass: "fa fa-exclamation-triangle",
                                }),
                                _vm._v(" \n          "),
                                _c("span", [
                                  _vm._v("Not all workers launched"),
                                ]),
                              ]
                            )
                          : _vm._e(),
                        _vm._v(" "),
                        _c("div", { staticClass: "clearfix" }),
                        _vm._v(" "),
                        _vm.viewOptions.highlightType !==
                          _vm.highlightTypes.NONE && _vm.highlightValue !== null
                          ? _c("div", [
                              _c(
                                "div",
                                {
                                  staticClass: "progress node-bar-container",
                                  staticStyle: { height: "5px" },
                                },
                                [
                                  _c("div", {
                                    staticClass: "progress-bar",
                                    style: {
                                      width: _vm.barWidth + "%",
                                      "background-color": _vm.getBarColor(
                                        _vm.barWidth
                                      ),
                                    },
                                    attrs: {
                                      role: "progressbar",
                                      "aria-valuenow": "0",
                                      "aria-valuemin": "0",
                                      "aria-valuemax": "100",
                                    },
                                  }),
                                ]
                              ),
                              _vm._v(" "),
                              _vm.shouldShowNodeBarLabel()
                                ? _c(
                                    "span",
                                    { staticClass: "node-bar-label" },
                                    [
                                      _c(
                                        "span",
                                        { staticClass: "text-muted" },
                                        [
                                          _vm._v(
                                            _vm._s(
                                              _vm.viewOptions.highlightType
                                            ) + ":"
                                          ),
                                        ]
                                      ),
                                      _vm._v(" \n            "),
                                      _c("span", {
                                        domProps: {
                                          innerHTML: _vm._s(_vm.highlightValue),
                                        },
                                      }),
                                    ]
                                  )
                                : _vm._e(),
                            ])
                          : _vm._e(),
                      ]
                    ),
                    _vm._v(" "),
                    _vm.showDetails
                      ? _c("div", { staticClass: "card-header border-top" }, [
                          _vm.getNodeTypeDescription()
                            ? _c("div", { staticClass: "node-description" }, [
                                _c("span", { staticClass: "node-type" }, [
                                  _vm._v(
                                    _vm._s(_vm.node[_vm.nodeProps.NODE_TYPE]) +
                                      " Node"
                                  ),
                                ]),
                                _vm._v(" "),
                                _c("span", {
                                  domProps: {
                                    innerHTML: _vm._s(
                                      _vm.getNodeTypeDescription()
                                    ),
                                  },
                                }),
                              ])
                            : _vm._e(),
                          _vm._v(" "),
                          _c(
                            "ul",
                            { staticClass: "nav nav-tabs card-header-tabs" },
                            [
                              _c("li", { staticClass: "nav-item" }, [
                                _c(
                                  "a",
                                  {
                                    staticClass: "nav-link",
                                    class: {
                                      active: _vm.activeTab === "general",
                                    },
                                    attrs: { href: "" },
                                    on: {
                                      click: function ($event) {
                                        $event.preventDefault();
                                        return _vm.setActiveTab("general");
                                      },
                                    },
                                  },
                                  [_vm._v("General")]
                                ),
                              ]),
                              _vm._v(" "),
                              _c("li", { staticClass: "nav-item" }, [
                                _c(
                                  "a",
                                  {
                                    staticClass: "nav-link text-nowrap",
                                    class: {
                                      active: _vm.activeTab === "iobuffer",
                                      disabled: !_vm.shouldShowIoBuffers,
                                    },
                                    attrs: { href: "" },
                                    on: {
                                      click: function ($event) {
                                        $event.preventDefault();
                                        return _vm.setActiveTab("iobuffer");
                                      },
                                    },
                                  },
                                  [_vm._v("IO & Buffers")]
                                ),
                              ]),
                              _vm._v(" "),
                              _c("li", { staticClass: "nav-item" }, [
                                _c(
                                  "a",
                                  {
                                    staticClass: "nav-link",
                                    class: {
                                      active: _vm.activeTab === "output",
                                      disabled: !_vm.node[_vm.nodeProps.OUTPUT],
                                    },
                                    attrs: { href: "" },
                                    on: {
                                      click: function ($event) {
                                        $event.preventDefault();
                                        return _vm.setActiveTab("output");
                                      },
                                    },
                                  },
                                  [_vm._v("Output")]
                                ),
                              ]),
                              _vm._v(" "),
                              _c("li", { staticClass: "nav-item" }, [
                                _c(
                                  "a",
                                  {
                                    staticClass: "nav-link",
                                    class: {
                                      active: _vm.activeTab === "workers",
                                      disabled: !(
                                        _vm.node[
                                          _vm.nodeProps.WORKERS_PLANNED
                                        ] ||
                                        _vm.node[
                                          _vm.nodeProps
                                            .WORKERS_PLANNED_BY_GATHER
                                        ]
                                      ),
                                    },
                                    attrs: { href: "" },
                                    on: {
                                      click: function ($event) {
                                        $event.preventDefault();
                                        return _vm.setActiveTab("workers");
                                      },
                                    },
                                  },
                                  [_vm._v("Workers")]
                                ),
                              ]),
                              _vm._v(" "),
                              _c("li", { staticClass: "nav-item" }, [
                                _c(
                                  "a",
                                  {
                                    staticClass: "nav-link",
                                    class: { active: _vm.activeTab === "misc" },
                                    attrs: { href: "" },
                                    on: {
                                      click: function ($event) {
                                        $event.preventDefault();
                                        return _vm.setActiveTab("misc");
                                      },
                                    },
                                  },
                                  [_vm._v("Misc")]
                                ),
                              ]),
                            ]
                          ),
                        ])
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.showDetails
                      ? _c("div", { staticClass: "card-body tab-content" }, [
                          _c(
                            "div",
                            {
                              staticClass: "tab-pane",
                              class: {
                                "show active": _vm.activeTab === "general",
                              },
                            },
                            [
                              _vm.plan.isAnalyze
                                ? _c(
                                    "div",
                                    [
                                      _c("i", {
                                        staticClass:
                                          "fa fa-fw fa-clock text-muted",
                                      }),
                                      _vm._v(" "),
                                      _c("b", [_vm._v("Timing:")]),
                                      _vm._v(" \n            "),
                                      _c("span", {
                                        class:
                                          "p-0 px-1 rounded alert " +
                                          _vm.durationClass,
                                        domProps: {
                                          innerHTML: _vm._s(
                                            _vm.formattedProp(
                                              "EXCLUSIVE_DURATION"
                                            )
                                          ),
                                        },
                                      }),
                                      _vm._v(" "),
                                      _vm.executionTimePercent !== Infinity
                                        ? [
                                            _vm._v(
                                              "\n              |\n              "
                                            ),
                                            _c("strong", [
                                              _vm._v(
                                                _vm._s(_vm.executionTimePercent)
                                              ),
                                            ]),
                                            _c(
                                              "span",
                                              { staticClass: "text-muted" },
                                              [_vm._v("%")]
                                            ),
                                          ]
                                        : _vm._e(),
                                    ],
                                    2
                                  )
                                : _vm._e(),
                              _vm._v(" "),
                              _c("div", [
                                _c("i", {
                                  staticClass:
                                    "fa fa-fw fa-align-justify text-muted",
                                }),
                                _vm._v(" "),
                                _c("b", [_vm._v("Rows:")]),
                                _vm._v(" "),
                                _c("span", { staticClass: "px-1" }, [
                                  _vm._v(
                                    _vm._s(
                                      _vm.tilde +
                                        _vm.formattedProp("ACTUAL_ROWS_REVISED")
                                    )
                                  ),
                                ]),
                                _vm._v(" "),
                                _vm.node[_vm.nodeProps.PLAN_ROWS]
                                  ? _c("span", { staticClass: "text-muted" }, [
                                      _vm._v(
                                        "(Planned: " +
                                          _vm._s(
                                            _vm.tilde +
                                              _vm.formattedProp(
                                                "PLAN_ROWS_REVISED"
                                              )
                                          ) +
                                          ")"
                                      ),
                                    ])
                                  : _vm._e(),
                                _vm._v(" "),
                                _vm.plannerRowEstimateDirection !==
                                  _vm.estimateDirections.none &&
                                _vm.shouldShowPlannerEstimate
                                  ? _c("span", [
                                      _vm._v(
                                        "\n              |\n              "
                                      ),
                                      _vm.plannerRowEstimateDirection ===
                                      _vm.estimateDirections.over
                                        ? _c("span", [
                                            _c("i", {
                                              staticClass: "fa fa-arrow-up",
                                            }),
                                            _vm._v(" over"),
                                          ])
                                        : _vm._e(),
                                      _vm._v(" "),
                                      _vm.plannerRowEstimateDirection ===
                                      _vm.estimateDirections.under
                                        ? _c("span", [
                                            _c("i", {
                                              staticClass: "fa fa-arrow-down",
                                            }),
                                            _vm._v(" under"),
                                          ])
                                        : _vm._e(),
                                      _vm._v(
                                        "\n              estimated\n              "
                                      ),
                                      _vm.plannerRowEstimateValue != Infinity
                                        ? _c("span", [
                                            _vm._v(" by\n                "),
                                            _c("span", {
                                              class:
                                                "p-0 px-1 alert " +
                                                _vm.estimationClass,
                                              domProps: {
                                                innerHTML: _vm._s(
                                                  _vm.formattedProp(
                                                    "PLANNER_ESTIMATE_FACTOR"
                                                  )
                                                ),
                                              },
                                            }),
                                          ])
                                        : _vm._e(),
                                    ])
                                  : _vm._e(),
                              ]),
                              _vm._v(" "),
                              _vm.rowsRemoved
                                ? _c("div", [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-fw fa-filter text-muted",
                                    }),
                                    _vm._v(" "),
                                    _c("b", [
                                      _vm._v(
                                        "\n              " +
                                          _vm._s(
                                            _vm.nodeProps[_vm.rowsRemovedProp]
                                          ) +
                                          ":\n            "
                                      ),
                                    ]),
                                    _vm._v(" "),
                                    _c("span", [
                                      _c("span", { staticClass: "px-1" }, [
                                        _vm._v(
                                          _vm._s(
                                            _vm.tilde +
                                              _vm.formattedProp(
                                                _vm.rowsRemovedProp
                                              )
                                          )
                                        ),
                                      ]),
                                      _vm._v("|\n              "),
                                      _c(
                                        "span",
                                        {
                                          class:
                                            "p-0 px-1 alert " +
                                            _vm.rowsRemovedClass,
                                        },
                                        [
                                          _vm._v(
                                            _vm._s(
                                              _vm.rowsRemovedPercentString
                                            ) + "%"
                                          ),
                                        ]
                                      ),
                                    ]),
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _vm.node[_vm.nodeProps.HEAP_FETCHES]
                                ? _c("div", [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-fw fa-exchange-alt text-muted",
                                    }),
                                    _vm._v(" "),
                                    _c("b", [_vm._v("Heap Fetches:")]),
                                    _vm._v(" \n            "),
                                    _c("span", {
                                      class:
                                        "p-0 px-1 rounded alert " +
                                        _vm.heapFetchesClass,
                                      domProps: {
                                        innerHTML: _vm._s(
                                          _vm.formattedProp("HEAP_FETCHES")
                                        ),
                                      },
                                    }),
                                    _vm._v("\n             \n            "),
                                    _vm.heapFetchesClass
                                      ? _c("i", {
                                          directives: [
                                            {
                                              name: "tippy",
                                              rawName: "v-tippy",
                                              value: { arrow: true },
                                              expression: "{arrow: true}",
                                            },
                                          ],
                                          staticClass:
                                            "fa fa-fw fa-info-circle text-muted",
                                          attrs: {
                                            content:
                                              "Visibility map may be out-of-date. Consider using VACUUM or change autovacuum settings.",
                                          },
                                        })
                                      : _vm._e(),
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _vm.node[_vm.nodeProps.EXCLUSIVE_COST]
                                ? _c("div", [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-fw fa-dollar-sign text-muted",
                                    }),
                                    _vm._v(" "),
                                    _c("b", [_vm._v("Cost:")]),
                                    _vm._v(" "),
                                    _c(
                                      "span",
                                      {
                                        class:
                                          "p-0 px-1 mr-1 alert " +
                                          _vm.costClass,
                                      },
                                      [
                                        _vm._v(
                                          _vm._s(
                                            _vm.formattedProp("EXCLUSIVE_COST")
                                          )
                                        ),
                                      ]
                                    ),
                                    _vm._v(" "),
                                    _c("span", { staticClass: "text-muted" }, [
                                      _vm._v(
                                        "(Total: " +
                                          _vm._s(
                                            _vm.formattedProp("TOTAL_COST")
                                          ) +
                                          ")"
                                      ),
                                    ]),
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _vm.node[_vm.nodeProps.ACTUAL_LOOPS] > 1
                                ? _c("div", [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-fw fa-undo text-muted",
                                    }),
                                    _vm._v(" "),
                                    _c("b", [_vm._v("Loops:")]),
                                    _vm._v(" "),
                                    _c("span", { staticClass: "px-1" }, [
                                      _vm._v(
                                        _vm._s(
                                          _vm.formattedProp("ACTUAL_LOOPS")
                                        ) + "\n            "
                                      ),
                                    ]),
                                  ])
                                : _vm._e(),
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "div",
                            {
                              staticClass: "tab-pane",
                              class: {
                                "show active": _vm.activeTab === "iobuffer",
                              },
                            },
                            [
                              _vm.node[_vm.nodeProps.EXCLUSIVE_IO_READ_TIME] ||
                              _vm.node[_vm.nodeProps.EXCLUSIVE_IO_WRITE_TIME]
                                ? _c("div", { staticClass: "mb-2" }, [
                                    _c("b", [
                                      _vm._v(
                                        "\n              I/O Timings:\n            "
                                      ),
                                    ]),
                                    _vm._v(" "),
                                    _vm.node[
                                      _vm.nodeProps.EXCLUSIVE_IO_READ_TIME
                                    ]
                                      ? _c("span", { staticClass: "ml-2" }, [
                                          _c("b", [_vm._v("Read: ")]),
                                          _vm._v(
                                            "\n              " +
                                              _vm._s(
                                                _vm.formattedProp(
                                                  "EXCLUSIVE_IO_READ_TIME"
                                                )
                                              ) +
                                              "\n            "
                                          ),
                                        ])
                                      : _vm._e(),
                                    _vm._v(" "),
                                    _vm.node[
                                      _vm.nodeProps.EXCLUSIVE_IO_WRITE_TIME
                                    ]
                                      ? _c("span", { staticClass: "ml-2" }, [
                                          _c("b", [_vm._v("Write: ")]),
                                          _vm._v(
                                            "\n              " +
                                              _vm._s(
                                                _vm.formattedProp(
                                                  "EXCLUSIVE_IO_WRITE_TIME"
                                                )
                                              ) +
                                              "\n            "
                                          ),
                                        ])
                                      : _vm._e(),
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _c("b", [
                                _vm._v("\n            Blocks:\n          "),
                              ]),
                              _vm._v(" "),
                              _c("table", { staticClass: "table table-sm" }, [
                                _vm._m(0),
                                _vm._v(" "),
                                _c("tr", [
                                  _c("th", [_vm._v("Shared")]),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_SHARED_HIT_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_SHARED_READ_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_SHARED_DIRTIED_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_SHARED_WRITTEN_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                ]),
                                _vm._v(" "),
                                _c("tr", [
                                  _c("th", [_vm._v("Temp")]),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right bg-hatched",
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_TEMP_READ_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right bg-hatched",
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_TEMP_WRITTEN_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                ]),
                                _vm._v(" "),
                                _c("tr", [
                                  _c("th", [_vm._v("Local")]),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_LOCAL_HIT_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_LOCAL_READ_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_LOCAL_DIRTIED_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                  _vm._v(" "),
                                  _c("td", {
                                    staticClass: "text-right",
                                    domProps: {
                                      innerHTML: _vm._s(
                                        _vm.formattedProp(
                                          "EXCLUSIVE_LOCAL_WRITTEN_BLOCKS"
                                        ) || "-"
                                      ),
                                    },
                                  }),
                                ]),
                              ]),
                              _vm._v(" "),
                              _vm.node[_vm.nodeProps.WAL_RECORDS] ||
                              _vm.node[_vm.nodeProps.WAL_BYTES]
                                ? _c("div", { staticClass: "mb-2" }, [
                                    _c("b", [
                                      _c(
                                        "span",
                                        {
                                          directives: [
                                            {
                                              name: "tippy",
                                              rawName: "v-tippy",
                                            },
                                          ],
                                          staticClass: "more-info",
                                          attrs: {
                                            content: "Write-Ahead Logging",
                                          },
                                        },
                                        [_vm._v("WAL")]
                                      ),
                                      _vm._v(":\n            "),
                                    ]),
                                    _vm._v(
                                      "\n            " +
                                        _vm._s(
                                          _vm.formattedProp("WAL_RECORDS")
                                        ) +
                                        " records "
                                    ),
                                    _c("small", [
                                      _vm._v(
                                        "(" +
                                          _vm._s(
                                            _vm.formattedProp("WAL_BYTES")
                                          ) +
                                          ")"
                                      ),
                                    ]),
                                    _vm._v(" "),
                                    _vm.node[_vm.nodeProps.WAL_FPI]
                                      ? _c("span", [
                                          _vm._v(" -\n            "),
                                          _c(
                                            "span",
                                            {
                                              directives: [
                                                {
                                                  name: "tippy",
                                                  rawName: "v-tippy",
                                                },
                                              ],
                                              staticClass: "more-info",
                                              attrs: {
                                                content: "WAL Full Page Images",
                                              },
                                            },
                                            [_vm._v("FPI")]
                                          ),
                                          _vm._v(
                                            ": " +
                                              _vm._s(
                                                _vm.formattedProp("WAL_FPI")
                                              ) +
                                              "\n            "
                                          ),
                                        ])
                                      : _vm._e(),
                                  ])
                                : _vm._e(),
                            ]
                          ),
                          _vm._v(" "),
                          _c("div", {
                            staticClass:
                              "tab-pane overflow-auto text-monospace",
                            class: {
                              "show active": _vm.activeTab === "output",
                            },
                            staticStyle: { "max-height": "200px" },
                            domProps: {
                              innerHTML: _vm._s(_vm.formattedProp("OUTPUT")),
                            },
                          }),
                          _vm._v(" "),
                          _vm.node[_vm.nodeProps.WORKERS_PLANNED] ||
                          _vm.node[_vm.nodeProps.WORKERS_PLANNED_BY_GATHER]
                            ? _c(
                                "div",
                                {
                                  staticClass: "tab-pane",
                                  class: {
                                    "show active": _vm.activeTab === "workers",
                                  },
                                },
                                [
                                  (_vm.node[_vm.nodeProps.WORKERS_PLANNED] ||
                                    _vm.node[
                                      _vm.nodeProps.WORKERS_PLANNED_BY_GATHER
                                    ]) &&
                                  _vm.viewOptions.viewMode ===
                                    _vm.viewModes.FULL
                                    ? _c("div", [
                                        _c("b", [_vm._v("Workers planned: ")]),
                                        _vm._v(" "),
                                        _c("span", { staticClass: "px-1" }, [
                                          _vm._v(
                                            _vm._s(
                                              _vm.node[
                                                _vm.nodeProps.WORKERS_PLANNED
                                              ] ||
                                                _vm.node[
                                                  _vm.nodeProps
                                                    .WORKERS_PLANNED_BY_GATHER
                                                ]
                                            )
                                          ),
                                        ]),
                                        _vm._v(" "),
                                        !_vm.node[
                                          _vm.nodeProps.WORKERS_PLANNED
                                        ] &&
                                        !_vm.node[_vm.nodeProps.WORKERS] &&
                                        (!_vm.plan.isVerbose ||
                                          !_vm.plan.isAnalyze)
                                          ? _c(
                                              "em",
                                              { staticClass: "text-warning" },
                                              [
                                                _c("i", {
                                                  directives: [
                                                    {
                                                      name: "tippy",
                                                      rawName: "v-tippy",
                                                    },
                                                  ],
                                                  staticClass:
                                                    "fa fa-exclamation-triangle cursor-help",
                                                  attrs: {
                                                    content: _vm.getHelpMessage(
                                                      "fuzzy needs verbose"
                                                    ),
                                                  },
                                                }),
                                              ]
                                            )
                                          : _vm._e(),
                                      ])
                                    : _vm._e(),
                                  _vm._v(" "),
                                  _vm.node[_vm.nodeProps.WORKERS_LAUNCHED] &&
                                  _vm.viewOptions.viewMode ===
                                    _vm.viewModes.FULL
                                    ? _c("div", [
                                        _c("b", [_vm._v("Workers launched: ")]),
                                        _vm._v(" "),
                                        _c("span", { staticClass: "px-1" }, [
                                          _vm._v(
                                            _vm._s(
                                              _vm.node[
                                                _vm.nodeProps.WORKERS_LAUNCHED
                                              ]
                                            )
                                          ),
                                        ]),
                                      ])
                                    : _vm._e(),
                                  _vm._v(" "),
                                  !_vm.workersLaunchedCount &&
                                  _vm.node[
                                    _vm.nodeProps.WORKERS_PLANNED_BY_GATHER
                                  ]
                                    ? _c("div", { staticClass: "text-muted" }, [
                                        _c("em", [
                                          _vm._v(
                                            "\n              Detailed information is not available.\n                "
                                          ),
                                          _c("i", {
                                            directives: [
                                              {
                                                name: "tippy",
                                                rawName: "v-tippy",
                                              },
                                            ],
                                            staticClass:
                                              "fa fa-info-circle cursor-help",
                                            attrs: {
                                              content: _vm.getHelpMessage(
                                                "workers detailed info missing"
                                              ),
                                            },
                                          }),
                                        ]),
                                      ])
                                    : _vm._e(),
                                  _vm._v(" "),
                                  _vm.lodash.isArray(
                                    _vm.node[_vm.nodeProps.WORKERS]
                                  )
                                    ? _c(
                                        "div",
                                        { staticClass: "accordion" },
                                        [
                                          _vm._l(
                                            _vm.node[_vm.nodeProps.WORKERS],
                                            function (worker, index) {
                                              return [
                                                _c(
                                                  "div",
                                                  { staticClass: "card" },
                                                  [
                                                    _c(
                                                      "div",
                                                      {
                                                        staticClass:
                                                          "card-header p-0",
                                                      },
                                                      [
                                                        _c(
                                                          "button",
                                                          {
                                                            staticClass:
                                                              "btn btn-link btn-sm text-secondary",
                                                            staticStyle: {
                                                              "font-size":
                                                                "inherit",
                                                            },
                                                            attrs: {
                                                              type: "button",
                                                              "data-toggle":
                                                                "collapse",
                                                              "data-target":
                                                                "#collapse-" +
                                                                _vm._uid +
                                                                "-" +
                                                                index,
                                                            },
                                                          },
                                                          [
                                                            _c("i", {
                                                              staticClass:
                                                                "fa fa-chevron-right fa-fw",
                                                            }),
                                                            _vm._v(" "),
                                                            _c("i", {
                                                              staticClass:
                                                                "fa fa-chevron-down fa-fw",
                                                            }),
                                                            _vm._v(
                                                              "\n                    Worker " +
                                                                _vm._s(
                                                                  worker[
                                                                    _vm
                                                                      .workerProps
                                                                      .WORKER_NUMBER
                                                                  ]
                                                                ) +
                                                                "\n                  "
                                                            ),
                                                          ]
                                                        ),
                                                      ]
                                                    ),
                                                    _vm._v(" "),
                                                    _c(
                                                      "div",
                                                      {
                                                        staticClass: "collapse",
                                                        attrs: {
                                                          id:
                                                            "collapse-" +
                                                            _vm._uid +
                                                            "-" +
                                                            index,
                                                        },
                                                      },
                                                      [
                                                        _c(
                                                          "div",
                                                          {
                                                            staticClass:
                                                              "card-body p-0",
                                                          },
                                                          [
                                                            _c(
                                                              "table",
                                                              {
                                                                staticClass:
                                                                  "table table-sm prop-list mb-0",
                                                              },
                                                              _vm._l(
                                                                worker,
                                                                function (
                                                                  value,
                                                                  key
                                                                ) {
                                                                  return _vm.shouldShowProp(
                                                                    key,
                                                                    value
                                                                  )
                                                                    ? _c("tr", [
                                                                        _c(
                                                                          "td",
                                                                          {
                                                                            attrs: {
                                                                              width:
                                                                                "40%",
                                                                            },
                                                                          },
                                                                          [
                                                                            _vm._v(
                                                                              _vm._s(
                                                                                key
                                                                              )
                                                                            ),
                                                                          ]
                                                                        ),
                                                                        _vm._v(
                                                                          " "
                                                                        ),
                                                                        _c(
                                                                          "td",
                                                                          {
                                                                            domProps: {
                                                                              innerHTML: _vm._s(
                                                                                _vm.$options.filters.formatNodeProp(
                                                                                  key,
                                                                                  value,
                                                                                  true
                                                                                )
                                                                              ),
                                                                            },
                                                                          }
                                                                        ),
                                                                      ])
                                                                    : _vm._e();
                                                                }
                                                              ),
                                                              0
                                                            ),
                                                          ]
                                                        ),
                                                      ]
                                                    ),
                                                  ]
                                                ),
                                              ];
                                            }
                                          ),
                                        ],
                                        2
                                      )
                                    : _vm._e(),
                                ]
                              )
                            : _vm._e(),
                          _vm._v(" "),
                          _c(
                            "div",
                            {
                              staticClass: "tab-pane",
                              class: {
                                "show active": _vm.activeTab === "misc",
                              },
                            },
                            [
                              _c(
                                "table",
                                { staticClass: "table table-sm prop-list" },
                                _vm._l(_vm.props, function (prop) {
                                  return _vm.shouldShowProp(
                                    prop.key,
                                    prop.value
                                  )
                                    ? _c("tr", [
                                        _c("td", { attrs: { width: "40%" } }, [
                                          _vm._v(_vm._s(prop.key)),
                                        ]),
                                        _vm._v(" "),
                                        _c("td", {
                                          domProps: {
                                            innerHTML: _vm._s(
                                              _vm.$options.filters.formatNodeProp(
                                                prop.key,
                                                prop.value,
                                                true
                                              )
                                            ),
                                          },
                                        }),
                                      ])
                                    : _vm._e();
                                }),
                                0
                              ),
                              _vm._v(" "),
                              _vm._m(1),
                            ]
                          ),
                        ])
                      : _vm._e(),
                  ]
                ),
              ]
            ),
            _vm._v(" "),
            _vm.plans
              ? _c(
                  "ul",
                  { class: ["node-children", { collapsed: _vm.collapsed }] },
                  _vm._l(_vm.plans, function (subnode) {
                    return _c(
                      "li",
                      [
                        _c("plan-node", {
                          attrs: {
                            node: subnode,
                            plan: _vm.plan,
                            viewOptions: _vm.viewOptions,
                            eventBus: _vm.eventBus,
                          },
                          scopedSlots: _vm._u(
                            [
                              {
                                key: "nodeindex",
                                fn: function (ref) {
                                  var node = ref.node;
                                  return [
                                    _vm._t("nodeindex", null, { node: node }),
                                  ];
                                },
                              },
                            ],
                            null,
                            true
                          ),
                        }),
                      ],
                      1
                    );
                  }),
                  0
                )
              : _vm._e(),
          ]
        );
      };
      var PlanNodevue_type_template_id_895b845c_staticRenderFns = [
        function () {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("tr", [
            _c("td"),
            _vm._v(" "),
            _c("th", { staticClass: "text-right", attrs: { width: "25%" } }, [
              _vm._v("Hit"),
            ]),
            _vm._v(" "),
            _c("th", { staticClass: "text-right", attrs: { width: "25%" } }, [
              _vm._v("Read"),
            ]),
            _vm._v(" "),
            _c("th", { staticClass: "text-right", attrs: { width: "25%" } }, [
              _vm._v("Dirtied"),
            ]),
            _vm._v(" "),
            _c("th", { staticClass: "text-right", attrs: { width: "25%" } }, [
              _vm._v("Written"),
            ]),
          ]);
        },
        function () {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("div", { staticClass: "text-muted text-right" }, [
            _c("em", [_vm._v("* Calculated value")]),
          ]);
        },
      ];

      // CONCATENATED MODULE: ./src/components/PlanNode.vue?vue&type=template&id=895b845c&

      // CONCATENATED MODULE: ./src/services/help-service.ts
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      var HelpService = /*#__PURE__*/ (function () {
        function HelpService() {
          _classCallCheck(this, HelpService);

          this.nodeId = 0;
        }

        _createClass(HelpService, [
          {
            key: "getNodeTypeDescription",
            value: function getNodeTypeDescription(nodeType) {
              return NODE_DESCRIPTIONS[nodeType.toUpperCase()];
            },
          },
          {
            key: "getHelpMessage",
            value: function getHelpMessage(helpMessage) {
              return HELP_MESSAGES[helpMessage.toUpperCase()];
            },
          },
        ]);

        return HelpService;
      })();
      var NODE_DESCRIPTIONS = {
        LIMIT: "returns a specified number of rows from a record set.",
        SORT: "sorts a record set based on the specified sort key.",
        "NESTED LOOP":
          "merges two record sets by looping through every record in the first set and\n   trying to find a match in the second set. All matching records are returned.",
        "MERGE JOIN":
          "merges two record sets by first sorting them on a <strong>join key</strong>.",
        HASH:
          "generates a hash table from the records in the input recordset. Hash is used by\n   <strong>Hash Join</strong>.",
        "HASH JOIN":
          "joins two record sets by hashing one of them (using a <strong>Hash Scan</strong>).",
        AGGREGATE:
          "groups records together based on a GROUP BY or aggregate function (like <code>sum()</code>).",
        HASHAGGREGATE:
          "groups records together based on a GROUP BY or aggregate function (like sum()). Hash Aggregate uses\n   a hash to first organize the records by a key.",
        "SEQ SCAN":
          "finds relevant records by sequentially scanning the input record set. When reading from a table,\n   Seq Scans (unlike Index Scans) perform a single read operation (only the table is read).",
        "INDEX SCAN":
          "finds relevant records based on an <strong>Index</strong>.\n    Index Scans perform 2 read operations: one to\n    read the index and another to read the actual value from the table.",
        "INDEX ONLY SCAN":
          "finds relevant records based on an <strong>Index</strong>.\n    Index Only Scans perform a single read operation\n    from the index and do not read from the corresponding table.",
        "BITMAP HEAP SCAN":
          "searches through the pages returned by the <strong>Bitmap Index Scan</strong>\n    for relevant rows.",
        "BITMAP INDEX SCAN":
          "uses a <strong>Bitmap Index</strong> (index which uses 1 bit per page)\n    to find all relevant pages.\n    Results of this node are fed to the <strong>Bitmap Heap Scan</strong>.",
        "CTE SCAN":
          "performs a sequential scan of <strong>Common Table Expression (CTE) query</strong> results. Note that\n    results of a CTE are materialized (calculated and temporarily stored).",
      };
      var HELP_MESSAGES = {
        "MISSING EXECUTION TIME":
          "Execution time (or Total runtime) not available for this plan. Make sure you\n    use EXPLAIN ANALYZE.",
        "MISSING PLANNING TIME": "Planning time not available for this plan.",
        "WORKERS PLANNED NOT LAUNCHED":
          "Less workers than planned were launched.\nConsider modifying max_parallel_workers or max_parallel_workers_per_gather.",
        "WORKERS DETAILED INFO MISSING":
          "Consider using EXPLAIN (ANALYZE, VERBOSE)",
        "FUZZY NEEDS VERBOSE":
          "Information may not be accurate. Use EXPLAIN VERBOSE mode.",
      };
      function scrollChildIntoParentView(parent, child, shouldCenter, done) {
        // Where is the parent on page
        var parentRect = parent.getBoundingClientRect(); // Where is the child

        var childRect = child.getBoundingClientRect();
        var scrollLeft = parent.scrollLeft; // don't move

        var isChildViewableX =
          childRect.left >= parentRect.left &&
          childRect.left <= parentRect.right &&
          childRect.right <= parentRect.right;
        var scrollTop = parent.scrollTop;
        var isChildViewableY =
          childRect.top >= parentRect.top &&
          childRect.top <= parentRect.bottom &&
          childRect.bottom <= parentRect.bottom;

        if (shouldCenter || !isChildViewableX || !isChildViewableY) {
          // scroll by offset relative to parent
          // try to put the child in the middle of parent horizontaly
          scrollLeft =
            childRect.left +
            parent.scrollLeft -
            parentRect.left -
            parentRect.width / 2 +
            childRect.width / 2;
          scrollTop =
            childRect.top +
            parent.scrollTop -
            parentRect.top -
            parentRect.height / 2 +
            childRect.height / 2;
          smoothScroll({
            element: parent,
            to: {
              scrollTop: scrollTop,
              scrollLeft: scrollLeft,
            },
            duration: 400,
            done: done,
          });
        } else if (done) {
          done();
        }
      }

      var easeInOutQuad = function easeInOutQuad(_ref) {
        var currentTime = _ref.currentTime,
          start = _ref.start,
          change = _ref.change,
          duration = _ref.duration;
        var newCurrentTime = currentTime;
        newCurrentTime /= duration / 2;

        if (newCurrentTime < 1) {
          return (change / 2) * newCurrentTime * newCurrentTime + start;
        }

        newCurrentTime -= 1;
        return (
          (-change / 2) * (newCurrentTime * (newCurrentTime - 2) - 1) + start
        );
      };

      var ScrollDirection;

      (function (ScrollDirection) {
        ScrollDirection[(ScrollDirection["scrollTop"] = 0)] = "scrollTop";
        ScrollDirection[(ScrollDirection["scrollLeft"] = 1)] = "scrollLeft";
      })(ScrollDirection || (ScrollDirection = {}));

      function smoothScroll(_ref2) {
        var duration = _ref2.duration,
          element = _ref2.element,
          to = _ref2.to,
          done = _ref2.done;
        var startX = element.scrollTop;
        var startY = element.scrollLeft;
        var changeX = to.scrollTop - startX;
        var changeY = to.scrollLeft - startY;
        var startDate = new Date().getTime();

        var animateScroll = function animateScroll() {
          var currentDate = new Date().getTime();
          var currentTime = currentDate - startDate;
          element.scrollTop = easeInOutQuad({
            currentTime: currentTime,
            start: startX,
            change: changeX,
            duration: duration,
          });
          element.scrollLeft = easeInOutQuad({
            currentTime: currentTime,
            start: startY,
            change: changeY,
            duration: duration,
          });

          if (currentTime < duration) {
            requestAnimationFrame(animateScroll);
          } else {
            element.scrollTop = to.scrollTop;
            element.scrollLeft = to.scrollLeft;

            if (done) {
              done();
            }
          }
        };

        animateScroll();
      } // Polyfill for Element.closest
      // https://developer.mozilla.org/fr/docs/Web/API/Element/closest

      if (!Element.prototype.matches) {
        // @ts-ignore
        Element.prototype.matches =
          Element.prototype.msMatchesSelector ||
          Element.prototype.webkitMatchesSelector;
      }

      if (!Element.prototype.closest) {
        Element.prototype.closest = function (s) {
          var el = this;

          if (!document.documentElement.contains(el)) {
            return null;
          }

          do {
            if (el.matches(s)) {
              return el;
            }

            el = el.parentElement || el.parentNode;
          } while (el !== null && el.nodeType === 1);

          return null;
        };
      }
      /*
       * Split a string, ensuring balanced parenthesis and balanced quotes.
       */

      function splitBalanced(input, split) {
        // Build the pattern from params with defaults:
        var pattern = "([\\s\\S]*?)(e)?(?:(o)|(c)|(t)|(sp)|$)"
          .replace("sp", split)
          .replace("o", "[\\(\\{\\[]")
          .replace("c", "[\\)\\}\\]]")
          .replace("t", "['\"]")
          .replace("e", "[\\\\]");
        var r = new RegExp(pattern, "gi");
        var stack = [];
        var buffer = [];
        var results = [];
        input.replace(r, function ($0, $1, $e, $o, $c, $t, $s, i) {
          if ($e) {
            // Escape
            buffer.push($1, $s || $o || $c || $t);
            return "";
          } else if ($o) {
            // Open
            stack.push($o);
          } else if ($c) {
            // Close
            stack.pop();
          } else if ($t) {
            // Toggle
            if (stack[stack.length - 1] !== $t) {
              stack.push($t);
            } else {
              stack.pop();
            }
          } else {
            // Split (if no stack) or EOF
            if ($s ? !stack.length : !$1) {
              buffer.push($1);
              results.push(buffer.join(""));
              buffer = [];
              return "";
            }
          }

          buffer.push($0);
          return "";
        });
        return results;
      }
      function findNodeById(plan, id) {
        var o = plan.content.Plan;

        if (o.Plans) {
          o.Plans.some(function iter(child) {
            if (child.nodeId === id) {
              o = child;
              return true;
            }

            return child.Plans && child.Plans.some(iter);
          });
        }

        return o;
      }
      // CONCATENATED MODULE: ./src/services/color-service.ts
      function color_service_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function color_service_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function color_service_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          color_service_defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          color_service_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      var ColorService = /*#__PURE__*/ (function () {
        function ColorService() {
          color_service_classCallCheck(this, ColorService);
        }

        color_service_createClass(ColorService, [
          {
            key: "hslToRgb",
            value:
              /**
               * http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion
               *
               * Converts an HSL color value to RGB. Conversion formula
               * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
               * Assumes h, s, and l are contained in the set [0, 1] and
               * returns r, g, and b in the set [0, 255].
               *
               * @param   Number  h       The hue
               * @param   Number  s       The saturation
               * @param   Number  l       The lightness
               * @return  Array           The RGB representation
               */
              function hslToRgb(h, s, l) {
                var r;
                var g;
                var b;

                if (s === 0) {
                  r = g = b = l; // achromatic
                } else {
                  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                  var p = 2 * l - q;
                  r = this.hue2rgb(p, q, h + 1 / 3);
                  g = this.hue2rgb(p, q, h);
                  b = this.hue2rgb(p, q, h - 1 / 3);
                }

                return [
                  Math.floor(r * 255),
                  Math.floor(g * 255),
                  Math.floor(b * 255),
                ];
              }, // convert a number to a color using hsl
          },
          {
            key: "numberToColorHsl",
            value: function numberToColorHsl(i) {
              // as the function expects a value between 0 and 100, and red = 100° and green = 0°
              // we convert the input to the appropriate hue value
              var hue = ((100 - i) * 1.2) / 360; // we convert hsl to rgb (saturation 100%, lightness 50%)

              var rgb = this.hslToRgb(hue, 0.9, 0.4); // we format to css value and return

              return "rgb(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")";
            },
          },
          {
            key: "durationPercentToClass",
            value: function durationPercentToClass(i) {
              if (i > 90) {
                return 4;
              } else if (i > 40) {
                return 3;
              } else if (i > 10) {
                return 2;
              }

              return 1;
            },
          },
          {
            key: "hue2rgb",
            value: function hue2rgb(p, q, t) {
              if (t < 0) {
                t += 1;
              }

              if (t > 1) {
                t -= 1;
              }

              if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
              }

              if (t < 1 / 2) {
                return q;
              }

              if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
              }

              return p;
            },
          },
        ]);

        return ColorService;
      })();
      // EXTERNAL MODULE: ./node_modules/moment/moment.js
      var moment = __webpack_require__("c1df");
      var moment_default = /*#__PURE__*/ __webpack_require__.n(moment);

      // EXTERNAL MODULE: ./node_modules/moment-duration-format/lib/moment-duration-format.js
      var moment_duration_format = __webpack_require__("4623");
      var moment_duration_format_default = /*#__PURE__*/ __webpack_require__.n(
        moment_duration_format
      );

      // CONCATENATED MODULE: ./src/enums.ts
      function enums_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function enums_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          enums_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) enums_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function enums_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Metric;

      (function (Metric) {
        Metric[(Metric["time"] = 0)] = "time";
        Metric[(Metric["rows"] = 1)] = "rows";
        Metric[(Metric["cost"] = 2)] = "cost";
        Metric[(Metric["buffers"] = 3)] = "buffers";
        Metric[(Metric["estimate_factor"] = 4)] = "estimate_factor";
      })(Metric || (Metric = {}));

      var BufferLocation;

      (function (BufferLocation) {
        BufferLocation["shared"] = "Shared";
        BufferLocation["temp"] = "Temp";
        BufferLocation["local"] = "Local";
      })(BufferLocation || (BufferLocation = {}));

      var BufferType;

      (function (BufferType) {
        BufferType["hit"] = "Hit";
        BufferType["read"] = "Read";
        BufferType["written"] = "Written";
        BufferType["dirtied"] = "Dirtied";
      })(BufferType || (BufferType = {}));

      var HighlightType = /*#__PURE__*/ enums_createClass(
        function HighlightType() {
          enums_classCallCheck(this, HighlightType);
        }
      );
      HighlightType.NONE = "none";
      HighlightType.DURATION = "duration";
      HighlightType.ROWS = "rows";
      HighlightType.COST = "cost";
      var EstimateDirection;

      (function (EstimateDirection) {
        EstimateDirection[(EstimateDirection["over"] = 1)] = "over";
        EstimateDirection[(EstimateDirection["under"] = 2)] = "under";
        EstimateDirection[(EstimateDirection["none"] = 3)] = "none";
      })(EstimateDirection || (EstimateDirection = {}));

      var ViewMode = /*#__PURE__*/ enums_createClass(function ViewMode() {
        enums_classCallCheck(this, ViewMode);
      });
      ViewMode.FULL = "full";
      ViewMode.COMPACT = "compact";
      ViewMode.DOT = "dot";
      var Orientation = /*#__PURE__*/ enums_createClass(function Orientation() {
        enums_classCallCheck(this, Orientation);
      });
      Orientation.TWOD = "twod";
      Orientation.CLASSIC = "classic";
      var CenterMode;

      (function (CenterMode) {
        CenterMode[(CenterMode["center"] = 0)] = "center";
        CenterMode[(CenterMode["visible"] = 1)] = "visible";
        CenterMode[(CenterMode["none"] = 2)] = "none";
      })(CenterMode || (CenterMode = {}));

      var HighlightMode;

      (function (HighlightMode) {
        HighlightMode[(HighlightMode["flash"] = 1)] = "flash";
        HighlightMode[(HighlightMode["highlight"] = 2)] = "highlight";
        HighlightMode[(HighlightMode["showdetails"] = 4)] = "showdetails";
      })(HighlightMode || (HighlightMode = {}));

      var NodeProp;

      (function (NodeProp) {
        // plan property keys
        NodeProp["NODE_TYPE"] = "Node Type";
        NodeProp["ACTUAL_ROWS"] = "Actual Rows";
        NodeProp["PLAN_ROWS"] = "Plan Rows";
        NodeProp["PLAN_WIDTH"] = "Plan Width";
        NodeProp["ROWS_REMOVED_BY_FILTER"] = "Rows Removed by Filter";
        NodeProp["ROWS_REMOVED_BY_JOIN_FILTER"] = "Rows Removed by Join Filter";
        NodeProp["ACTUAL_STARTUP_TIME"] = "Actual Startup Time";
        NodeProp["ACTUAL_TOTAL_TIME"] = "Actual Total Time";
        NodeProp["ACTUAL_LOOPS"] = "Actual Loops";
        NodeProp["STARTUP_COST"] = "Startup Cost";
        NodeProp["TOTAL_COST"] = "Total Cost";
        NodeProp["PLANS"] = "Plans";
        NodeProp["RELATION_NAME"] = "Relation Name";
        NodeProp["SCHEMA"] = "Schema";
        NodeProp["ALIAS"] = "Alias";
        NodeProp["GROUP_KEY"] = "Group Key";
        NodeProp["SORT_KEY"] = "Sort Key";
        NodeProp["SORT_METHOD"] = "Sort Method";
        NodeProp["SORT_SPACE_TYPE"] = "Sort Space Type";
        NodeProp["SORT_SPACE_USED"] = "Sort Space Used";
        NodeProp["JOIN_TYPE"] = "Join Type";
        NodeProp["INDEX_NAME"] = "Index Name";
        NodeProp["HASH_CONDITION"] = "Hash Cond";
        NodeProp["PARENT_RELATIONSHIP"] = "Parent Relationship";
        NodeProp["SUBPLAN_NAME"] = "Subplan Name";
        NodeProp["PARALLEL_AWARE"] = "Parallel Aware";
        NodeProp["WORKERS"] = "Workers";
        NodeProp["WORKERS_PLANNED"] = "Workers Planned";
        NodeProp["WORKERS_LAUNCHED"] = "Workers Launched";
        NodeProp["SHARED_HIT_BLOCKS"] = "Shared Hit Blocks";
        NodeProp["SHARED_READ_BLOCKS"] = "Shared Read Blocks";
        NodeProp["SHARED_DIRTIED_BLOCKS"] = "Shared Dirtied Blocks";
        NodeProp["SHARED_WRITTEN_BLOCKS"] = "Shared Written Blocks";
        NodeProp["TEMP_READ_BLOCKS"] = "Temp Read Blocks";
        NodeProp["TEMP_WRITTEN_BLOCKS"] = "Temp Written Blocks";
        NodeProp["LOCAL_HIT_BLOCKS"] = "Local Hit Blocks";
        NodeProp["LOCAL_READ_BLOCKS"] = "Local Read Blocks";
        NodeProp["LOCAL_DIRTIED_BLOCKS"] = "Local Dirtied Blocks";
        NodeProp["LOCAL_WRITTEN_BLOCKS"] = "Local Written Blocks";
        NodeProp["IO_READ_TIME"] = "I/O Read Time";
        NodeProp["IO_WRITE_TIME"] = "I/O Write Time";
        NodeProp["OUTPUT"] = "Output";
        NodeProp["HEAP_FETCHES"] = "Heap Fetches";
        NodeProp["WAL_RECORDS"] = "WAL Records";
        NodeProp["WAL_BYTES"] = "WAL Bytes";
        NodeProp["WAL_FPI"] = "WAL FPI";
        NodeProp["FULL_SORT_GROUPS"] = "Full-sort Groups";
        NodeProp["PRE_SORTED_GROUPS"] = "Pre-sorted Groups";
        NodeProp["PRESORTED_KEY"] = "Presorted Key"; // computed by pev

        NodeProp["NODE_ID"] = "nodeId";
        NodeProp["EXCLUSIVE_DURATION"] = "*Duration (exclusive)";
        NodeProp["EXCLUSIVE_COST"] = "*Cost (exclusive)";
        NodeProp["ACTUAL_ROWS_REVISED"] = "*Actual Rows Revised";
        NodeProp["PLAN_ROWS_REVISED"] = "*Plan Rows Revised";
        NodeProp["ROWS_REMOVED_BY_FILTER_REVISED"] = "*Rows Removed by Filter";
        NodeProp["ROWS_REMOVED_BY_JOIN_FILTER_REVISED"] =
          "*Rows Removed by Join Filter";
        NodeProp["PLANNER_ESTIMATE_FACTOR"] = "*Planner Row Estimate Factor";
        NodeProp["PLANNER_ESTIMATE_DIRECTION"] =
          "*Planner Row Estimate Direction";
        NodeProp["EXCLUSIVE_SHARED_HIT_BLOCKS"] =
          "*Shared Hit Blocks (exclusive)";
        NodeProp["EXCLUSIVE_SHARED_READ_BLOCKS"] =
          "*Shared Read Blocks (exclusive)";
        NodeProp["EXCLUSIVE_SHARED_DIRTIED_BLOCKS"] =
          "*Shared Dirtied Blocks (exclusive)";
        NodeProp["EXCLUSIVE_SHARED_WRITTEN_BLOCKS"] =
          "*Shared Written Blocks (exclusive)";
        NodeProp["EXCLUSIVE_TEMP_READ_BLOCKS"] =
          "*Temp Read Blocks (exclusive)";
        NodeProp["EXCLUSIVE_TEMP_WRITTEN_BLOCKS"] =
          "*Temp Written Blocks (exclusive)";
        NodeProp["EXCLUSIVE_LOCAL_HIT_BLOCKS"] =
          "*Local Hit Blocks (exclusive)";
        NodeProp["EXCLUSIVE_LOCAL_READ_BLOCKS"] =
          "*Local Read Blocks (exclusive)";
        NodeProp["EXCLUSIVE_LOCAL_DIRTIED_BLOCKS"] =
          "*Local Dirtied Blocks (exclusive)";
        NodeProp["EXCLUSIVE_LOCAL_WRITTEN_BLOCKS"] =
          "*Local Written Blocks (exclusive)";
        NodeProp["EXCLUSIVE_IO_READ_TIME"] = "*I/O Read Time (exclusive)";
        NodeProp["EXCLUSIVE_IO_WRITE_TIME"] = "*I/O Write Time (exclusive)";
        NodeProp["WORKERS_PLANNED_BY_GATHER"] = "*Workers Planned By Gather";
        NodeProp["CTE_SCAN"] = "CTE Scan";
        NodeProp["CTE_NAME"] = "CTE Name";
        NodeProp["FUNCTION_NAME"] = "Function Name";
        NodeProp["ARRAY_INDEX_KEY"] = "arrayIndex";
        NodeProp["PEV_PLAN_TAG"] = "plan_";
      })(NodeProp || (NodeProp = {}));

      var PropType;

      (function (PropType) {
        PropType[(PropType["blocks"] = 0)] = "blocks";
        PropType[(PropType["boolean"] = 1)] = "boolean";
        PropType[(PropType["bytes"] = 2)] = "bytes";
        PropType[(PropType["cost"] = 3)] = "cost";
        PropType[(PropType["duration"] = 4)] = "duration";
        PropType[(PropType["estimateDirection"] = 5)] = "estimateDirection";
        PropType[(PropType["factor"] = 6)] = "factor";
        PropType[(PropType["increment"] = 7)] = "increment";
        PropType[(PropType["json"] = 8)] = "json";
        PropType[(PropType["kilobytes"] = 9)] = "kilobytes";
        PropType[(PropType["list"] = 10)] = "list";
        PropType[(PropType["rows"] = 11)] = "rows";
        PropType[(PropType["sortGroups"] = 12)] = "sortGroups";
      })(PropType || (PropType = {}));

      var nodePropTypes = {};
      nodePropTypes[NodeProp.ACTUAL_ROWS] = PropType.rows;
      nodePropTypes[NodeProp.PLAN_ROWS] = PropType.rows;
      nodePropTypes[NodeProp.PLAN_WIDTH] = PropType.bytes;
      nodePropTypes[NodeProp.ACTUAL_ROWS_REVISED] = PropType.rows;
      nodePropTypes[NodeProp.PLAN_ROWS_REVISED] = PropType.rows;
      nodePropTypes[NodeProp.ACTUAL_TOTAL_TIME] = PropType.duration;
      nodePropTypes[NodeProp.ACTUAL_STARTUP_TIME] = PropType.duration;
      nodePropTypes[NodeProp.STARTUP_COST] = PropType.cost;
      nodePropTypes[NodeProp.TOTAL_COST] = PropType.cost;
      nodePropTypes[NodeProp.PARALLEL_AWARE] = PropType.boolean;
      nodePropTypes[NodeProp.WORKERS] = PropType.json;
      nodePropTypes[NodeProp.SORT_SPACE_USED] = PropType.kilobytes;
      nodePropTypes[NodeProp.ROWS_REMOVED_BY_FILTER] = PropType.rows;
      nodePropTypes[NodeProp.ROWS_REMOVED_BY_JOIN_FILTER] = PropType.rows;
      nodePropTypes[NodeProp.ROWS_REMOVED_BY_FILTER_REVISED] = PropType.rows;
      nodePropTypes[NodeProp.ROWS_REMOVED_BY_JOIN_FILTER_REVISED] =
        PropType.rows;
      nodePropTypes[NodeProp.HEAP_FETCHES] = PropType.rows;
      nodePropTypes[NodeProp.OUTPUT] = PropType.list;
      nodePropTypes[NodeProp.SORT_KEY] = PropType.list;
      nodePropTypes[NodeProp.PRESORTED_KEY] = PropType.list;
      nodePropTypes[NodeProp.WAL_RECORDS] = PropType.rows;
      nodePropTypes[NodeProp.WAL_BYTES] = PropType.bytes;
      nodePropTypes[NodeProp.WAL_FPI] = PropType.rows;
      nodePropTypes[NodeProp.EXCLUSIVE_DURATION] = PropType.duration;
      nodePropTypes[NodeProp.EXCLUSIVE_COST] = PropType.cost;
      nodePropTypes[NodeProp.PLANNER_ESTIMATE_FACTOR] = PropType.factor;
      nodePropTypes[NodeProp.PLANNER_ESTIMATE_DIRECTION] =
        PropType.estimateDirection;
      nodePropTypes[NodeProp.IO_READ_TIME] = PropType.duration;
      nodePropTypes[NodeProp.IO_WRITE_TIME] = PropType.duration;
      nodePropTypes[NodeProp.EXCLUSIVE_IO_READ_TIME] = PropType.duration;
      nodePropTypes[NodeProp.EXCLUSIVE_IO_WRITE_TIME] = PropType.duration;
      nodePropTypes[NodeProp.EXCLUSIVE_SHARED_HIT_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_SHARED_READ_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_SHARED_DIRTIED_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_SHARED_WRITTEN_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_TEMP_READ_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_TEMP_WRITTEN_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_LOCAL_HIT_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_LOCAL_READ_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_LOCAL_DIRTIED_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.EXCLUSIVE_LOCAL_WRITTEN_BLOCKS] = PropType.blocks;
      nodePropTypes[NodeProp.FULL_SORT_GROUPS] = PropType.sortGroups;
      nodePropTypes[NodeProp.PRE_SORTED_GROUPS] = PropType.sortGroups;
      var WorkerProp = /*#__PURE__*/ enums_createClass(function WorkerProp() {
        enums_classCallCheck(this, WorkerProp);
      }); // plan property keys

      WorkerProp.WORKER_NUMBER = "Worker Number";
      nodePropTypes[WorkerProp.WORKER_NUMBER] = PropType.increment;
      var SortGroupsProp;

      (function (SortGroupsProp) {
        SortGroupsProp["GROUP_COUNT"] = "Group Count";
        SortGroupsProp["SORT_METHODS_USED"] = "Sort Methods Used";
        SortGroupsProp["SORT_SPACE_MEMORY"] = "Sort Space Memory";
      })(SortGroupsProp || (SortGroupsProp = {}));

      var SortSpaceMemory;

      (function (SortSpaceMemory) {
        SortSpaceMemory["AVERAGE_SORT_SPACE_USED"] = "Average Sort Space Used";
        SortSpaceMemory["PEAK_SORT_SPACE_USED"] = "Peak Sort Space Used";
      })(SortSpaceMemory || (SortSpaceMemory = {}));
      // EXTERNAL MODULE: ./node_modules/highlight.js/lib/core.js
      var core = __webpack_require__("1020");
      var core_default = /*#__PURE__*/ __webpack_require__.n(core);

      // EXTERNAL MODULE: ./node_modules/highlight.js/lib/languages/pgsql.js
      var pgsql = __webpack_require__("f851");

      // EXTERNAL MODULE: ./node_modules/highlight.js/lib/languages/json.js
      var json = __webpack_require__("5ad2");

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortGroup.vue?vue&type=template&id=c9463620&
      var SortGroupvue_type_template_id_c9463620_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", [
          _vm._v("\n  Count: " + _vm._s(_vm.sortGroup["Group Count"]) + "\n  "),
          _c("br"),
          _vm._v(" "),
          _c("table", { staticClass: "table-borderless" }, [
            _c("tr", [
              _c(
                "td",
                { staticClass: "text-nowrap p-0" },
                [
                  _vm._v("\n        Sort Method"),
                  _vm.sortGroup["Sort Methods Used"].length > 1
                    ? [_vm._v("s")]
                    : _vm._e(),
                  _vm._v(":\n      "),
                ],
                2
              ),
              _vm._v(" "),
              _c("td", { staticClass: "p-0 pl-1" }, [
                _vm._v(
                  "\n        " +
                    _vm._s(
                      _vm._f("keysToString")(_vm.sortGroup["Sort Methods Used"])
                    ) +
                    "\n      "
                ),
              ]),
            ]),
          ]),
          _vm._v(" "),
          _c("table", { staticClass: "table-borderless" }, [
            _c("tr", [
              _c("td", { staticClass: "p-0" }, [
                _vm._v("\n        Memory:\n      "),
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "p-0 pl-1" }, [
                _vm._v(
                  "\n        Average: " +
                    _vm._s(
                      _vm._f("kilobytes")(
                        _vm.sortGroup["Sort Space Memory"][
                          "Average Sort Space Used"
                        ]
                      )
                    ) +
                    "\n        "
                ),
                _c("br"),
                _vm._v(
                  "\n        Peak: " +
                    _vm._s(
                      _vm._f("kilobytes")(
                        _vm.sortGroup["Sort Space Memory"][
                          "Peak Sort Space Used"
                        ]
                      )
                    ) +
                    "\n      "
                ),
              ]),
            ]),
          ]),
        ]);
      };
      var SortGroupvue_type_template_id_c9463620_staticRenderFns = [];

      // CONCATENATED MODULE: ./src/components/SortGroup.vue?vue&type=template&id=c9463620&

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SortGroup.vue?vue&type=script&lang=ts&
      // Can't use vue-component-decorator here for some reason
      // Got "Failed to mount component: template or render function not defined." errors

      /* harmony default export */ var SortGroupvue_type_script_lang_ts_ = {
        props: ["sortGroup"],
        filters: {
          keysToString: keysToString,
          kilobytes: kilobytes,
        },
      };
      // CONCATENATED MODULE: ./src/components/SortGroup.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_SortGroupvue_type_script_lang_ts_ = SortGroupvue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
      /* globals __VUE_SSR_CONTEXT__ */

      // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
      // This module is a runtime utility for cleaner component module output and will
      // be included in the final webpack user bundle.

      function normalizeComponent(
        scriptExports,
        render,
        staticRenderFns,
        functionalTemplate,
        injectStyles,
        scopeId,
        moduleIdentifier /* server only */,
        shadowMode /* vue-cli only */
      ) {
        // Vue.extend constructor export interop
        var options =
          typeof scriptExports === "function"
            ? scriptExports.options
            : scriptExports;

        // render functions
        if (render) {
          options.render = render;
          options.staticRenderFns = staticRenderFns;
          options._compiled = true;
        }

        // functional template
        if (functionalTemplate) {
          options.functional = true;
        }

        // scopedId
        if (scopeId) {
          options._scopeId = "data-v-" + scopeId;
        }

        var hook;
        if (moduleIdentifier) {
          // server build
          hook = function (context) {
            // 2.3 injection
            context =
              context || // cached call
              (this.$vnode && this.$vnode.ssrContext) || // stateful
              (this.parent &&
                this.parent.$vnode &&
                this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            // register component module identifier for async chunk inferrence
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode
            ? function () {
                injectStyles.call(
                  this,
                  (options.functional ? this.parent : this).$root.$options
                    .shadowRoot
                );
              }
            : injectStyles;
        }

        if (hook) {
          if (options.functional) {
            // for template-only hot-reload because in that case the render fn doesn't
            // go through the normalizer
            options._injectStyles = hook;
            // register for functional component in vue file
            var originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            // inject component registration as beforeCreate hook
            var existing = options.beforeCreate;
            options.beforeCreate = existing
              ? [].concat(existing, hook)
              : [hook];
          }
        }

        return {
          exports: scriptExports,
          options: options,
        };
      }

      // CONCATENATED MODULE: ./src/components/SortGroup.vue

      /* normalize component */

      var component = normalizeComponent(
        components_SortGroupvue_type_script_lang_ts_,
        SortGroupvue_type_template_id_c9463620_render,
        SortGroupvue_type_template_id_c9463620_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var SortGroup = component.exports;
      // CONCATENATED MODULE: ./src/filters.ts
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function (key) {
                filters_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(
                target,
                Object.getOwnPropertyDescriptors(source)
              )
            : ownKeys(Object(source)).forEach(function (key) {
                Object.defineProperty(
                  target,
                  key,
                  Object.getOwnPropertyDescriptor(source, key)
                );
              });
        }
        return target;
      }

      function filters_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      moment_duration_format_default()(moment);

      core_default.a.registerLanguage("pgsql", pgsql);

      core_default.a.registerLanguage("json", json);
      function filters_duration(value) {
        if (value === undefined) {
          return "N/A";
        }

        if (value < 1000) {
          return parseFloat(value.toPrecision(3)).toLocaleString() + "ms";
        }

        return moment["duration"](value).format(
          "w[w] d[d] h[h] m[m] s[s] SSS[ms]",
          {
            largest: 2,
          }
        );
      }
      function cost(value) {
        if (!value) {
          return "N/A";
        }

        value = parseFloat(value.toPrecision(3));
        return value.toLocaleString();
      }
      function rows(value) {
        if (value === undefined) {
          return "N/A";
        }

        return value.toLocaleString();
      }
      function factor(value) {
        var f = parseFloat(value.toPrecision(2)).toLocaleString();

        var compiled = lodash["template"](
          '${f}&nbsp;<span class="text-muted">&times;</span>'
        );

        return compiled({
          f: f,
        });
      }
      function keysToString(value) {
        if (!(value instanceof Array)) {
          value = [value];
        }

        value = lodash["map"](value, function (v) {
          return lodash["escape"](v.replace(/(^\(|\)$)/g, ""));
        });
        return value.join(", ");
      }
      function sortKeys(sort, presort) {
        return lodash["map"](sort, function (v) {
          var result = lodash["escape"](v);

          if (presort) {
            result +=
              presort.indexOf(v) !== -1
                ? '&nbsp;<span class="text-muted">(presort)</span>'
                : "";
          }

          return result;
        }).join(", ");
      }
      function truncate(text, length, clamp) {
        clamp = clamp || "...";
        return text.length > length ? text.slice(0, length) + clamp : text;
      }
      function kilobytes(value) {
        return formatBytes(value * 1024);
      }
      function bytes(value) {
        return formatBytes(value);
      }
      function formatBytes(value) {
        var decimals =
          arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
        var k = 1024;
        var dm = decimals < 0 ? 0 : decimals;
        var units = ["Bytes", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
        var i = Math.floor(Math.log(value) / Math.log(k));

        var compiled = lodash["template"]("${value} ${unit}");

        var valueString = parseFloat(
          (value / Math.pow(k, i)).toFixed(dm)
        ).toLocaleString();
        return compiled({
          value: valueString,
          unit: units[i],
        });
      }
      function blocks(value) {
        if (!value) {
          return "";
        }

        return (
          value.toLocaleString() +
          "<br><small>" +
          formatBytes(value * 8 * 1024) +
          "</small>"
        );
      }
      function percent(value) {
        if (isNaN(value)) {
          return "-";
        }

        return lodash["round"](value * 100) + "%";
      }
      function filters_list(value) {
        if (typeof value === "string") {
          value = lodash["escape"](value).split(/\s*,\s*/);
        }

        var compiled = lodash["template"](
          "<% _.forEach(lines, function(line) { %><li><%- line %></li><% }); %>"
        );

        return (
          '<ul class="list-unstyled">' +
          compiled({
            lines: value,
          }) +
          "</ul>"
        );
      }

      function sortGroups(value) {
        var v = new external_commonjs_vue_commonjs2_vue_root_Vue_default.a(
          _objectSpread(
            _objectSpread({}, SortGroup),
            {},
            {
              propsData: {
                sortGroup: value,
              },
            }
          )
        );
        return v.$mount().$el.outerHTML;
      }
      function formatNodeProp(key, value) {
        if (lodash["has"](nodePropTypes, key)) {
          if (nodePropTypes[key] === PropType.duration) {
            return filters_duration(value);
          } else if (nodePropTypes[key] === PropType.boolean) {
            return value ? "yes" : "no";
          } else if (nodePropTypes[key] === PropType.cost) {
            return cost(value);
          } else if (nodePropTypes[key] === PropType.rows) {
            return rows(value);
          } else if (nodePropTypes[key] === PropType.factor) {
            return factor(value);
          } else if (nodePropTypes[key] === PropType.estimateDirection) {
            switch (value) {
              case EstimateDirection.over:
                return '<i class="fa fa-arrow-up"></i> over';

              case EstimateDirection.under:
                return '<i class="fa fa-arrow-down"></i> under';

              default:
                return "-";
            }
          } else if (nodePropTypes[key] === PropType.json) {
            return JSON.stringify(value, null, 2);
          } else if (nodePropTypes[key] === PropType.bytes) {
            return bytes(value);
          } else if (nodePropTypes[key] === PropType.kilobytes) {
            return kilobytes(value);
          } else if (nodePropTypes[key] === PropType.blocks) {
            return blocks(value);
          } else if (nodePropTypes[key] === PropType.list) {
            return filters_list(value);
          } else if (nodePropTypes[key] === PropType.sortGroups) {
            return sortGroups(value);
          }
        }

        return lodash["escape"](value);
      }
      function durationClass(i) {
        var c;

        if (i > 90) {
          c = 4;
        } else if (i > 40) {
          c = 3;
        } else if (i > 10) {
          c = 2;
        }

        if (c) {
          return "c-" + c;
        }

        return "";
      }
      function filters_pgsql(text) {
        return core_default.a.highlight(text, {
          language: "pgsql",
        }).value;
      }
      function filters_json(text) {
        return core_default.a.highlight(text, {
          language: "json",
        }).value;
      }
      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/PlanNode.vue?vue&type=script&lang=ts&
      function PlanNodevue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (PlanNodevue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          PlanNodevue_type_script_lang_ts_typeof(obj)
        );
      }

      function PlanNodevue_type_script_lang_ts_toConsumableArray(arr) {
        return (
          PlanNodevue_type_script_lang_ts_arrayWithoutHoles(arr) ||
          PlanNodevue_type_script_lang_ts_iterableToArray(arr) ||
          _unsupportedIterableToArray(arr) ||
          PlanNodevue_type_script_lang_ts_nonIterableSpread()
        );
      }

      function PlanNodevue_type_script_lang_ts_nonIterableSpread() {
        throw new TypeError(
          "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return _arrayLikeToArray(o, minLen);
      }

      function PlanNodevue_type_script_lang_ts_iterableToArray(iter) {
        if (
          (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null) ||
          iter["@@iterator"] != null
        )
          return Array.from(iter);
      }

      function PlanNodevue_type_script_lang_ts_arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }

      function PlanNodevue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function PlanNodevue_type_script_lang_ts_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function PlanNodevue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          PlanNodevue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          PlanNodevue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (
          call &&
          (PlanNodevue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return _getPrototypeOf(o);
      }

      var PlanNodevue_type_script_lang_ts_PlanNode = /*#__PURE__*/ (function (
        _Vue
      ) {
        _inherits(PlanNode, _Vue);

        var _super = _createSuper(PlanNode);

        function PlanNode() {
          var _this;

          PlanNodevue_type_script_lang_ts_classCallCheck(this, PlanNode);

          _this = _super.apply(this, arguments);
          _this.executionTimePercent = NaN;
          _this.selected = false; // UI flags

          _this.showDetails = false;
          _this.collapsed = false;
          _this.activeTab = "general"; // calculated properties

          _this.costPercent = NaN;
          _this.barWidth = 0;
          _this.props = [];
          _this.plans = [];
          _this.rowsRemoved = NaN;
          _this.rowsRemovedPercent = NaN; // expose enum to view

          _this.estimateDirections = EstimateDirection;
          _this.highlightTypes = HighlightType;
          _this.viewModes = ViewMode;
          _this.orientations = Orientation;
          _this.nodeProps = NodeProp;
          _this.workerProps = WorkerProp;
          _this.helpService = new HelpService();
          _this.colorService = new ColorService();
          _this.lodash = lodash; // Returns the list of properties that have already been displayed either in
          // the main panel or in other detailed tabs.

          _this.notMiscProperties = [
            NodeProp.NODE_TYPE,
            NodeProp.CTE_NAME,
            NodeProp.EXCLUSIVE_DURATION,
            NodeProp.EXCLUSIVE_COST,
            NodeProp.TOTAL_COST,
            NodeProp.PLAN_ROWS,
            NodeProp.ACTUAL_ROWS,
            NodeProp.ACTUAL_LOOPS,
            NodeProp.OUTPUT,
            NodeProp.WORKERS,
            NodeProp.WORKERS_PLANNED,
            NodeProp.WORKERS_LAUNCHED,
            NodeProp.EXCLUSIVE_SHARED_HIT_BLOCKS,
            NodeProp.EXCLUSIVE_SHARED_READ_BLOCKS,
            NodeProp.EXCLUSIVE_SHARED_DIRTIED_BLOCKS,
            NodeProp.EXCLUSIVE_SHARED_WRITTEN_BLOCKS,
            NodeProp.EXCLUSIVE_TEMP_READ_BLOCKS,
            NodeProp.EXCLUSIVE_TEMP_WRITTEN_BLOCKS,
            NodeProp.EXCLUSIVE_LOCAL_HIT_BLOCKS,
            NodeProp.EXCLUSIVE_LOCAL_READ_BLOCKS,
            NodeProp.EXCLUSIVE_LOCAL_DIRTIED_BLOCKS,
            NodeProp.EXCLUSIVE_LOCAL_WRITTEN_BLOCKS,
            NodeProp.SHARED_HIT_BLOCKS,
            NodeProp.SHARED_READ_BLOCKS,
            NodeProp.SHARED_DIRTIED_BLOCKS,
            NodeProp.SHARED_WRITTEN_BLOCKS,
            NodeProp.TEMP_READ_BLOCKS,
            NodeProp.TEMP_WRITTEN_BLOCKS,
            NodeProp.LOCAL_HIT_BLOCKS,
            NodeProp.LOCAL_READ_BLOCKS,
            NodeProp.LOCAL_DIRTIED_BLOCKS,
            NodeProp.LOCAL_WRITTEN_BLOCKS,
            NodeProp.PLANNER_ESTIMATE_FACTOR,
            NodeProp.PLANNER_ESTIMATE_DIRECTION,
            NodeProp.SUBPLAN_NAME,
            NodeProp.GROUP_KEY,
            NodeProp.HASH_CONDITION,
            NodeProp.JOIN_TYPE,
            NodeProp.INDEX_NAME,
            NodeProp.HASH_CONDITION,
            NodeProp.EXCLUSIVE_IO_READ_TIME,
            NodeProp.EXCLUSIVE_IO_WRITE_TIME,
            NodeProp.IO_READ_TIME,
            NodeProp.IO_WRITE_TIME,
            NodeProp.HEAP_FETCHES,
            NodeProp.WAL_RECORDS,
            NodeProp.WAL_BYTES,
            NodeProp.WAL_FPI,
            NodeProp.NODE_ID,
            NodeProp.ROWS_REMOVED_BY_FILTER,
            NodeProp.ROWS_REMOVED_BY_JOIN_FILTER,
            NodeProp.ACTUAL_ROWS_REVISED,
            NodeProp.PLAN_ROWS_REVISED,
            NodeProp.ROWS_REMOVED_BY_FILTER_REVISED,
            NodeProp.ROWS_REMOVED_BY_JOIN_FILTER_REVISED,
          ];
          return _this;
        }

        PlanNodevue_type_script_lang_ts_createClass(PlanNode, [
          {
            key: "setShowDetails",
            value: function setShowDetails(showDetails) {
              this.showDetails = showDetails;
            },
          },
          {
            key: "created",
            value: function created() {
              this.calculateProps();
              this.calculateBar();
              this.calculateDuration();
              this.calculateCost();
              this.calculateRowsRemoved();
              this.plans = this.node[NodeProp.PLANS];
              this.plannerRowEstimateDirection = this.node[
                NodeProp.PLANNER_ESTIMATE_DIRECTION
              ];
              this.plannerRowEstimateValue = this.node[
                NodeProp.PLANNER_ESTIMATE_FACTOR
              ];
            },
          },
          {
            key: "calculateDuration",
            value: function calculateDuration() {
              // use the first node total time if plan execution time is not available
              var executionTime =
                this.plan.planStats.executionTime ||
                this.plan.content.Plan[NodeProp.ACTUAL_TOTAL_TIME];
              this.executionTimePercent = lodash["round"](
                (this.node[NodeProp.EXCLUSIVE_DURATION] / executionTime) * 100
              );
            },
          },
          {
            key: "calculateCost",
            value: function calculateCost() {
              var maxTotalCost = this.plan.content.maxTotalCost;
              this.costPercent = lodash["round"](
                (this.node[NodeProp.EXCLUSIVE_COST] / maxTotalCost) * 100
              );
            },
          },
          {
            key: "rowsRemovedProp",
            get: function get() {
              var nodeKey = Object.keys(this.node).find(function (key) {
                return (
                  key === NodeProp.ROWS_REMOVED_BY_FILTER_REVISED ||
                  key === NodeProp.ROWS_REMOVED_BY_JOIN_FILTER_REVISED
                );
              });
              return Object.keys(NodeProp).find(function (prop) {
                return NodeProp[prop] === nodeKey;
              });
            },
          },
          {
            key: "calculateRowsRemoved",
            value: function calculateRowsRemoved() {
              var rowsRemovedProp = this.rowsRemovedProp;

              if (rowsRemovedProp) {
                var removed = this.node[NodeProp[rowsRemovedProp]];
                this.rowsRemoved = removed;
                var actual = this.node[NodeProp.ACTUAL_ROWS];
                this.rowsRemovedPercent = lodash["floor"](
                  (removed / (removed + actual)) * 100
                );

                if (this.rowsRemovedPercent === 100) {
                  this.rowsRemovedPercentString = ">99";
                } else if (this.rowsRemovedPercent === 0) {
                  this.rowsRemovedPercentString = "<1";
                } else {
                  this.rowsRemovedPercentString = this.rowsRemovedPercent.toString();
                }
              }
            }, // create an array of node propeties so that they can be displayed in the view
          },
          {
            key: "calculateProps",
            value: function calculateProps() {
              this.props = lodash["chain"](this.node)
                .omit(NodeProp.PLANS)
                .omit(NodeProp.WORKERS)
                .map(function (value, key) {
                  return {
                    key: key,
                    value: value,
                  };
                })
                .value();
            },
          },
          {
            key: "getNodeTypeDescription",
            value: function getNodeTypeDescription() {
              return this.helpService.getNodeTypeDescription(
                this.node[NodeProp.NODE_TYPE]
              );
            },
          },
          {
            key: "getNodeName",
            value: function getNodeName() {
              var nodeName = this.isParallelAware ? "Parallel " : "";
              nodeName += this.node[NodeProp.NODE_TYPE];

              if (
                this.viewOptions.viewMode === ViewMode.DOT &&
                !this.showDetails
              ) {
                return nodeName.replace(/[^A-Z]/g, "");
              }

              return nodeName;
            },
          },
          {
            key: "shouldShowPlannerEstimate",
            get: function get() {
              if (
                (this.collapsed && !this.showDetails) ||
                this.viewOptions.viewMode === ViewMode.DOT
              ) {
                return false;
              }

              return (
                (this.estimationClass || this.showDetails) &&
                this.plannerRowEstimateDirection !== EstimateDirection.none &&
                this.plannerRowEstimateValue
              );
            },
          },
          {
            key: "shouldShowCost",
            get: function get() {
              if (
                (this.collapsed && !this.showDetails) ||
                this.viewOptions.viewMode === ViewMode.DOT
              ) {
                return false;
              }

              return (
                this.node[NodeProp.EXCLUSIVE_COST] &&
                (this.costClass || this.showDetails)
              );
            },
          },
          {
            key: "shouldShowNodeBarLabel",
            value: function shouldShowNodeBarLabel() {
              if (this.showDetails) {
                return true;
              }

              if (
                this.collapsed ||
                this.viewOptions.viewMode === ViewMode.DOT
              ) {
                return false;
              }

              return true;
            },
          },
          {
            key: "shouldShowRowsRemoved",
            get: function get() {
              return (
                !!this.rowsRemovedClass &&
                this.viewOptions.viewMode === ViewMode.FULL &&
                !this.collapsed
              );
            },
          },
          {
            key: "calculateBar",
            value: function calculateBar() {
              var value;

              if (!this.$options || !this.$options.filters) {
                return;
              }

              switch (this.viewOptions.highlightType) {
                case HighlightType.DURATION:
                  value = this.node[NodeProp.EXCLUSIVE_DURATION];

                  if (value === undefined) {
                    this.highlightValue = null;
                    break;
                  }

                  this.barWidth = Math.round(
                    (value / this.plan.planStats.maxDuration) * 100
                  );
                  this.highlightValue = this.$options.filters.duration(value);
                  break;

                case HighlightType.ROWS:
                  value = this.node[NodeProp.ACTUAL_ROWS];

                  if (value === undefined) {
                    this.highlightValue = null;
                    break;
                  }

                  this.barWidth =
                    Math.round((value / this.plan.planStats.maxRows) * 100) ||
                    0;
                  this.highlightValue = this.$options.filters.rows(value);
                  break;

                case HighlightType.COST:
                  value = this.node[NodeProp.EXCLUSIVE_COST];

                  if (value === undefined) {
                    this.highlightValue = null;
                    break;
                  }

                  this.barWidth = Math.round(
                    (value / this.plan.planStats.maxCost) * 100
                  );
                  this.highlightValue = this.$options.filters.cost(value);
                  break;
              }
            },
          },
          {
            key: "getBarColor",
            value: function getBarColor(percent) {
              return this.colorService.numberToColorHsl(percent);
            },
          },
          {
            key: "durationClass",
            get: function get() {
              var c;
              var i = this.executionTimePercent;

              if (i > 90) {
                c = 4;
              } else if (i > 40) {
                c = 3;
              } else if (i > 10) {
                c = 2;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "estimationClass",
            get: function get() {
              var c;
              var i = this.node[NodeProp.PLANNER_ESTIMATE_FACTOR];

              if (i > 1000) {
                c = 4;
              } else if (i > 100) {
                c = 3;
              } else if (i > 10) {
                c = 2;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "costClass",
            get: function get() {
              var c;
              var i = this.costPercent;

              if (i > 90) {
                c = 4;
              } else if (i > 40) {
                c = 3;
              } else if (i > 10) {
                c = 2;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "rowsRemovedClass",
            get: function get() {
              var c; // high percent of rows removed is relevant only when duration is high
              // as well

              var i = this.rowsRemovedPercent * this.executionTimePercent;

              if (i > 2000) {
                c = 4;
              } else if (i > 500) {
                c = 3;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "heapFetchesClass",
            get: function get() {
              var c;
              var i =
                (this.node[NodeProp.HEAP_FETCHES] /
                  (this.node[NodeProp.ACTUAL_ROWS] +
                    (this.node[NodeProp.ROWS_REMOVED_BY_FILTER] || 0) +
                    (this.node[NodeProp.ROWS_REMOVED_BY_JOIN_FILTER] || 0))) *
                100;

              if (i > 90) {
                c = 4;
              } else if (i > 40) {
                c = 3;
              } else if (i > 10) {
                c = 2;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "toggleCollapsed",
            value: function toggleCollapsed() {
              this.collapsed = !this.collapsed;
            },
          },
          {
            key: "hasChildren",
            get: function get() {
              return !!this.plans;
            },
          },
          {
            key: "filterTooltip",
            get: function get() {
              return (
                this.rowsRemovedPercentString + "% of rows removed by filter"
              );
            },
          },
          {
            key: "workersLaunchedCount",
            get: function get() {
              if (lodash["isArray"](this.node[NodeProp.WORKERS])) {
                return this.node[NodeProp.WORKERS].length;
              }

              return parseInt(this.node[NodeProp.WORKERS], 0);
            },
          },
          {
            key: "workersPlannedCount",
            get: function get() {
              return this.node[NodeProp.WORKERS_PLANNED_BY_GATHER];
            },
          },
          {
            key: "workersPlannedCountReversed",
            get: function get() {
              var workersPlanned = this.node[
                NodeProp.WORKERS_PLANNED_BY_GATHER
              ];
              return PlanNodevue_type_script_lang_ts_toConsumableArray(
                Array(workersPlanned).keys()
              )
                .slice()
                .reverse();
            },
          },
          {
            key: "isParallelAware",
            get: function get() {
              return this.node[NodeProp.PARALLEL_AWARE];
            },
          },
          {
            key: "allWorkersLaunched",
            get: function get() {
              return (
                !this.node[NodeProp.WORKERS_LAUNCHED] ||
                this.node[NodeProp.WORKERS_PLANNED] ===
                  this.node[NodeProp.WORKERS_LAUNCHED]
              );
            },
          },
          {
            key: "getHelpMessage",
            value: function getHelpMessage(message) {
              return this.helpService.getHelpMessage(message);
            },
          },
          {
            key: "shouldShowProp",
            value: function shouldShowProp(key, value) {
              return (
                (value ||
                  nodePropTypes[key] === PropType.increment ||
                  key === NodeProp.ACTUAL_ROWS) &&
                this.notMiscProperties.indexOf(key) === -1
              );
            },
          },
          {
            key: "shouldShowIoBuffers",
            get: function get() {
              var _this2 = this;

              var properties = [
                "EXCLUSIVE_SHARED_HIT_BLOCKS",
                "EXCLUSIVE_SHARED_READ_BLOCKS",
                "EXCLUSIVE_SHARED_DIRTIED_BLOCKS",
                "EXCLUSIVE_SHARED_WRITTEN_BLOCKS",
                "EXCLUSIVE_TEMP_READ_BLOCKS",
                "EXCLUSIVE_TEMP_WRITTEN_BLOCKS",
                "EXCLUSIVE_LOCAL_HIT_BLOCKS",
                "EXCLUSIVE_LOCAL_READ_BLOCKS",
                "EXCLUSIVE_LOCAL_DIRTIED_BLOCKS",
                "EXCLUSIVE_LOCAL_WRITTEN_BLOCKS",
                "EXCLUSIVE_IO_READ_TIME",
                "EXCLUSIVE_IO_WRITE_TIME",
              ];

              var values = lodash["map"](properties, function (property) {
                var value = _this2.node[NodeProp[property]];
                return lodash["isNaN"](value) ? 0 : value;
              });

              var sum = lodash["sum"](values);

              return sum > 0;
            },
          },
          {
            key: "isNeverExecuted",
            get: function get() {
              return (
                this.plan.planStats.executionTime &&
                !this.node[NodeProp.ACTUAL_LOOPS]
              );
            },
          },
          {
            key: "hasSeveralLoops",
            get: function get() {
              return this.node[NodeProp.ACTUAL_LOOPS] > 1;
            },
          },
          {
            key: "tilde",
            get: function get() {
              return this.hasSeveralLoops ? "~" : "";
            },
          },
          {
            key: "setActiveTab",
            value: function setActiveTab(tab) {
              this.activeTab = tab;
            }, // returns the formatted prop
          },
          {
            key: "formattedProp",
            value: function formattedProp(propName) {
              var property = NodeProp[propName];
              var value = this.node[property];
              return this.$options.filters.formatNodeProp(property, value);
            },
          },
        ]);

        return PlanNode;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop(Object)],
        PlanNodevue_type_script_lang_ts_PlanNode.prototype,
        "node",
        void 0
      );

      __decorate(
        [Prop(Object)],
        PlanNodevue_type_script_lang_ts_PlanNode.prototype,
        "plan",
        void 0
      );

      __decorate(
        [Prop(Object)],
        PlanNodevue_type_script_lang_ts_PlanNode.prototype,
        "viewOptions",
        void 0
      );

      __decorate(
        [Prop()],
        PlanNodevue_type_script_lang_ts_PlanNode.prototype,
        "eventBus",
        void 0
      );

      __decorate(
        [Watch("viewOptions.highlightType")],
        PlanNodevue_type_script_lang_ts_PlanNode.prototype,
        "calculateBar",
        null
      );

      PlanNodevue_type_script_lang_ts_PlanNode = __decorate(
        [
          vue_class_component_esm({
            name: "plan-node",
            filters: {
              cost: cost,
              duration: filters_duration,
              factor: factor,
              formatNodeProp: formatNodeProp,
              keysToString: keysToString,
              sortKeys: sortKeys,
              truncate: truncate,
              rows: rows,
            },
          }),
        ],
        PlanNodevue_type_script_lang_ts_PlanNode
      );
      /* harmony default export */ var PlanNodevue_type_script_lang_ts_ = PlanNodevue_type_script_lang_ts_PlanNode;
      // CONCATENATED MODULE: ./src/components/PlanNode.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_PlanNodevue_type_script_lang_ts_ = PlanNodevue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./src/components/PlanNode.vue

      /* normalize component */

      var PlanNode_component = normalizeComponent(
        components_PlanNodevue_type_script_lang_ts_,
        PlanNodevue_type_template_id_895b845c_render,
        PlanNodevue_type_template_id_895b845c_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_PlanNode =
        PlanNode_component.exports;
      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Copy.vue?vue&type=template&id=7367bdf0&
      var Copyvue_type_template_id_7367bdf0_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "copy position-absolute",
            staticStyle: { top: "0", right: "0" },
          },
          [
            _c(
              "button",
              {
                staticClass: "btn btn-outline-secondary bg-light btn-sm m-2",
                class: _vm.copied ? "d-none" : "d-block",
                attrs: { name: "copyRawButton" },
                on: { click: _vm.copyRaw },
              },
              [_c("i", { staticClass: "far fa-clipboard fa-fw" })]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                directives: [
                  {
                    name: "tippy",
                    rawName: "v-tippy",
                    value: { placement: "left", arrow: true },
                    expression: "{ placement: 'left', arrow: true }",
                  },
                ],
                staticClass: "btn btn-outline-secondary bg-light btn-sm m-2",
                class: _vm.copied ? "d-block" : "d-none",
                attrs: { content: "copied" },
                on: { click: _vm.copyRaw },
              },
              [_c("i", { staticClass: "fa fa-check fa-fw text-success" })]
            ),
          ]
        );
      };
      var Copyvue_type_template_id_7367bdf0_staticRenderFns = [];

      // CONCATENATED MODULE: ./src/components/Copy.vue?vue&type=template&id=7367bdf0&

      // EXTERNAL MODULE: ./node_modules/vue-clipboard3/dist/index.js
      var dist = __webpack_require__("e6a9");
      var dist_default = /*#__PURE__*/ __webpack_require__.n(dist);

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Copy.vue?vue&type=script&lang=ts&
      function Copyvue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (Copyvue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          Copyvue_type_script_lang_ts_typeof(obj)
        );
      }

      function Copyvue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Copyvue_type_script_lang_ts_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Copyvue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          Copyvue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          Copyvue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function Copyvue_type_script_lang_ts_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass)
          Copyvue_type_script_lang_ts_setPrototypeOf(subClass, superClass);
      }

      function Copyvue_type_script_lang_ts_setPrototypeOf(o, p) {
        Copyvue_type_script_lang_ts_setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return Copyvue_type_script_lang_ts_setPrototypeOf(o, p);
      }

      function Copyvue_type_script_lang_ts_createSuper(Derived) {
        var hasNativeReflectConstruct = Copyvue_type_script_lang_ts_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = Copyvue_type_script_lang_ts_getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = Copyvue_type_script_lang_ts_getPrototypeOf(this)
              .constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return Copyvue_type_script_lang_ts_possibleConstructorReturn(
            this,
            result
          );
        };
      }

      function Copyvue_type_script_lang_ts_possibleConstructorReturn(
        self,
        call
      ) {
        if (
          call &&
          (Copyvue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return Copyvue_type_script_lang_ts_assertThisInitialized(self);
      }

      function Copyvue_type_script_lang_ts_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function Copyvue_type_script_lang_ts_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function Copyvue_type_script_lang_ts_getPrototypeOf(o) {
        Copyvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return Copyvue_type_script_lang_ts_getPrototypeOf(o);
      }

      var Copyvue_type_script_lang_ts_Copy = /*#__PURE__*/ (function (_Vue) {
        Copyvue_type_script_lang_ts_inherits(Copy, _Vue);

        var _super = Copyvue_type_script_lang_ts_createSuper(Copy);

        function Copy() {
          var _this;

          Copyvue_type_script_lang_ts_classCallCheck(this, Copy);

          _this = _super.apply(this, arguments);
          _this.copied = false;
          return _this;
        }

        Copyvue_type_script_lang_ts_createClass(Copy, [
          {
            key: "copyRaw",
            value: function copyRaw() {
              var _this2 = this;

              var _useClipboard = dist_default()(),
                toClipboard = _useClipboard.toClipboard;

              toClipboard(this.content);
              this.copied = true;
              window.setTimeout(function () {
                _this2.copied = false;
              }, 2000);
            },
          },
        ]);

        return Copy;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop(String)],
        Copyvue_type_script_lang_ts_Copy.prototype,
        "content",
        void 0
      );

      Copyvue_type_script_lang_ts_Copy = __decorate(
        [vue_class_component_esm({})],
        Copyvue_type_script_lang_ts_Copy
      );
      /* harmony default export */ var Copyvue_type_script_lang_ts_ = Copyvue_type_script_lang_ts_Copy;
      // CONCATENATED MODULE: ./src/components/Copy.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_Copyvue_type_script_lang_ts_ = Copyvue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./src/components/Copy.vue

      /* normalize component */

      var Copy_component = normalizeComponent(
        components_Copyvue_type_script_lang_ts_,
        Copyvue_type_template_id_7367bdf0_render,
        Copyvue_type_template_id_7367bdf0_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_Copy = Copy_component.exports;
      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Diagram.vue?vue&type=template&id=17c767c6&
      var Diagramvue_type_template_id_17c767c6_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "diagram" }, [
          _c("div", { staticClass: "flex-shrink-0" }, [
            _c("div", { staticClass: "form-group text-center my-1" }, [
              _c("div", { staticClass: "btn-group btn-group-xs" }, [
                _c(
                  "button",
                  {
                    staticClass: "btn btn-outline-secondary",
                    class: {
                      active: _vm.viewOptions.metric === _vm.metrics.time,
                    },
                    on: {
                      click: function ($event) {
                        _vm.viewOptions.metric = _vm.metrics.time;
                      },
                    },
                  },
                  [_vm._v("time")]
                ),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-outline-secondary",
                    class: {
                      active: _vm.viewOptions.metric === _vm.metrics.rows,
                    },
                    on: {
                      click: function ($event) {
                        _vm.viewOptions.metric = _vm.metrics.rows;
                      },
                    },
                  },
                  [_vm._v("rows")]
                ),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-outline-secondary",
                    class: {
                      active:
                        _vm.viewOptions.metric === _vm.metrics.estimate_factor,
                    },
                    on: {
                      click: function ($event) {
                        _vm.viewOptions.metric = _vm.metrics.estimate_factor;
                      },
                    },
                  },
                  [_vm._v("estimation")]
                ),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-outline-secondary",
                    class: {
                      active: _vm.viewOptions.metric === _vm.metrics.cost,
                    },
                    on: {
                      click: function ($event) {
                        _vm.viewOptions.metric = _vm.metrics.cost;
                      },
                    },
                  },
                  [_vm._v("cost")]
                ),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-outline-secondary",
                    class: {
                      active: _vm.viewOptions.metric === _vm.metrics.buffers,
                    },
                    on: {
                      click: function ($event) {
                        _vm.viewOptions.metric = _vm.metrics.buffers;
                      },
                    },
                  },
                  [_vm._v("buffers")]
                ),
              ]),
            ]),
            _vm._v(" "),
            _vm.viewOptions.metric == _vm.metrics.buffers
              ? _c("div", { staticClass: "form-group text-center my-1" }, [
                  _c("div", { staticClass: "btn-group btn-group-xs" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-outline-secondary",
                        class: {
                          active:
                            _vm.viewOptions.buffersMetric ===
                            _vm.bufferLocations.shared,
                        },
                        attrs: {
                          disabled: !_vm.plan.planStats.maxBlocks[
                            _vm.bufferLocations.shared
                          ],
                        },
                        on: {
                          click: function ($event) {
                            _vm.viewOptions.buffersMetric =
                              _vm.bufferLocations.shared;
                          },
                        },
                      },
                      [_vm._v("\n          shared")]
                    ),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-outline-secondary",
                        class: {
                          active:
                            _vm.viewOptions.buffersMetric ===
                            _vm.bufferLocations.temp,
                        },
                        attrs: {
                          disabled: !_vm.plan.planStats.maxBlocks[
                            _vm.bufferLocations.temp
                          ],
                        },
                        on: {
                          click: function ($event) {
                            _vm.viewOptions.buffersMetric =
                              _vm.bufferLocations.temp;
                          },
                        },
                      },
                      [_vm._v("\n          temp\n        ")]
                    ),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-outline-secondary",
                        class: {
                          active:
                            _vm.viewOptions.buffersMetric ===
                            _vm.bufferLocations.local,
                        },
                        attrs: {
                          disabled: !_vm.plan.planStats.maxBlocks[
                            _vm.bufferLocations.local
                          ],
                        },
                        on: {
                          click: function ($event) {
                            _vm.viewOptions.buffersMetric =
                              _vm.bufferLocations.local;
                          },
                        },
                      },
                      [_vm._v("\n          local\n        ")]
                    ),
                  ]),
                ])
              : _vm._e(),
            _vm._v(" "),
            _c("div", { staticClass: "legend text-center" }, [
              _vm.viewOptions.metric == _vm.metrics.buffers
                ? _c("ul", { staticClass: "list-unstyled list-inline mb-0" }, [
                    _vm.viewOptions.buffersMetric != _vm.bufferLocations.temp
                      ? _c("li", { staticClass: "list-inline-item" }, [
                          _c("span", { staticClass: "bg-hit rounded" }),
                          _vm._v("\n          Hit\n        "),
                        ])
                      : _vm._e(),
                    _vm._v(" "),
                    _vm._m(0),
                    _vm._v(" "),
                    _vm.viewOptions.buffersMetric != _vm.bufferLocations.temp
                      ? _c("li", { staticClass: "list-inline-item" }, [
                          _c("span", { staticClass: "bg-dirtied" }),
                          _vm._v("\n          Dirtied\n        "),
                        ])
                      : _vm._e(),
                    _vm._v(" "),
                    _vm._m(1),
                  ])
                : _vm._e(),
            ]),
          ]),
          _vm._v(" "),
          _c(
            "div",
            { ref: "container", staticClass: "overflow-auto flex-grow-1" },
            [
              _vm.dataAvailable
                ? _c(
                    "table",
                    { staticClass: "m-1" },
                    _vm._l(_vm.plans, function (flat, index) {
                      return _c(
                        "tbody",
                        [
                          index === 0 && _vm.plans.length > 1
                            ? _c("tr", [
                                _c(
                                  "th",
                                  {
                                    staticClass: "subplan",
                                    attrs: { colspan: "3" },
                                  },
                                  [
                                    _vm._v(
                                      "\n            Main Query Plan\n          "
                                    ),
                                  ]
                                ),
                              ])
                            : _vm._e(),
                          _vm._v(" "),
                          _vm._l(flat, function (row, index) {
                            return [
                              row[1][_vm.nodeProps.SUBPLAN_NAME]
                                ? _c("tr", [
                                    !_vm.isCTE(row[1]) ? _c("td") : _vm._e(),
                                    _vm._v(" "),
                                    _c(
                                      "td",
                                      {
                                        staticClass: "subplan pr-2",
                                        class: {
                                          "font-weight-bold": _vm.isCTE(row[1]),
                                        },
                                        attrs: {
                                          colspan: _vm.isCTE(row[1]) ? 3 : 2,
                                        },
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "tree-lines" },
                                          [
                                            _vm._l(
                                              _vm.lodash.range(row[0]),
                                              function (i) {
                                                return [
                                                  _vm.lodash.indexOf(
                                                    row[3],
                                                    i
                                                  ) != -1
                                                    ? [_vm._v("│")]
                                                    : i !== 0
                                                    ? [_vm._v(" ")]
                                                    : _vm._e(),
                                                ];
                                              }
                                            ),
                                            index !== 0
                                              ? [
                                                  _vm._v(
                                                    _vm._s(row[2] ? "└" : "├")
                                                  ),
                                                ]
                                              : _vm._e(),
                                          ],
                                          2
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "font-italic text-reset",
                                            attrs: { href: "" },
                                            on: {
                                              click: function ($event) {
                                                $event.preventDefault();
                                                return _vm.eventBus.$emit(
                                                  "clickcte",
                                                  row[1][
                                                    _vm.nodeProps.SUBPLAN_NAME
                                                  ]
                                                );
                                              },
                                            },
                                          },
                                          [
                                            _vm._v(
                                              "\n                " +
                                                _vm._s(
                                                  row[1][
                                                    _vm.nodeProps.SUBPLAN_NAME
                                                  ]
                                                ) +
                                                "\n              "
                                            ),
                                          ]
                                        ),
                                      ]
                                    ),
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _c(
                                "tr",
                                {
                                  ref: "node_" + row[1].nodeId,
                                  refInFor: true,
                                  staticClass: "no-focus-outline node",
                                  class: {
                                    selected: row[1].nodeId === _vm.selected,
                                    highlight:
                                      row[1].nodeId === _vm.highlightedNode,
                                  },
                                  attrs: {
                                    "data-tippy-content": _vm.getTooltipContent(
                                      row[1]
                                    ),
                                  },
                                  on: {
                                    mouseenter: function ($event) {
                                      return _vm.eventBus.$emit(
                                        "mouseovernode",
                                        row[1].nodeId
                                      );
                                    },
                                    mouseleave: function ($event) {
                                      return _vm.eventBus.$emit(
                                        "mouseoutnode",
                                        row[1].nodeId
                                      );
                                    },
                                  },
                                },
                                [
                                  _c("td", { staticClass: "node-index" }, [
                                    _c(
                                      "a",
                                      {
                                        staticClass: "font-weight-normal small",
                                        attrs: {
                                          href: "#plan/node/" + row[1].nodeId,
                                        },
                                        on: { click: function ($event) {} },
                                      },
                                      [_vm._v("#" + _vm._s(row[1].nodeId))]
                                    ),
                                  ]),
                                  _vm._v(" "),
                                  _c("td", { staticClass: "node-type pr-2" }, [
                                    _c(
                                      "span",
                                      { staticClass: "tree-lines" },
                                      [
                                        _vm._l(
                                          _vm.lodash.range(row[0]),
                                          function (i) {
                                            return [
                                              _vm.lodash.indexOf(row[3], i) !=
                                              -1
                                                ? [_vm._v("│")]
                                                : i !== 0
                                                ? [_vm._v(" ")]
                                                : _vm._e(),
                                            ];
                                          }
                                        ),
                                        index !== 0
                                          ? [
                                              !row[1][
                                                _vm.nodeProps.SUBPLAN_NAME
                                              ]
                                                ? [
                                                    _vm._v(
                                                      _vm._s(row[2] ? "└" : "├")
                                                    ),
                                                  ]
                                                : [
                                                    !row[2]
                                                      ? [_vm._v("│")]
                                                      : [_vm._v(" ")],
                                                  ],
                                            ]
                                          : _vm._e(),
                                      ],
                                      2
                                    ),
                                    _vm._v(
                                      "\n              " +
                                        _vm._s(_vm.nodeType(row)) +
                                        "\n            "
                                    ),
                                  ]),
                                  _vm._v(" "),
                                  _c("td", [
                                    _vm.viewOptions.metric == _vm.metrics.time
                                      ? _c(
                                          "div",
                                          {
                                            key: "node" + index + "time",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass:
                                                "progress-bar border-secondary bg-secondary",
                                              class: {
                                                "border-left":
                                                  row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_DURATION
                                                  ] > 0,
                                              },
                                              style:
                                                "width: " +
                                                (row[1][
                                                  _vm.nodeProps
                                                    .EXCLUSIVE_DURATION
                                                ] /
                                                  (_vm.plan.planStats
                                                    .executionTime ||
                                                    _vm.plan.content.Plan[
                                                      _vm.nodeProps
                                                        .ACTUAL_TOTAL_TIME
                                                    ])) *
                                                  100 +
                                                "%; height:5px;",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass:
                                                "progress-bar bg-secondary-light",
                                              style:
                                                "width: " +
                                                ((row[1][
                                                  _vm.nodeProps
                                                    .ACTUAL_TOTAL_TIME
                                                ] -
                                                  row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_DURATION
                                                  ]) /
                                                  (_vm.plan.planStats
                                                    .executionTime ||
                                                    _vm.plan.content.Plan[
                                                      _vm.nodeProps
                                                        .ACTUAL_TOTAL_TIME
                                                    ])) *
                                                  100 +
                                                "%; height:5px;",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                        _vm.metrics.rows
                                      ? _c(
                                          "div",
                                          {
                                            key: "node" + index + "rows",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "bg-secondary",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .ACTUAL_ROWS_REVISED
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxRows) *
                                                    100
                                                ) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                        _vm.metrics.estimate_factor
                                      ? _c(
                                          "div",
                                          {
                                            key: "node" + index + "estimation",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent justify-content-center",
                                            staticStyle: { height: "10px" },
                                          },
                                          [
                                            _c(
                                              "span",
                                              {
                                                staticClass: "text-muted small",
                                              },
                                              [
                                                _c("i", {
                                                  staticClass: "fa fa-fw",
                                                  class: {
                                                    "fa-arrow-down":
                                                      row[1][
                                                        _vm.nodeProps
                                                          .PLANNER_ESTIMATE_DIRECTION
                                                      ] ===
                                                      _vm.estimateDirections
                                                        .under,
                                                  },
                                                }),
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "progress-bar",
                                              class: [
                                                row[1][
                                                  _vm.nodeProps
                                                    .PLANNER_ESTIMATE_DIRECTION
                                                ] ===
                                                _vm.estimateDirections.under
                                                  ? "bg-secondary"
                                                  : "bg-transparent",
                                              ],
                                              style:
                                                "width: " +
                                                _vm.estimateFactorPercent(row) +
                                                "%; height:5px;",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass:
                                                "progress-bar border-left",
                                              staticStyle: {
                                                width: "1px",
                                                height: "5px",
                                              },
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "progress-bar",
                                              class: [
                                                row[1][
                                                  _vm.nodeProps
                                                    .PLANNER_ESTIMATE_DIRECTION
                                                ] ===
                                                _vm.estimateDirections.over
                                                  ? "bg-secondary"
                                                  : "bg-transparent",
                                              ],
                                              style:
                                                "width: " +
                                                _vm.estimateFactorPercent(row) +
                                                "%; height:5px;",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c(
                                              "span",
                                              {
                                                staticClass: "text-muted small",
                                              },
                                              [
                                                _c("i", {
                                                  staticClass: "fa fa-fw",
                                                  class: {
                                                    "fa-arrow-up":
                                                      row[1][
                                                        _vm.nodeProps
                                                          .PLANNER_ESTIMATE_DIRECTION
                                                      ] ===
                                                      _vm.estimateDirections
                                                        .over,
                                                  },
                                                }),
                                              ]
                                            ),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                        _vm.metrics.cost
                                      ? _c(
                                          "div",
                                          {
                                            key: "node" + index + "cost",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "bg-secondary",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                Math.round(
                                                  (row[1][
                                                    _vm.nodeProps.EXCLUSIVE_COST
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxCost) *
                                                    100
                                                ) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                          _vm.metrics.buffers &&
                                        _vm.viewOptions.buffersMetric ==
                                          _vm.bufferLocations.shared &&
                                        _vm.plan.planStats.maxBlocks[
                                          _vm.bufferLocations.shared
                                        ]
                                      ? _c(
                                          "div",
                                          {
                                            key:
                                              "node" + index + "buffers_shared",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "bg-hit",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_SHARED_HIT_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.shared
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-read",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_SHARED_READ_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.shared
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-dirtied",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_SHARED_DIRTIED_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.shared
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-written",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_SHARED_WRITTEN_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.shared
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                          _vm.metrics.buffers &&
                                        _vm.viewOptions.buffersMetric ==
                                          _vm.bufferLocations.temp &&
                                        _vm.plan.planStats.maxBlocks[
                                          _vm.bufferLocations.temp
                                        ]
                                      ? _c(
                                          "div",
                                          {
                                            key:
                                              "node" + index + "buffers_temp",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "bg-read",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_TEMP_READ_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.temp
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-written",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_TEMP_WRITTEN_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.temp
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm.viewOptions.metric ==
                                          _vm.metrics.buffers &&
                                        _vm.viewOptions.buffersMetric ==
                                          _vm.bufferLocations.local &&
                                        _vm.plan.planStats.maxBlocks[
                                          _vm.bufferLocations.local
                                        ]
                                      ? _c(
                                          "div",
                                          {
                                            key:
                                              "node" + index + "buffers_local",
                                            staticClass:
                                              "progress rounded-0 align-items-center bg-transparent",
                                            staticStyle: { height: "5px" },
                                          },
                                          [
                                            _c("div", {
                                              staticClass: "bg-hit",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_LOCAL_HIT_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.local
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-read",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_LOCAL_READ_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.local
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-dirtied",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_LOCAL_DIRTIED_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.local
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                              staticClass: "bg-written",
                                              staticStyle: { height: "5px" },
                                              style:
                                                "width: " +
                                                (Math.round(
                                                  (row[1][
                                                    _vm.nodeProps
                                                      .EXCLUSIVE_LOCAL_WRITTEN_BLOCKS
                                                  ] /
                                                    _vm.plan.planStats
                                                      .maxBlocks[
                                                      _vm.bufferLocations.local
                                                    ]) *
                                                    100
                                                ) || 0) +
                                                "%",
                                              attrs: {
                                                role: "progressbar",
                                                "aria-valuenow": "15",
                                                "aria-valuemin": "0",
                                                "aria-valuemax": "100",
                                              },
                                            }),
                                          ]
                                        )
                                      : _vm._e(),
                                  ]),
                                ]
                              ),
                            ];
                          }),
                        ],
                        2
                      );
                    }),
                    0
                  )
                : _c("div", { staticClass: "p-2 text-center text-muted" }, [
                    _c("em", [_vm._v("\n        No data available\n      ")]),
                  ]),
            ]
          ),
        ]);
      };
      var Diagramvue_type_template_id_17c767c6_staticRenderFns = [
        function () {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("li", { staticClass: "list-inline-item" }, [
            _c("span", { staticClass: "bg-read" }),
            _vm._v("\n          Read\n        "),
          ]);
        },
        function () {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("li", { staticClass: "list-inline-item" }, [
            _c("span", { staticClass: "bg-written" }),
            _vm._v("\n          Written\n        "),
          ]);
        },
      ];

      // CONCATENATED MODULE: ./src/components/Diagram.vue?vue&type=template&id=17c767c6&

      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js
      function getWindow(node) {
        if (node == null) {
          return window;
        }

        if (node.toString() !== "[object Window]") {
          var ownerDocument = node.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView || window : window;
        }

        return node;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js

      function isElement(node) {
        var OwnElement = getWindow(node).Element;
        return node instanceof OwnElement || node instanceof Element;
      }

      function isHTMLElement(node) {
        var OwnElement = getWindow(node).HTMLElement;
        return node instanceof OwnElement || node instanceof HTMLElement;
      }

      function isShadowRoot(node) {
        // IE 11 has no ShadowRoot
        if (typeof ShadowRoot === "undefined") {
          return false;
        }

        var OwnElement = getWindow(node).ShadowRoot;
        return node instanceof OwnElement || node instanceof ShadowRoot;
      }

      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/math.js
      var math_max = Math.max;
      var math_min = Math.min;
      var round = Math.round;
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js

      function getBoundingClientRect(element, includeScale) {
        if (includeScale === void 0) {
          includeScale = false;
        }

        var rect = element.getBoundingClientRect();
        var scaleX = 1;
        var scaleY = 1;

        if (isHTMLElement(element) && includeScale) {
          var offsetHeight = element.offsetHeight;
          var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
          // Fallback to 1 in case both values are `0`

          if (offsetWidth > 0) {
            scaleX = round(rect.width) / offsetWidth || 1;
          }

          if (offsetHeight > 0) {
            scaleY = round(rect.height) / offsetHeight || 1;
          }
        }

        return {
          width: rect.width / scaleX,
          height: rect.height / scaleY,
          top: rect.top / scaleY,
          right: rect.right / scaleX,
          bottom: rect.bottom / scaleY,
          left: rect.left / scaleX,
          x: rect.left / scaleX,
          y: rect.top / scaleY,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js

      function getWindowScroll(node) {
        var win = getWindow(node);
        var scrollLeft = win.pageXOffset;
        var scrollTop = win.pageYOffset;
        return {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
      function getHTMLElementScroll(element) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js

      function getNodeScroll(node) {
        if (node === getWindow(node) || !isHTMLElement(node)) {
          return getWindowScroll(node);
        } else {
          return getHTMLElementScroll(node);
        }
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
      function getNodeName_getNodeName(element) {
        return element ? (element.nodeName || "").toLowerCase() : null;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js

      function getDocumentElement(element) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return (
          (isElement(element)
            ? element.ownerDocument // $FlowFixMe[prop-missing]
            : element.document) || window.document
        ).documentElement;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js

      function getWindowScrollBarX(element) {
        // If <html> has a CSS width greater than the viewport, then this will be
        // incorrect for RTL.
        // Popper 1 is broken in this case and never had a bug report so let's assume
        // it's not an issue. I don't think anyone ever specifies width on <html>
        // anyway.
        // Browsers where the left scrollbar doesn't cause an issue report `0` for
        // this (e.g. Edge 2019, IE11, Safari)
        return (
          getBoundingClientRect(getDocumentElement(element)).left +
          getWindowScroll(element).scrollLeft
        );
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js

      function getComputedStyle(element) {
        return getWindow(element).getComputedStyle(element);
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js

      function isScrollParent(element) {
        // Firefox wants us to check `-x` and `-y` variations as well
        var _getComputedStyle = getComputedStyle(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

        return /auto|scroll|overlay|hidden/.test(
          overflow + overflowY + overflowX
        );
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js

      function isElementScaled(element) {
        var rect = element.getBoundingClientRect();
        var scaleX = round(rect.width) / element.offsetWidth || 1;
        var scaleY = round(rect.height) / element.offsetHeight || 1;
        return scaleX !== 1 || scaleY !== 1;
      } // Returns the composite rect of an element relative to its offsetParent.
      // Composite means it takes into account transforms as well as layout.

      function getCompositeRect(
        elementOrVirtualElement,
        offsetParent,
        isFixed
      ) {
        if (isFixed === void 0) {
          isFixed = false;
        }

        var isOffsetParentAnElement = isHTMLElement(offsetParent);
        var offsetParentIsScaled =
          isHTMLElement(offsetParent) && isElementScaled(offsetParent);
        var documentElement = getDocumentElement(offsetParent);
        var rect = getBoundingClientRect(
          elementOrVirtualElement,
          offsetParentIsScaled
        );
        var scroll = {
          scrollLeft: 0,
          scrollTop: 0,
        };
        var offsets = {
          x: 0,
          y: 0,
        };

        if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {
          if (
            getNodeName_getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
            isScrollParent(documentElement)
          ) {
            scroll = getNodeScroll(offsetParent);
          }

          if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
          } else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
          }
        }

        return {
          x: rect.left + scroll.scrollLeft - offsets.x,
          y: rect.top + scroll.scrollTop - offsets.y,
          width: rect.width,
          height: rect.height,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
      // Returns the layout rect of an element relative to its offsetParent. Layout
      // means it doesn't take into account transforms.

      function getLayoutRect(element) {
        var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
        // Fixes https://github.com/popperjs/popper-core/issues/1223

        var width = element.offsetWidth;
        var height = element.offsetHeight;

        if (Math.abs(clientRect.width - width) <= 1) {
          width = clientRect.width;
        }

        if (Math.abs(clientRect.height - height) <= 1) {
          height = clientRect.height;
        }

        return {
          x: element.offsetLeft,
          y: element.offsetTop,
          width: width,
          height: height,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js

      function getParentNode(element) {
        if (getNodeName_getNodeName(element) === "html") {
          return element;
        }

        return (
          // this is a quicker (but less type safe) way to save quite some bytes from the bundle
          // $FlowFixMe[incompatible-return]
          // $FlowFixMe[prop-missing]
          element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
          element.parentNode || // DOM Element detected
          (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
          // $FlowFixMe[incompatible-call]: HTMLElement is a Node
          getDocumentElement(element) // fallback
        );
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js

      function getScrollParent(node) {
        if (
          ["html", "body", "#document"].indexOf(
            getNodeName_getNodeName(node)
          ) >= 0
        ) {
          // $FlowFixMe[incompatible-return]: assume body is always available
          return node.ownerDocument.body;
        }

        if (isHTMLElement(node) && isScrollParent(node)) {
          return node;
        }

        return getScrollParent(getParentNode(node));
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js

      /*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

      function listScrollParents(element, list) {
        var _element$ownerDocumen;

        if (list === void 0) {
          list = [];
        }

        var scrollParent = getScrollParent(element);
        var isBody =
          scrollParent ===
          ((_element$ownerDocumen = element.ownerDocument) == null
            ? void 0
            : _element$ownerDocumen.body);
        var win = getWindow(scrollParent);
        var target = isBody
          ? [win].concat(
              win.visualViewport || [],
              isScrollParent(scrollParent) ? scrollParent : []
            )
          : scrollParent;
        var updatedList = list.concat(target);
        return isBody
          ? updatedList // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
          : updatedList.concat(listScrollParents(getParentNode(target)));
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js

      function isTableElement(element) {
        return (
          ["table", "td", "th"].indexOf(getNodeName_getNodeName(element)) >= 0
        );
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js

      function getTrueOffsetParent(element) {
        if (
          !isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
          getComputedStyle(element).position === "fixed"
        ) {
          return null;
        }

        return element.offsetParent;
      } // `.offsetParent` reports `null` for fixed elements, while absolute elements
      // return the containing block

      function getContainingBlock(element) {
        var isFirefox =
          navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
        var isIE = navigator.userAgent.indexOf("Trident") !== -1;

        if (isIE && isHTMLElement(element)) {
          // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
          var elementCss = getComputedStyle(element);

          if (elementCss.position === "fixed") {
            return null;
          }
        }

        var currentNode = getParentNode(element);

        while (
          isHTMLElement(currentNode) &&
          ["html", "body"].indexOf(getNodeName_getNodeName(currentNode)) < 0
        ) {
          var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
          // create a containing block.
          // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

          if (
            css.transform !== "none" ||
            css.perspective !== "none" ||
            css.contain === "paint" ||
            ["transform", "perspective"].indexOf(css.willChange) !== -1 ||
            (isFirefox && css.willChange === "filter") ||
            (isFirefox && css.filter && css.filter !== "none")
          ) {
            return currentNode;
          } else {
            currentNode = currentNode.parentNode;
          }
        }

        return null;
      } // Gets the closest ancestor positioned element. Handles some edge cases,
      // such as table ancestors and cross browser bugs.

      function getOffsetParent(element) {
        var window = getWindow(element);
        var offsetParent = getTrueOffsetParent(element);

        while (
          offsetParent &&
          isTableElement(offsetParent) &&
          getComputedStyle(offsetParent).position === "static"
        ) {
          offsetParent = getTrueOffsetParent(offsetParent);
        }

        if (
          offsetParent &&
          (getNodeName_getNodeName(offsetParent) === "html" ||
            (getNodeName_getNodeName(offsetParent) === "body" &&
              getComputedStyle(offsetParent).position === "static"))
        ) {
          return window;
        }

        return offsetParent || getContainingBlock(element) || window;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/enums.js
      var enums_top = "top";
      var bottom = "bottom";
      var right = "right";
      var left = "left";
      var auto = "auto";
      var basePlacements = [enums_top, bottom, right, left];
      var start = "start";
      var end = "end";
      var enums_clippingParents = "clippingParents";
      var viewport = "viewport";
      var enums_popper = "popper";
      var enums_reference = "reference";
      var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function (
        acc,
        placement
      ) {
        return acc.concat([placement + "-" + start, placement + "-" + end]);
      },
      []);
      var enums_placements = /*#__PURE__*/ []
        .concat(basePlacements, [auto])
        .reduce(function (acc, placement) {
          return acc.concat([
            placement,
            placement + "-" + start,
            placement + "-" + end,
          ]);
        }, []); // modifiers that need to read the DOM

      var beforeRead = "beforeRead";
      var enums_read = "read";
      var afterRead = "afterRead"; // pure-logic modifiers

      var beforeMain = "beforeMain";
      var main = "main";
      var afterMain = "afterMain"; // modifier with the purpose to write to the DOM (or write into a framework state)

      var beforeWrite = "beforeWrite";
      var write = "write";
      var afterWrite = "afterWrite";
      var modifierPhases = [
        beforeRead,
        enums_read,
        afterRead,
        beforeMain,
        main,
        afterMain,
        beforeWrite,
        write,
        afterWrite,
      ];
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js
      // source: https://stackoverflow.com/questions/49875255

      function order(modifiers) {
        var map = new Map();
        var visited = new Set();
        var result = [];
        modifiers.forEach(function (modifier) {
          map.set(modifier.name, modifier);
        }); // On visiting object, check for its dependencies and visit them recursively

        function sort(modifier) {
          visited.add(modifier.name);
          var requires = [].concat(
            modifier.requires || [],
            modifier.requiresIfExists || []
          );
          requires.forEach(function (dep) {
            if (!visited.has(dep)) {
              var depModifier = map.get(dep);

              if (depModifier) {
                sort(depModifier);
              }
            }
          });
          result.push(modifier);
        }

        modifiers.forEach(function (modifier) {
          if (!visited.has(modifier.name)) {
            // check for visited object
            sort(modifier);
          }
        });
        return result;
      }

      function orderModifiers(modifiers) {
        // order based on dependencies
        var orderedModifiers = order(modifiers); // order based on phase

        return modifierPhases.reduce(function (acc, phase) {
          return acc.concat(
            orderedModifiers.filter(function (modifier) {
              return modifier.phase === phase;
            })
          );
        }, []);
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js
      function debounce(fn) {
        var pending;
        return function () {
          if (!pending) {
            pending = new Promise(function (resolve) {
              Promise.resolve().then(function () {
                pending = undefined;
                resolve(fn());
              });
            });
          }

          return pending;
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js
      function mergeByName(modifiers) {
        var merged = modifiers.reduce(function (merged, current) {
          var existing = merged[current.name];
          merged[current.name] = existing
            ? Object.assign({}, existing, current, {
                options: Object.assign({}, existing.options, current.options),
                data: Object.assign({}, existing.data, current.data),
              })
            : current;
          return merged;
        }, {}); // IE11 does not support Object.values

        return Object.keys(merged).map(function (key) {
          return merged[key];
        });
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js

      var INVALID_ELEMENT_ERROR =
        "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
      var INFINITE_LOOP_ERROR =
        "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
      var DEFAULT_OPTIONS = {
        placement: "bottom",
        modifiers: [],
        strategy: "absolute",
      };

      function areValidElements() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return !args.some(function (element) {
          return !(
            element && typeof element.getBoundingClientRect === "function"
          );
        });
      }

      function popperGenerator(generatorOptions) {
        if (generatorOptions === void 0) {
          generatorOptions = {};
        }

        var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers =
            _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions =
            _generatorOptions$def2 === void 0
              ? DEFAULT_OPTIONS
              : _generatorOptions$def2;
        return function createPopper(reference, popper, options) {
          if (options === void 0) {
            options = defaultOptions;
          }

          var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
              reference: reference,
              popper: popper,
            },
            attributes: {},
            styles: {},
          };
          var effectCleanupFns = [];
          var isDestroyed = false;
          var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
              var options =
                typeof setOptionsAction === "function"
                  ? setOptionsAction(state.options)
                  : setOptionsAction;
              cleanupModifierEffects();
              state.options = Object.assign(
                {},
                defaultOptions,
                state.options,
                options
              );
              state.scrollParents = {
                reference: isElement(reference)
                  ? listScrollParents(reference)
                  : reference.contextElement
                  ? listScrollParents(reference.contextElement)
                  : [],
                popper: listScrollParents(popper),
              }; // Orders the modifiers based on their dependencies and `phase`
              // properties

              var orderedModifiers = orderModifiers(
                mergeByName(
                  [].concat(defaultModifiers, state.options.modifiers)
                )
              ); // Strip out disabled modifiers

              state.orderedModifiers = orderedModifiers.filter(function (m) {
                return m.enabled;
              }); // Validate the provided modifiers so that the consumer will get warned
              // if one of the modifiers is invalid for any reason

              if (false) {
                var _getComputedStyle,
                  marginTop,
                  marginRight,
                  marginBottom,
                  marginLeft,
                  flipModifier,
                  modifiers;
              }

              runModifierEffects();
              return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
              if (isDestroyed) {
                return;
              }

              var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
              // anymore

              if (!areValidElements(reference, popper)) {
                if (false) {
                }

                return;
              } // Store the reference and popper rects to be read by modifiers

              state.rects = {
                reference: getCompositeRect(
                  reference,
                  getOffsetParent(popper),
                  state.options.strategy === "fixed"
                ),
                popper: getLayoutRect(popper),
              }; // Modifiers have the ability to reset the current update cycle. The
              // most common use case for this is the `flip` modifier changing the
              // placement, which then needs to re-run all the modifiers, because the
              // logic was previously ran for the previous placement and is therefore
              // stale/incorrect

              state.reset = false;
              state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
              // is filled with the initial data specified by the modifier. This means
              // it doesn't persist and is fresh on each update.
              // To ensure persistent data, use `${name}#persistent`

              state.orderedModifiers.forEach(function (modifier) {
                return (state.modifiersData[modifier.name] = Object.assign(
                  {},
                  modifier.data
                ));
              });
              var __debug_loops__ = 0;

              for (
                var index = 0;
                index < state.orderedModifiers.length;
                index++
              ) {
                if (false) {
                }

                if (state.reset === true) {
                  state.reset = false;
                  index = -1;
                  continue;
                }

                var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options =
                    _state$orderedModifie2 === void 0
                      ? {}
                      : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

                if (typeof fn === "function") {
                  state =
                    fn({
                      state: state,
                      options: _options,
                      name: name,
                      instance: instance,
                    }) || state;
                }
              }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce(function () {
              return new Promise(function (resolve) {
                instance.forceUpdate();
                resolve(state);
              });
            }),
            destroy: function destroy() {
              cleanupModifierEffects();
              isDestroyed = true;
            },
          };

          if (!areValidElements(reference, popper)) {
            if (false) {
            }

            return instance;
          }

          instance.setOptions(options).then(function (state) {
            if (!isDestroyed && options.onFirstUpdate) {
              options.onFirstUpdate(state);
            }
          }); // Modifiers have the ability to execute arbitrary code before the first
          // update cycle runs. They will be executed in the same order as the update
          // cycle. This is useful when a modifier adds some persistent data that
          // other modifiers need to use, but the modifier is run after the dependent
          // one.

          function runModifierEffects() {
            state.orderedModifiers.forEach(function (_ref3) {
              var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

              if (typeof effect === "function") {
                var cleanupFn = effect({
                  state: state,
                  name: name,
                  instance: instance,
                  options: options,
                });

                var noopFn = function noopFn() {};

                effectCleanupFns.push(cleanupFn || noopFn);
              }
            });
          }

          function cleanupModifierEffects() {
            effectCleanupFns.forEach(function (fn) {
              return fn();
            });
            effectCleanupFns = [];
          }

          return instance;
        };
      }
      var createPopper_createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js
      // eslint-disable-next-line import/no-unused-modules

      var passive = {
        passive: true,
      };

      function effect(_ref) {
        var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
        var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
        var window = getWindow(state.elements.popper);
        var scrollParents = [].concat(
          state.scrollParents.reference,
          state.scrollParents.popper
        );

        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.addEventListener("scroll", instance.update, passive);
          });
        }

        if (resize) {
          window.addEventListener("resize", instance.update, passive);
        }

        return function () {
          if (scroll) {
            scrollParents.forEach(function (scrollParent) {
              scrollParent.removeEventListener(
                "scroll",
                instance.update,
                passive
              );
            });
          }

          if (resize) {
            window.removeEventListener("resize", instance.update, passive);
          }
        };
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var eventListeners = {
        name: "eventListeners",
        enabled: true,
        phase: "write",
        fn: function fn() {},
        effect: effect,
        data: {},
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js

      function getBasePlacement(placement) {
        return placement.split("-")[0];
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js
      function getVariation(placement) {
        return placement.split("-")[1];
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
      function getMainAxisFromPlacement(placement) {
        return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js

      function computeOffsets(_ref) {
        var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
        var basePlacement = placement ? getBasePlacement(placement) : null;
        var variation = placement ? getVariation(placement) : null;
        var commonX = reference.x + reference.width / 2 - element.width / 2;
        var commonY = reference.y + reference.height / 2 - element.height / 2;
        var offsets;

        switch (basePlacement) {
          case enums_top:
            offsets = {
              x: commonX,
              y: reference.y - element.height,
            };
            break;

          case bottom:
            offsets = {
              x: commonX,
              y: reference.y + reference.height,
            };
            break;

          case right:
            offsets = {
              x: reference.x + reference.width,
              y: commonY,
            };
            break;

          case left:
            offsets = {
              x: reference.x - element.width,
              y: commonY,
            };
            break;

          default:
            offsets = {
              x: reference.x,
              y: reference.y,
            };
        }

        var mainAxis = basePlacement
          ? getMainAxisFromPlacement(basePlacement)
          : null;

        if (mainAxis != null) {
          var len = mainAxis === "y" ? "height" : "width";

          switch (variation) {
            case start:
              offsets[mainAxis] =
                offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
              break;

            case end:
              offsets[mainAxis] =
                offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
              break;

            default:
          }
        }

        return offsets;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js

      function popperOffsets_popperOffsets(_ref) {
        var state = _ref.state,
          name = _ref.name;
        // Offsets are the actual position the popper needs to have to be
        // properly positioned near its reference element
        // This is the most basic placement, and will be adjusted by
        // the modifiers in the next step
        state.modifiersData[name] = computeOffsets({
          reference: state.rects.reference,
          element: state.rects.popper,
          strategy: "absolute",
          placement: state.placement,
        });
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_popperOffsets = {
        name: "popperOffsets",
        enabled: true,
        phase: "read",
        fn: popperOffsets_popperOffsets,
        data: {},
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js

      // eslint-disable-next-line import/no-unused-modules

      var unsetSides = {
        top: "auto",
        right: "auto",
        bottom: "auto",
        left: "auto",
      }; // Round the offsets to the nearest suitable subpixel based on the DPR.
      // Zooming can change the DPR, but it seems to report a value that will
      // cleanly divide the values into the appropriate subpixels.

      function roundOffsetsByDPR(_ref) {
        var x = _ref.x,
          y = _ref.y;
        var win = window;
        var dpr = win.devicePixelRatio || 1;
        return {
          x: round(x * dpr) / dpr || 0,
          y: round(y * dpr) / dpr || 0,
        };
      }

      function mapToStyles(_ref2) {
        var _Object$assign2;

        var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;

        var _ref3 =
            roundOffsets === true
              ? roundOffsetsByDPR(offsets)
              : typeof roundOffsets === "function"
              ? roundOffsets(offsets)
              : offsets,
          _ref3$x = _ref3.x,
          x = _ref3$x === void 0 ? 0 : _ref3$x,
          _ref3$y = _ref3.y,
          y = _ref3$y === void 0 ? 0 : _ref3$y;

        var hasX = offsets.hasOwnProperty("x");
        var hasY = offsets.hasOwnProperty("y");
        var sideX = left;
        var sideY = enums_top;
        var win = window;

        if (adaptive) {
          var offsetParent = getOffsetParent(popper);
          var heightProp = "clientHeight";
          var widthProp = "clientWidth";

          if (offsetParent === getWindow(popper)) {
            offsetParent = getDocumentElement(popper);

            if (
              getComputedStyle(offsetParent).position !== "static" &&
              position === "absolute"
            ) {
              heightProp = "scrollHeight";
              widthProp = "scrollWidth";
            }
          } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

          offsetParent = offsetParent;

          if (
            placement === enums_top ||
            ((placement === left || placement === right) && variation === end)
          ) {
            sideY = bottom;
            var offsetY =
              isFixed && win.visualViewport
                ? win.visualViewport.height // $FlowFixMe[prop-missing]
                : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
          }

          if (
            placement === left ||
            ((placement === enums_top || placement === bottom) &&
              variation === end)
          ) {
            sideX = right;
            var offsetX =
              isFixed && win.visualViewport
                ? win.visualViewport.width // $FlowFixMe[prop-missing]
                : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
          }
        }

        var commonStyles = Object.assign(
          {
            position: position,
          },
          adaptive && unsetSides
        );

        if (gpuAcceleration) {
          var _Object$assign;

          return Object.assign(
            {},
            commonStyles,
            ((_Object$assign = {}),
            (_Object$assign[sideY] = hasY ? "0" : ""),
            (_Object$assign[sideX] = hasX ? "0" : ""),
            (_Object$assign.transform =
              (win.devicePixelRatio || 1) <= 1
                ? "translate(" + x + "px, " + y + "px)"
                : "translate3d(" + x + "px, " + y + "px, 0)"),
            _Object$assign)
          );
        }

        return Object.assign(
          {},
          commonStyles,
          ((_Object$assign2 = {}),
          (_Object$assign2[sideY] = hasY ? y + "px" : ""),
          (_Object$assign2[sideX] = hasX ? x + "px" : ""),
          (_Object$assign2.transform = ""),
          _Object$assign2)
        );
      }

      function computeStyles(_ref4) {
        var state = _ref4.state,
          options = _ref4.options;
        var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration =
            _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets =
            _options$roundOffsets === void 0 ? true : _options$roundOffsets;

        if (false) {
          var transitionProperty;
        }

        var commonStyles = {
          placement: getBasePlacement(state.placement),
          variation: getVariation(state.placement),
          popper: state.elements.popper,
          popperRect: state.rects.popper,
          gpuAcceleration: gpuAcceleration,
          isFixed: state.options.strategy === "fixed",
        };

        if (state.modifiersData.popperOffsets != null) {
          state.styles.popper = Object.assign(
            {},
            state.styles.popper,
            mapToStyles(
              Object.assign({}, commonStyles, {
                offsets: state.modifiersData.popperOffsets,
                position: state.options.strategy,
                adaptive: adaptive,
                roundOffsets: roundOffsets,
              })
            )
          );
        }

        if (state.modifiersData.arrow != null) {
          state.styles.arrow = Object.assign(
            {},
            state.styles.arrow,
            mapToStyles(
              Object.assign({}, commonStyles, {
                offsets: state.modifiersData.arrow,
                position: "absolute",
                adaptive: false,
                roundOffsets: roundOffsets,
              })
            )
          );
        }

        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-placement": state.placement,
        });
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_computeStyles = {
        name: "computeStyles",
        enabled: true,
        phase: "beforeWrite",
        fn: computeStyles,
        data: {},
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js

      // This modifier takes the styles prepared by the `computeStyles` modifier
      // and applies them to the HTMLElements such as popper and arrow

      function applyStyles(_ref) {
        var state = _ref.state;
        Object.keys(state.elements).forEach(function (name) {
          var style = state.styles[name] || {};
          var attributes = state.attributes[name] || {};
          var element = state.elements[name]; // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName_getNodeName(element)) {
            return;
          } // Flow doesn't support to extend this property, but it's the most
          // effective way to apply styles to an HTMLElement
          // $FlowFixMe[cannot-write]

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (name) {
            var value = attributes[name];

            if (value === false) {
              element.removeAttribute(name);
            } else {
              element.setAttribute(name, value === true ? "" : value);
            }
          });
        });
      }

      function applyStyles_effect(_ref2) {
        var state = _ref2.state;
        var initialStyles = {
          popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0",
          },
          arrow: {
            position: "absolute",
          },
          reference: {},
        };
        Object.assign(state.elements.popper.style, initialStyles.popper);
        state.styles = initialStyles;

        if (state.elements.arrow) {
          Object.assign(state.elements.arrow.style, initialStyles.arrow);
        }

        return function () {
          Object.keys(state.elements).forEach(function (name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(
              state.styles.hasOwnProperty(name)
                ? state.styles[name]
                : initialStyles[name]
            ); // Set all values to an empty string to unset them

            var style = styleProperties.reduce(function (style, property) {
              style[property] = "";
              return style;
            }, {}); // arrow is optional + virtual elements

            if (!isHTMLElement(element) || !getNodeName_getNodeName(element)) {
              return;
            }

            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function (attribute) {
              element.removeAttribute(attribute);
            });
          });
        };
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_applyStyles = {
        name: "applyStyles",
        enabled: true,
        phase: "write",
        fn: applyStyles,
        effect: applyStyles_effect,
        requires: ["computeStyles"],
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/offset.js

      // eslint-disable-next-line import/no-unused-modules

      function distanceAndSkiddingToXY(placement, rects, offset) {
        var basePlacement = getBasePlacement(placement);
        var invertDistance =
          [left, enums_top].indexOf(basePlacement) >= 0 ? -1 : 1;

        var _ref =
            typeof offset === "function"
              ? offset(
                  Object.assign({}, rects, {
                    placement: placement,
                  })
                )
              : offset,
          skidding = _ref[0],
          distance = _ref[1];

        skidding = skidding || 0;
        distance = (distance || 0) * invertDistance;
        return [left, right].indexOf(basePlacement) >= 0
          ? {
              x: distance,
              y: skidding,
            }
          : {
              x: skidding,
              y: distance,
            };
      }

      function offset_offset(_ref2) {
        var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
        var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
        var data = enums_placements.reduce(function (acc, placement) {
          acc[placement] = distanceAndSkiddingToXY(
            placement,
            state.rects,
            offset
          );
          return acc;
        }, {});
        var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

        if (state.modifiersData.popperOffsets != null) {
          state.modifiersData.popperOffsets.x += x;
          state.modifiersData.popperOffsets.y += y;
        }

        state.modifiersData[name] = data;
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_offset = {
        name: "offset",
        enabled: true,
        phase: "main",
        requires: ["popperOffsets"],
        fn: offset_offset,
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
      var hash = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom",
      };
      function getOppositePlacement(placement) {
        return placement.replace(/left|right|bottom|top/g, function (matched) {
          return hash[matched];
        });
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
      var getOppositeVariationPlacement_hash = {
        start: "end",
        end: "start",
      };
      function getOppositeVariationPlacement(placement) {
        return placement.replace(/start|end/g, function (matched) {
          return getOppositeVariationPlacement_hash[matched];
        });
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js

      function getViewportRect(element) {
        var win = getWindow(element);
        var html = getDocumentElement(element);
        var visualViewport = win.visualViewport;
        var width = html.clientWidth;
        var height = html.clientHeight;
        var x = 0;
        var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
        // can be obscured underneath it.
        // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
        // if it isn't open, so if this isn't available, the popper will be detected
        // to overflow the bottom of the screen too early.

        if (visualViewport) {
          width = visualViewport.width;
          height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
          // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
          // errors due to floating point numbers, so we need to check precision.
          // Safari returns a number <= 0, usually < -1 when pinch-zoomed
          // Feature detection fails in mobile emulation mode in Chrome.
          // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
          // 0.001
          // Fallback here: "Not Safari" userAgent

          if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
          }
        }

        return {
          width: width,
          height: height,
          x: x + getWindowScrollBarX(element),
          y: y,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js

      // Gets the entire size of the scrollable document area, even extending outside
      // of the `<html>` and `<body>` rect bounds if horizontally scrollable

      function getDocumentRect(element) {
        var _element$ownerDocumen;

        var html = getDocumentElement(element);
        var winScroll = getWindowScroll(element);
        var body =
          (_element$ownerDocumen = element.ownerDocument) == null
            ? void 0
            : _element$ownerDocumen.body;
        var width = math_max(
          html.scrollWidth,
          html.clientWidth,
          body ? body.scrollWidth : 0,
          body ? body.clientWidth : 0
        );
        var height = math_max(
          html.scrollHeight,
          html.clientHeight,
          body ? body.scrollHeight : 0,
          body ? body.clientHeight : 0
        );
        var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
        var y = -winScroll.scrollTop;

        if (getComputedStyle(body || html).direction === "rtl") {
          x += math_max(html.clientWidth, body ? body.clientWidth : 0) - width;
        }

        return {
          width: width,
          height: height,
          x: x,
          y: y,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js

      function contains(parent, child) {
        var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

        if (parent.contains(child)) {
          return true;
        } // then fallback to custom implementation with Shadow DOM support
        else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...

            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false

        return false;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js
      function rectToClientRect(rect) {
        return Object.assign({}, rect, {
          left: rect.x,
          top: rect.y,
          right: rect.x + rect.width,
          bottom: rect.y + rect.height,
        });
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js

      function getInnerBoundingClientRect(element) {
        var rect = getBoundingClientRect(element);
        rect.top = rect.top + element.clientTop;
        rect.left = rect.left + element.clientLeft;
        rect.bottom = rect.top + element.clientHeight;
        rect.right = rect.left + element.clientWidth;
        rect.width = element.clientWidth;
        rect.height = element.clientHeight;
        rect.x = rect.left;
        rect.y = rect.top;
        return rect;
      }

      function getClientRectFromMixedType(element, clippingParent) {
        return clippingParent === viewport
          ? rectToClientRect(getViewportRect(element))
          : isElement(clippingParent)
          ? getInnerBoundingClientRect(clippingParent)
          : rectToClientRect(getDocumentRect(getDocumentElement(element)));
      } // A "clipping parent" is an overflowable container with the characteristic of
      // clipping (or hiding) overflowing elements with a position different from
      // `initial`

      function getClippingParents(element) {
        var clippingParents = listScrollParents(getParentNode(element));
        var canEscapeClipping =
          ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >=
          0;
        var clipperElement =
          canEscapeClipping && isHTMLElement(element)
            ? getOffsetParent(element)
            : element;

        if (!isElement(clipperElement)) {
          return [];
        } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

        return clippingParents.filter(function (clippingParent) {
          return (
            isElement(clippingParent) &&
            contains(clippingParent, clipperElement) &&
            getNodeName_getNodeName(clippingParent) !== "body" &&
            (canEscapeClipping
              ? getComputedStyle(clippingParent).position !== "static"
              : true)
          );
        });
      } // Gets the maximum area that the element is visible in due to any number of
      // clipping parents

      function getClippingRect(element, boundary, rootBoundary) {
        var mainClippingParents =
          boundary === "clippingParents"
            ? getClippingParents(element)
            : [].concat(boundary);
        var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
        var firstClippingParent = clippingParents[0];
        var clippingRect = clippingParents.reduce(function (
          accRect,
          clippingParent
        ) {
          var rect = getClientRectFromMixedType(element, clippingParent);
          accRect.top = math_max(rect.top, accRect.top);
          accRect.right = math_min(rect.right, accRect.right);
          accRect.bottom = math_min(rect.bottom, accRect.bottom);
          accRect.left = math_max(rect.left, accRect.left);
          return accRect;
        },
        getClientRectFromMixedType(element, firstClippingParent));
        clippingRect.width = clippingRect.right - clippingRect.left;
        clippingRect.height = clippingRect.bottom - clippingRect.top;
        clippingRect.x = clippingRect.left;
        clippingRect.y = clippingRect.top;
        return clippingRect;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
      function getFreshSideObject() {
        return {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
        };
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js

      function mergePaddingObject(paddingObject) {
        return Object.assign({}, getFreshSideObject(), paddingObject);
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js
      function expandToHashMap(value, keys) {
        return keys.reduce(function (hashMap, key) {
          hashMap[key] = value;
          return hashMap;
        }, {});
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js

      // eslint-disable-next-line import/no-unused-modules

      function detectOverflow(state, options) {
        if (options === void 0) {
          options = {};
        }

        var _options = options,
          _options$placement = _options.placement,
          placement =
            _options$placement === void 0
              ? state.placement
              : _options$placement,
          _options$boundary = _options.boundary,
          boundary =
            _options$boundary === void 0
              ? enums_clippingParents
              : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary =
            _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext =
            _options$elementConte === void 0
              ? enums_popper
              : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary =
            _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
        var paddingObject = mergePaddingObject(
          typeof padding !== "number"
            ? padding
            : expandToHashMap(padding, basePlacements)
        );
        var altContext =
          elementContext === enums_popper ? enums_reference : enums_popper;
        var popperRect = state.rects.popper;
        var element = state.elements[altBoundary ? altContext : elementContext];
        var clippingClientRect = getClippingRect(
          isElement(element)
            ? element
            : element.contextElement ||
                getDocumentElement(state.elements.popper),
          boundary,
          rootBoundary
        );
        var referenceClientRect = getBoundingClientRect(
          state.elements.reference
        );
        var popperOffsets = computeOffsets({
          reference: referenceClientRect,
          element: popperRect,
          strategy: "absolute",
          placement: placement,
        });
        var popperClientRect = rectToClientRect(
          Object.assign({}, popperRect, popperOffsets)
        );
        var elementClientRect =
          elementContext === enums_popper
            ? popperClientRect
            : referenceClientRect; // positive = overflowing the clipping rect
        // 0 or negative = within the clipping rect

        var overflowOffsets = {
          top:
            clippingClientRect.top - elementClientRect.top + paddingObject.top,
          bottom:
            elementClientRect.bottom -
            clippingClientRect.bottom +
            paddingObject.bottom,
          left:
            clippingClientRect.left -
            elementClientRect.left +
            paddingObject.left,
          right:
            elementClientRect.right -
            clippingClientRect.right +
            paddingObject.right,
        };
        var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

        if (elementContext === enums_popper && offsetData) {
          var offset = offsetData[placement];
          Object.keys(overflowOffsets).forEach(function (key) {
            var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
            var axis = [enums_top, bottom].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset[axis] * multiply;
          });
        }

        return overflowOffsets;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js

      function computeAutoPlacement(state, options) {
        if (options === void 0) {
          options = {};
        }

        var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements =
            _options$allowedAutoP === void 0
              ? enums_placements
              : _options$allowedAutoP;
        var variation = getVariation(placement);
        var placements = variation
          ? flipVariations
            ? variationPlacements
            : variationPlacements.filter(function (placement) {
                return getVariation(placement) === variation;
              })
          : basePlacements;
        var allowedPlacements = placements.filter(function (placement) {
          return allowedAutoPlacements.indexOf(placement) >= 0;
        });

        if (allowedPlacements.length === 0) {
          allowedPlacements = placements;

          if (false) {
          }
        } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

        var overflows = allowedPlacements.reduce(function (acc, placement) {
          acc[placement] = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
          })[getBasePlacement(placement)];
          return acc;
        }, {});
        return Object.keys(overflows).sort(function (a, b) {
          return overflows[a] - overflows[b];
        });
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js

      // eslint-disable-next-line import/no-unused-modules

      function getExpandedFallbackPlacements(placement) {
        if (getBasePlacement(placement) === auto) {
          return [];
        }

        var oppositePlacement = getOppositePlacement(placement);
        return [
          getOppositeVariationPlacement(placement),
          oppositePlacement,
          getOppositeVariationPlacement(oppositePlacement),
        ];
      }

      function flip(_ref) {
        var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

        if (state.modifiersData[name]._skip) {
          return;
        }

        var _options$mainAxis = options.mainAxis,
          checkMainAxis =
            _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations =
            _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
        var preferredPlacement = state.options.placement;
        var basePlacement = getBasePlacement(preferredPlacement);
        var isBasePlacement = basePlacement === preferredPlacement;
        var fallbackPlacements =
          specifiedFallbackPlacements ||
          (isBasePlacement || !flipVariations
            ? [getOppositePlacement(preferredPlacement)]
            : getExpandedFallbackPlacements(preferredPlacement));
        var placements = [preferredPlacement]
          .concat(fallbackPlacements)
          .reduce(function (acc, placement) {
            return acc.concat(
              getBasePlacement(placement) === auto
                ? computeAutoPlacement(state, {
                    placement: placement,
                    boundary: boundary,
                    rootBoundary: rootBoundary,
                    padding: padding,
                    flipVariations: flipVariations,
                    allowedAutoPlacements: allowedAutoPlacements,
                  })
                : placement
            );
          }, []);
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var checksMap = new Map();
        var makeFallbackChecks = true;
        var firstFittingPlacement = placements[0];

        for (var i = 0; i < placements.length; i++) {
          var placement = placements[i];

          var _basePlacement = getBasePlacement(placement);

          var isStartVariation = getVariation(placement) === start;
          var isVertical = [enums_top, bottom].indexOf(_basePlacement) >= 0;
          var len = isVertical ? "width" : "height";
          var overflow = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding,
          });
          var mainVariationSide = isVertical
            ? isStartVariation
              ? right
              : left
            : isStartVariation
            ? bottom
            : enums_top;

          if (referenceRect[len] > popperRect[len]) {
            mainVariationSide = getOppositePlacement(mainVariationSide);
          }

          var altVariationSide = getOppositePlacement(mainVariationSide);
          var checks = [];

          if (checkMainAxis) {
            checks.push(overflow[_basePlacement] <= 0);
          }

          if (checkAltAxis) {
            checks.push(
              overflow[mainVariationSide] <= 0,
              overflow[altVariationSide] <= 0
            );
          }

          if (
            checks.every(function (check) {
              return check;
            })
          ) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
          }

          checksMap.set(placement, checks);
        }

        if (makeFallbackChecks) {
          // `2` may be desired in some cases – research later
          var numberOfChecks = flipVariations ? 3 : 1;

          var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function (placement) {
              var checks = checksMap.get(placement);

              if (checks) {
                return checks.slice(0, _i).every(function (check) {
                  return check;
                });
              }
            });

            if (fittingPlacement) {
              firstFittingPlacement = fittingPlacement;
              return "break";
            }
          };

          for (var _i = numberOfChecks; _i > 0; _i--) {
            var _ret = _loop(_i);

            if (_ret === "break") break;
          }
        }

        if (state.placement !== firstFittingPlacement) {
          state.modifiersData[name]._skip = true;
          state.placement = firstFittingPlacement;
          state.reset = true;
        }
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_flip = {
        name: "flip",
        enabled: true,
        phase: "main",
        fn: flip,
        requiresIfExists: ["offset"],
        data: {
          _skip: false,
        },
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js
      function getAltAxis(axis) {
        return axis === "x" ? "y" : "x";
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/within.js

      function within(min, value, max) {
        return math_max(min, math_min(value, max));
      }
      function withinMaxClamp(min, value, max) {
        var v = within(min, value, max);
        return v > max ? max : v;
      }
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js

      function preventOverflow(_ref) {
        var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
        var _options$mainAxis = options.mainAxis,
          checkMainAxis =
            _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset =
            _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
        var overflow = detectOverflow(state, {
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          altBoundary: altBoundary,
        });
        var basePlacement = getBasePlacement(state.placement);
        var variation = getVariation(state.placement);
        var isBasePlacement = !variation;
        var mainAxis = getMainAxisFromPlacement(basePlacement);
        var altAxis = getAltAxis(mainAxis);
        var popperOffsets = state.modifiersData.popperOffsets;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var tetherOffsetValue =
          typeof tetherOffset === "function"
            ? tetherOffset(
                Object.assign({}, state.rects, {
                  placement: state.placement,
                })
              )
            : tetherOffset;
        var normalizedTetherOffsetValue =
          typeof tetherOffsetValue === "number"
            ? {
                mainAxis: tetherOffsetValue,
                altAxis: tetherOffsetValue,
              }
            : Object.assign(
                {
                  mainAxis: 0,
                  altAxis: 0,
                },
                tetherOffsetValue
              );
        var offsetModifierState = state.modifiersData.offset
          ? state.modifiersData.offset[state.placement]
          : null;
        var data = {
          x: 0,
          y: 0,
        };

        if (!popperOffsets) {
          return;
        }

        if (checkMainAxis) {
          var _offsetModifierState$;

          var mainSide = mainAxis === "y" ? enums_top : left;
          var altSide = mainAxis === "y" ? bottom : right;
          var len = mainAxis === "y" ? "height" : "width";
          var offset = popperOffsets[mainAxis];
          var min = offset + overflow[mainSide];
          var max = offset - overflow[altSide];
          var additive = tether ? -popperRect[len] / 2 : 0;
          var minLen =
            variation === start ? referenceRect[len] : popperRect[len];
          var maxLen =
            variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
          // outside the reference bounds

          var arrowElement = state.elements.arrow;
          var arrowRect =
            tether && arrowElement
              ? getLayoutRect(arrowElement)
              : {
                  width: 0,
                  height: 0,
                };
          var arrowPaddingObject = state.modifiersData["arrow#persistent"]
            ? state.modifiersData["arrow#persistent"].padding
            : getFreshSideObject();
          var arrowPaddingMin = arrowPaddingObject[mainSide];
          var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
          // to include its full size in the calculation. If the reference is small
          // and near the edge of a boundary, the popper can overflow even if the
          // reference is not overflowing as well (e.g. virtual elements with no
          // width or height)

          var arrowLen = within(0, referenceRect[len], arrowRect[len]);
          var minOffset = isBasePlacement
            ? referenceRect[len] / 2 -
              additive -
              arrowLen -
              arrowPaddingMin -
              normalizedTetherOffsetValue.mainAxis
            : minLen -
              arrowLen -
              arrowPaddingMin -
              normalizedTetherOffsetValue.mainAxis;
          var maxOffset = isBasePlacement
            ? -referenceRect[len] / 2 +
              additive +
              arrowLen +
              arrowPaddingMax +
              normalizedTetherOffsetValue.mainAxis
            : maxLen +
              arrowLen +
              arrowPaddingMax +
              normalizedTetherOffsetValue.mainAxis;
          var arrowOffsetParent =
            state.elements.arrow && getOffsetParent(state.elements.arrow);
          var clientOffset = arrowOffsetParent
            ? mainAxis === "y"
              ? arrowOffsetParent.clientTop || 0
              : arrowOffsetParent.clientLeft || 0
            : 0;
          var offsetModifierValue =
            (_offsetModifierState$ =
              offsetModifierState == null
                ? void 0
                : offsetModifierState[mainAxis]) != null
              ? _offsetModifierState$
              : 0;
          var tetherMin =
            offset + minOffset - offsetModifierValue - clientOffset;
          var tetherMax = offset + maxOffset - offsetModifierValue;
          var preventedOffset = within(
            tether ? math_min(min, tetherMin) : min,
            offset,
            tether ? math_max(max, tetherMax) : max
          );
          popperOffsets[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset;
        }

        if (checkAltAxis) {
          var _offsetModifierState$2;

          var _mainSide = mainAxis === "x" ? enums_top : left;

          var _altSide = mainAxis === "x" ? bottom : right;

          var _offset = popperOffsets[altAxis];

          var _len = altAxis === "y" ? "height" : "width";

          var _min = _offset + overflow[_mainSide];

          var _max = _offset - overflow[_altSide];

          var isOriginSide = [enums_top, left].indexOf(basePlacement) !== -1;

          var _offsetModifierValue =
            (_offsetModifierState$2 =
              offsetModifierState == null
                ? void 0
                : offsetModifierState[altAxis]) != null
              ? _offsetModifierState$2
              : 0;

          var _tetherMin = isOriginSide
            ? _min
            : _offset -
              referenceRect[_len] -
              popperRect[_len] -
              _offsetModifierValue +
              normalizedTetherOffsetValue.altAxis;

          var _tetherMax = isOriginSide
            ? _offset +
              referenceRect[_len] +
              popperRect[_len] -
              _offsetModifierValue -
              normalizedTetherOffsetValue.altAxis
            : _max;

          var _preventedOffset =
            tether && isOriginSide
              ? withinMaxClamp(_tetherMin, _offset, _tetherMax)
              : within(
                  tether ? _tetherMin : _min,
                  _offset,
                  tether ? _tetherMax : _max
                );

          popperOffsets[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
        }

        state.modifiersData[name] = data;
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_preventOverflow = {
        name: "preventOverflow",
        enabled: true,
        phase: "main",
        fn: preventOverflow,
        requiresIfExists: ["offset"],
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/arrow.js

      // eslint-disable-next-line import/no-unused-modules

      var arrow_toPaddingObject = function toPaddingObject(padding, state) {
        padding =
          typeof padding === "function"
            ? padding(
                Object.assign({}, state.rects, {
                  placement: state.placement,
                })
              )
            : padding;
        return mergePaddingObject(
          typeof padding !== "number"
            ? padding
            : expandToHashMap(padding, basePlacements)
        );
      };

      function arrow_arrow(_ref) {
        var _state$modifiersData$;

        var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
        var arrowElement = state.elements.arrow;
        var popperOffsets = state.modifiersData.popperOffsets;
        var basePlacement = getBasePlacement(state.placement);
        var axis = getMainAxisFromPlacement(basePlacement);
        var isVertical = [left, right].indexOf(basePlacement) >= 0;
        var len = isVertical ? "height" : "width";

        if (!arrowElement || !popperOffsets) {
          return;
        }

        var paddingObject = arrow_toPaddingObject(options.padding, state);
        var arrowRect = getLayoutRect(arrowElement);
        var minProp = axis === "y" ? enums_top : left;
        var maxProp = axis === "y" ? bottom : right;
        var endDiff =
          state.rects.reference[len] +
          state.rects.reference[axis] -
          popperOffsets[axis] -
          state.rects.popper[len];
        var startDiff = popperOffsets[axis] - state.rects.reference[axis];
        var arrowOffsetParent = getOffsetParent(arrowElement);
        var clientSize = arrowOffsetParent
          ? axis === "y"
            ? arrowOffsetParent.clientHeight || 0
            : arrowOffsetParent.clientWidth || 0
          : 0;
        var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
        // outside of the popper bounds

        var min = paddingObject[minProp];
        var max = clientSize - arrowRect[len] - paddingObject[maxProp];
        var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
        var offset = within(min, center, max); // Prevents breaking syntax highlighting...

        var axisProp = axis;
        state.modifiersData[name] =
          ((_state$modifiersData$ = {}),
          (_state$modifiersData$[axisProp] = offset),
          (_state$modifiersData$.centerOffset = offset - center),
          _state$modifiersData$);
      }

      function arrow_effect(_ref2) {
        var state = _ref2.state,
          options = _ref2.options;
        var _options$element = options.element,
          arrowElement =
            _options$element === void 0
              ? "[data-popper-arrow]"
              : _options$element;

        if (arrowElement == null) {
          return;
        } // CSS selector

        if (typeof arrowElement === "string") {
          arrowElement = state.elements.popper.querySelector(arrowElement);

          if (!arrowElement) {
            return;
          }
        }

        if (false) {
        }

        if (!contains(state.elements.popper, arrowElement)) {
          if (false) {
          }

          return;
        }

        state.elements.arrow = arrowElement;
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_arrow = {
        name: "arrow",
        enabled: true,
        phase: "main",
        fn: arrow_arrow,
        effect: arrow_effect,
        requires: ["popperOffsets"],
        requiresIfExists: ["preventOverflow"],
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/hide.js

      function getSideOffsets(overflow, rect, preventedOffsets) {
        if (preventedOffsets === void 0) {
          preventedOffsets = {
            x: 0,
            y: 0,
          };
        }

        return {
          top: overflow.top - rect.height - preventedOffsets.y,
          right: overflow.right - rect.width + preventedOffsets.x,
          bottom: overflow.bottom - rect.height + preventedOffsets.y,
          left: overflow.left - rect.width - preventedOffsets.x,
        };
      }

      function isAnySideFullyClipped(overflow) {
        return [enums_top, right, bottom, left].some(function (side) {
          return overflow[side] >= 0;
        });
      }

      function hide_hide(_ref) {
        var state = _ref.state,
          name = _ref.name;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var preventedOffsets = state.modifiersData.preventOverflow;
        var referenceOverflow = detectOverflow(state, {
          elementContext: "reference",
        });
        var popperAltOverflow = detectOverflow(state, {
          altBoundary: true,
        });
        var referenceClippingOffsets = getSideOffsets(
          referenceOverflow,
          referenceRect
        );
        var popperEscapeOffsets = getSideOffsets(
          popperAltOverflow,
          popperRect,
          preventedOffsets
        );
        var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
        var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
        state.modifiersData[name] = {
          referenceClippingOffsets: referenceClippingOffsets,
          popperEscapeOffsets: popperEscapeOffsets,
          isReferenceHidden: isReferenceHidden,
          hasPopperEscaped: hasPopperEscaped,
        };
        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-reference-hidden": isReferenceHidden,
          "data-popper-escaped": hasPopperEscaped,
        });
      } // eslint-disable-next-line import/no-unused-modules

      /* harmony default export */ var modifiers_hide = {
        name: "hide",
        enabled: true,
        phase: "main",
        requiresIfExists: ["preventOverflow"],
        fn: hide_hide,
      };
      // CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/popper.js

      var popper_defaultModifiers = [
        eventListeners,
        modifiers_popperOffsets,
        modifiers_computeStyles,
        modifiers_applyStyles,
        modifiers_offset,
        modifiers_flip,
        modifiers_preventOverflow,
        modifiers_arrow,
        modifiers_hide,
      ];
      var popper_createPopper = /*#__PURE__*/ popperGenerator({
        defaultModifiers: popper_defaultModifiers,
      }); // eslint-disable-next-line import/no-unused-modules

      // eslint-disable-next-line import/no-unused-modules

      // eslint-disable-next-line import/no-unused-modules

      // CONCATENATED MODULE: ./node_modules/tippy.js/dist/tippy.esm.js
      /**!
       * tippy.js v6.3.7
       * (c) 2017-2021 atomiks
       * MIT License
       */

      var ROUND_ARROW =
        '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
      var BOX_CLASS = "tippy-box";
      var CONTENT_CLASS = "tippy-content";
      var BACKDROP_CLASS = "tippy-backdrop";
      var ARROW_CLASS = "tippy-arrow";
      var SVG_ARROW_CLASS = "tippy-svg-arrow";
      var TOUCH_OPTIONS = {
        passive: true,
        capture: true,
      };
      var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
        return document.body;
      };

      function tippy_esm_hasOwnProperty(obj, key) {
        return {}.hasOwnProperty.call(obj, key);
      }
      function getValueAtIndexOrReturn(value, index, defaultValue) {
        if (Array.isArray(value)) {
          var v = value[index];
          return v == null
            ? Array.isArray(defaultValue)
              ? defaultValue[index]
              : defaultValue
            : v;
        }

        return value;
      }
      function isType(value, type) {
        var str = {}.toString.call(value);
        return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
      }
      function invokeWithArgsOrReturn(value, args) {
        return typeof value === "function" ? value.apply(void 0, args) : value;
      }
      function tippy_esm_debounce(fn, ms) {
        // Avoid wrapping in `setTimeout` if ms is 0 anyway
        if (ms === 0) {
          return fn;
        }

        var timeout;
        return function (arg) {
          clearTimeout(timeout);
          timeout = setTimeout(function () {
            fn(arg);
          }, ms);
        };
      }
      function removeProperties(obj, keys) {
        var clone = Object.assign({}, obj);
        keys.forEach(function (key) {
          delete clone[key];
        });
        return clone;
      }
      function splitBySpaces(value) {
        return value.split(/\s+/).filter(Boolean);
      }
      function normalizeToArray(value) {
        return [].concat(value);
      }
      function pushIfUnique(arr, value) {
        if (arr.indexOf(value) === -1) {
          arr.push(value);
        }
      }
      function unique(arr) {
        return arr.filter(function (item, index) {
          return arr.indexOf(item) === index;
        });
      }
      function tippy_esm_getBasePlacement(placement) {
        return placement.split("-")[0];
      }
      function arrayFrom(value) {
        return [].slice.call(value);
      }
      function removeUndefinedProps(obj) {
        return Object.keys(obj).reduce(function (acc, key) {
          if (obj[key] !== undefined) {
            acc[key] = obj[key];
          }

          return acc;
        }, {});
      }

      function div() {
        return document.createElement("div");
      }
      function tippy_esm_isElement(value) {
        return ["Element", "Fragment"].some(function (type) {
          return isType(value, type);
        });
      }
      function isNodeList(value) {
        return isType(value, "NodeList");
      }
      function isMouseEvent(value) {
        return isType(value, "MouseEvent");
      }
      function isReferenceElement(value) {
        return !!(value && value._tippy && value._tippy.reference === value);
      }
      function getArrayOfElements(value) {
        if (tippy_esm_isElement(value)) {
          return [value];
        }

        if (isNodeList(value)) {
          return arrayFrom(value);
        }

        if (Array.isArray(value)) {
          return value;
        }

        return arrayFrom(document.querySelectorAll(value));
      }
      function setTransitionDuration(els, value) {
        els.forEach(function (el) {
          if (el) {
            el.style.transitionDuration = value + "ms";
          }
        });
      }
      function setVisibilityState(els, state) {
        els.forEach(function (el) {
          if (el) {
            el.setAttribute("data-state", state);
          }
        });
      }
      function getOwnerDocument(elementOrElements) {
        var _element$ownerDocumen;

        var _normalizeToArray = normalizeToArray(elementOrElements),
          element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body

        return element != null &&
          (_element$ownerDocumen = element.ownerDocument) != null &&
          _element$ownerDocumen.body
          ? element.ownerDocument
          : document;
      }
      function isCursorOutsideInteractiveBorder(popperTreeData, event) {
        var clientX = event.clientX,
          clientY = event.clientY;
        return popperTreeData.every(function (_ref) {
          var popperRect = _ref.popperRect,
            popperState = _ref.popperState,
            props = _ref.props;
          var interactiveBorder = props.interactiveBorder;
          var basePlacement = tippy_esm_getBasePlacement(popperState.placement);
          var offsetData = popperState.modifiersData.offset;

          if (!offsetData) {
            return true;
          }

          var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
          var bottomDistance =
            basePlacement === "top" ? offsetData.bottom.y : 0;
          var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
          var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
          var exceedsTop =
            popperRect.top - clientY + topDistance > interactiveBorder;
          var exceedsBottom =
            clientY - popperRect.bottom - bottomDistance > interactiveBorder;
          var exceedsLeft =
            popperRect.left - clientX + leftDistance > interactiveBorder;
          var exceedsRight =
            clientX - popperRect.right - rightDistance > interactiveBorder;
          return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
        });
      }
      function updateTransitionEndListener(box, action, listener) {
        var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
        // `webkitTransitionEnd`...

        ["transitionend", "webkitTransitionEnd"].forEach(function (event) {
          box[method](event, listener);
        });
      }
      /**
       * Compared to xxx.contains, this function works for dom structures with shadow
       * dom
       */

      function actualContains(parent, child) {
        var target = child;

        while (target) {
          var _target$getRootNode;

          if (parent.contains(target)) {
            return true;
          }

          target =
            target.getRootNode == null
              ? void 0
              : (_target$getRootNode = target.getRootNode()) == null
              ? void 0
              : _target$getRootNode.host;
        }

        return false;
      }

      var currentInput = {
        isTouch: false,
      };
      var lastMouseMoveTime = 0;
      /**
       * When a `touchstart` event is fired, it's assumed the user is using touch
       * input. We'll bind a `mousemove` event listener to listen for mouse input in
       * the future. This way, the `isTouch` property is fully dynamic and will handle
       * hybrid devices that use a mix of touch + mouse input.
       */

      function onDocumentTouchStart() {
        if (currentInput.isTouch) {
          return;
        }

        currentInput.isTouch = true;

        if (window.performance) {
          document.addEventListener("mousemove", onDocumentMouseMove);
        }
      }
      /**
       * When two `mousemove` event are fired consecutively within 20ms, it's assumed
       * the user is using mouse input again. `mousemove` can fire on touch devices as
       * well, but very rarely that quickly.
       */

      function onDocumentMouseMove() {
        var now = performance.now();

        if (now - lastMouseMoveTime < 20) {
          currentInput.isTouch = false;
          document.removeEventListener("mousemove", onDocumentMouseMove);
        }

        lastMouseMoveTime = now;
      }
      /**
       * When an element is in focus and has a tippy, leaving the tab/window and
       * returning causes it to show again. For mouse users this is unexpected, but
       * for keyboard use it makes sense.
       * TODO: find a better technique to solve this problem
       */

      function onWindowBlur() {
        var activeElement = document.activeElement;

        if (isReferenceElement(activeElement)) {
          var instance = activeElement._tippy;

          if (activeElement.blur && !instance.state.isVisible) {
            activeElement.blur();
          }
        }
      }
      function bindGlobalEventListeners() {
        document.addEventListener(
          "touchstart",
          onDocumentTouchStart,
          TOUCH_OPTIONS
        );
        window.addEventListener("blur", onWindowBlur);
      }

      var isBrowser =
        typeof window !== "undefined" && typeof document !== "undefined";
      var isIE11 = isBrowser // @ts-ignore
        ? !!window.msCrypto
        : false;

      function createMemoryLeakWarning(method) {
        var txt = method === "destroy" ? "n already-" : " ";
        return [
          method +
            "() was called on a" +
            txt +
            "destroyed instance. This is a no-op but",
          "indicates a potential memory leak.",
        ].join(" ");
      }
      function clean(value) {
        var spacesAndTabs = /[ \t]{2,}/g;
        var lineStartWithSpaces = /^[ \t]*/gm;
        return value
          .replace(spacesAndTabs, " ")
          .replace(lineStartWithSpaces, "")
          .trim();
      }

      function getDevMessage(message) {
        return clean(
          "\n  %ctippy.js\n\n  %c" +
            clean(message) +
            "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  "
        );
      }

      function getFormattedMessage(message) {
        return [
          getDevMessage(message), // title
          "color: #00C584; font-size: 1.3em; font-weight: bold;", // message
          "line-height: 1.5", // footer
          "color: #a6a095;",
        ];
      } // Assume warnings and errors never have the same message

      var visitedMessages;

      if (false) {
      }

      function resetVisitedMessages() {
        visitedMessages = new Set();
      }
      function warnWhen(condition, message) {
        if (condition && !visitedMessages.has(message)) {
          var _console;

          visitedMessages.add(message);

          (_console = console).warn.apply(
            _console,
            getFormattedMessage(message)
          );
        }
      }
      function errorWhen(condition, message) {
        if (condition && !visitedMessages.has(message)) {
          var _console2;

          visitedMessages.add(message);

          (_console2 = console).error.apply(
            _console2,
            getFormattedMessage(message)
          );
        }
      }
      function validateTargets(targets) {
        var didPassFalsyValue = !targets;
        var didPassPlainObject =
          Object.prototype.toString.call(targets) === "[object Object]" &&
          !targets.addEventListener;
        errorWhen(
          didPassFalsyValue,
          [
            "tippy() was passed",
            "`" + String(targets) + "`",
            "as its targets (first) argument. Valid types are: String, Element,",
            "Element[], or NodeList.",
          ].join(" ")
        );
        errorWhen(
          didPassPlainObject,
          [
            "tippy() was passed a plain object which is not supported as an argument",
            "for virtual positioning. Use props.getReferenceClientRect instead.",
          ].join(" ")
        );
      }

      var pluginProps = {
        animateFill: false,
        followCursor: false,
        inlinePositioning: false,
        sticky: false,
      };
      var renderProps = {
        allowHTML: false,
        animation: "fade",
        arrow: true,
        content: "",
        inertia: false,
        maxWidth: 350,
        role: "tooltip",
        theme: "",
        zIndex: 9999,
      };
      var defaultProps = Object.assign(
        {
          appendTo: TIPPY_DEFAULT_APPEND_TO,
          aria: {
            content: "auto",
            expanded: "auto",
          },
          delay: 0,
          duration: [300, 250],
          getReferenceClientRect: null,
          hideOnClick: true,
          ignoreAttributes: false,
          interactive: false,
          interactiveBorder: 2,
          interactiveDebounce: 0,
          moveTransition: "",
          offset: [0, 10],
          onAfterUpdate: function onAfterUpdate() {},
          onBeforeUpdate: function onBeforeUpdate() {},
          onCreate: function onCreate() {},
          onDestroy: function onDestroy() {},
          onHidden: function onHidden() {},
          onHide: function onHide() {},
          onMount: function onMount() {},
          onShow: function onShow() {},
          onShown: function onShown() {},
          onTrigger: function onTrigger() {},
          onUntrigger: function onUntrigger() {},
          onClickOutside: function onClickOutside() {},
          placement: "top",
          plugins: [],
          popperOptions: {},
          render: null,
          showOnCreate: false,
          touch: true,
          trigger: "mouseenter focus",
          triggerTarget: null,
        },
        pluginProps,
        renderProps
      );
      var defaultKeys = Object.keys(defaultProps);
      var setDefaultProps = function setDefaultProps(partialProps) {
        /* istanbul ignore else */
        if (false) {
        }

        var keys = Object.keys(partialProps);
        keys.forEach(function (key) {
          defaultProps[key] = partialProps[key];
        });
      };
      function getExtendedPassedProps(passedProps) {
        var plugins = passedProps.plugins || [];
        var pluginProps = plugins.reduce(function (acc, plugin) {
          var name = plugin.name,
            defaultValue = plugin.defaultValue;

          if (name) {
            var _name;

            acc[name] =
              passedProps[name] !== undefined
                ? passedProps[name]
                : (_name = defaultProps[name]) != null
                ? _name
                : defaultValue;
          }

          return acc;
        }, {});
        return Object.assign({}, passedProps, pluginProps);
      }
      function getDataAttributeProps(reference, plugins) {
        var propKeys = plugins
          ? Object.keys(
              getExtendedPassedProps(
                Object.assign({}, defaultProps, {
                  plugins: plugins,
                })
              )
            )
          : defaultKeys;
        var props = propKeys.reduce(function (acc, key) {
          var valueAsString = (
            reference.getAttribute("data-tippy-" + key) || ""
          ).trim();

          if (!valueAsString) {
            return acc;
          }

          if (key === "content") {
            acc[key] = valueAsString;
          } else {
            try {
              acc[key] = JSON.parse(valueAsString);
            } catch (e) {
              acc[key] = valueAsString;
            }
          }

          return acc;
        }, {});
        return props;
      }
      function evaluateProps(reference, props) {
        var out = Object.assign(
          {},
          props,
          {
            content: invokeWithArgsOrReturn(props.content, [reference]),
          },
          props.ignoreAttributes
            ? {}
            : getDataAttributeProps(reference, props.plugins)
        );
        out.aria = Object.assign({}, defaultProps.aria, out.aria);
        out.aria = {
          expanded:
            out.aria.expanded === "auto"
              ? props.interactive
              : out.aria.expanded,
          content:
            out.aria.content === "auto"
              ? props.interactive
                ? null
                : "describedby"
              : out.aria.content,
        };
        return out;
      }
      function validateProps(partialProps, plugins) {
        if (partialProps === void 0) {
          partialProps = {};
        }

        if (plugins === void 0) {
          plugins = [];
        }

        var keys = Object.keys(partialProps);
        keys.forEach(function (prop) {
          var nonPluginProps = removeProperties(
            defaultProps,
            Object.keys(pluginProps)
          );
          var didPassUnknownProp = !tippy_esm_hasOwnProperty(
            nonPluginProps,
            prop
          ); // Check if the prop exists in `plugins`

          if (didPassUnknownProp) {
            didPassUnknownProp =
              plugins.filter(function (plugin) {
                return plugin.name === prop;
              }).length === 0;
          }

          warnWhen(
            didPassUnknownProp,
            [
              "`" + prop + "`",
              "is not a valid prop. You may have spelled it incorrectly, or if it's",
              "a plugin, forgot to pass it in an array as props.plugins.",
              "\n\n",
              "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n",
              "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/",
            ].join(" ")
          );
        });
      }

      var innerHTML = function innerHTML() {
        return "innerHTML";
      };

      function dangerouslySetInnerHTML(element, html) {
        element[innerHTML()] = html;
      }

      function createArrowElement(value) {
        var arrow = div();

        if (value === true) {
          arrow.className = ARROW_CLASS;
        } else {
          arrow.className = SVG_ARROW_CLASS;

          if (tippy_esm_isElement(value)) {
            arrow.appendChild(value);
          } else {
            dangerouslySetInnerHTML(arrow, value);
          }
        }

        return arrow;
      }

      function tippy_esm_setContent(content, props) {
        if (tippy_esm_isElement(props.content)) {
          dangerouslySetInnerHTML(content, "");
          content.appendChild(props.content);
        } else if (typeof props.content !== "function") {
          if (props.allowHTML) {
            dangerouslySetInnerHTML(content, props.content);
          } else {
            content.textContent = props.content;
          }
        }
      }
      function getChildren(popper) {
        var box = popper.firstElementChild;
        var boxChildren = arrayFrom(box.children);
        return {
          box: box,
          content: boxChildren.find(function (node) {
            return node.classList.contains(CONTENT_CLASS);
          }),
          arrow: boxChildren.find(function (node) {
            return (
              node.classList.contains(ARROW_CLASS) ||
              node.classList.contains(SVG_ARROW_CLASS)
            );
          }),
          backdrop: boxChildren.find(function (node) {
            return node.classList.contains(BACKDROP_CLASS);
          }),
        };
      }
      function tippy_esm_render(instance) {
        var popper = div();
        var box = div();
        box.className = BOX_CLASS;
        box.setAttribute("data-state", "hidden");
        box.setAttribute("tabindex", "-1");
        var content = div();
        content.className = CONTENT_CLASS;
        content.setAttribute("data-state", "hidden");
        tippy_esm_setContent(content, instance.props);
        popper.appendChild(box);
        box.appendChild(content);
        onUpdate(instance.props, instance.props);

        function onUpdate(prevProps, nextProps) {
          var _getChildren = getChildren(popper),
            box = _getChildren.box,
            content = _getChildren.content,
            arrow = _getChildren.arrow;

          if (nextProps.theme) {
            box.setAttribute("data-theme", nextProps.theme);
          } else {
            box.removeAttribute("data-theme");
          }

          if (typeof nextProps.animation === "string") {
            box.setAttribute("data-animation", nextProps.animation);
          } else {
            box.removeAttribute("data-animation");
          }

          if (nextProps.inertia) {
            box.setAttribute("data-inertia", "");
          } else {
            box.removeAttribute("data-inertia");
          }

          box.style.maxWidth =
            typeof nextProps.maxWidth === "number"
              ? nextProps.maxWidth + "px"
              : nextProps.maxWidth;

          if (nextProps.role) {
            box.setAttribute("role", nextProps.role);
          } else {
            box.removeAttribute("role");
          }

          if (
            prevProps.content !== nextProps.content ||
            prevProps.allowHTML !== nextProps.allowHTML
          ) {
            tippy_esm_setContent(content, instance.props);
          }

          if (nextProps.arrow) {
            if (!arrow) {
              box.appendChild(createArrowElement(nextProps.arrow));
            } else if (prevProps.arrow !== nextProps.arrow) {
              box.removeChild(arrow);
              box.appendChild(createArrowElement(nextProps.arrow));
            }
          } else if (arrow) {
            box.removeChild(arrow);
          }
        }

        return {
          popper: popper,
          onUpdate: onUpdate,
        };
      } // Runtime check to identify if the render function is the default one; this
      // way we can apply default CSS transitions logic and it can be tree-shaken away

      tippy_esm_render.$$tippy = true;

      var idCounter = 1;
      var mouseMoveListeners = []; // Used by `hideAll()`

      var mountedInstances = [];
      function createTippy(reference, passedProps) {
        var props = evaluateProps(
          reference,
          Object.assign(
            {},
            defaultProps,
            getExtendedPassedProps(removeUndefinedProps(passedProps))
          )
        ); // ===========================================================================
        // 🔒 Private members
        // ===========================================================================

        var showTimeout;
        var hideTimeout;
        var scheduleHideAnimationFrame;
        var isVisibleFromClick = false;
        var didHideDueToDocumentMouseDown = false;
        var didTouchMove = false;
        var ignoreOnFirstUpdate = false;
        var lastTriggerEvent;
        var currentTransitionEndListener;
        var onFirstUpdate;
        var listeners = [];
        var debouncedOnMouseMove = tippy_esm_debounce(
          onMouseMove,
          props.interactiveDebounce
        );
        var currentTarget; // ===========================================================================
        // 🔑 Public members
        // ===========================================================================

        var id = idCounter++;
        var popperInstance = null;
        var plugins = unique(props.plugins);
        var state = {
          // Is the instance currently enabled?
          isEnabled: true,
          // Is the tippy currently showing and not transitioning out?
          isVisible: false,
          // Has the instance been destroyed?
          isDestroyed: false,
          // Is the tippy currently mounted to the DOM?
          isMounted: false,
          // Has the tippy finished transitioning in?
          isShown: false,
        };
        var instance = {
          // properties
          id: id,
          reference: reference,
          popper: div(),
          popperInstance: popperInstance,
          props: props,
          state: state,
          plugins: plugins,
          // methods
          clearDelayTimeouts: clearDelayTimeouts,
          setProps: setProps,
          setContent: setContent,
          show: show,
          hide: hide,
          hideWithInteractivity: hideWithInteractivity,
          enable: enable,
          disable: disable,
          unmount: unmount,
          destroy: destroy,
        }; // TODO: Investigate why this early return causes a TDZ error in the tests —
        // it doesn't seem to happen in the browser

        /* istanbul ignore if */

        if (!props.render) {
          if (false) {
          }

          return instance;
        } // ===========================================================================
        // Initial mutations
        // ===========================================================================

        var _props$render = props.render(instance),
          popper = _props$render.popper,
          onUpdate = _props$render.onUpdate;

        popper.setAttribute("data-tippy-root", "");
        popper.id = "tippy-" + instance.id;
        instance.popper = popper;
        reference._tippy = instance;
        popper._tippy = instance;
        var pluginsHooks = plugins.map(function (plugin) {
          return plugin.fn(instance);
        });
        var hasAriaExpanded = reference.hasAttribute("aria-expanded");
        addListeners();
        handleAriaExpandedAttribute();
        handleStyles();
        invokeHook("onCreate", [instance]);

        if (props.showOnCreate) {
          scheduleShow();
        } // Prevent a tippy with a delay from hiding if the cursor left then returned
        // before it started hiding

        popper.addEventListener("mouseenter", function () {
          if (instance.props.interactive && instance.state.isVisible) {
            instance.clearDelayTimeouts();
          }
        });
        popper.addEventListener("mouseleave", function () {
          if (
            instance.props.interactive &&
            instance.props.trigger.indexOf("mouseenter") >= 0
          ) {
            getDocument().addEventListener("mousemove", debouncedOnMouseMove);
          }
        });
        return instance; // ===========================================================================
        // 🔒 Private methods
        // ===========================================================================

        function getNormalizedTouchSettings() {
          var touch = instance.props.touch;
          return Array.isArray(touch) ? touch : [touch, 0];
        }

        function getIsCustomTouchBehavior() {
          return getNormalizedTouchSettings()[0] === "hold";
        }

        function getIsDefaultRenderFn() {
          var _instance$props$rende;

          // @ts-ignore
          return !!(
            (_instance$props$rende = instance.props.render) != null &&
            _instance$props$rende.$$tippy
          );
        }

        function getCurrentTarget() {
          return currentTarget || reference;
        }

        function getDocument() {
          var parent = getCurrentTarget().parentNode;
          return parent ? getOwnerDocument(parent) : document;
        }

        function getDefaultTemplateChildren() {
          return getChildren(popper);
        }

        function getDelay(isShow) {
          // For touch or keyboard input, force `0` delay for UX reasons
          // Also if the instance is mounted but not visible (transitioning out),
          // ignore delay
          if (
            (instance.state.isMounted && !instance.state.isVisible) ||
            currentInput.isTouch ||
            (lastTriggerEvent && lastTriggerEvent.type === "focus")
          ) {
            return 0;
          }

          return getValueAtIndexOrReturn(
            instance.props.delay,
            isShow ? 0 : 1,
            defaultProps.delay
          );
        }

        function handleStyles(fromHide) {
          if (fromHide === void 0) {
            fromHide = false;
          }

          popper.style.pointerEvents =
            instance.props.interactive && !fromHide ? "" : "none";
          popper.style.zIndex = "" + instance.props.zIndex;
        }

        function invokeHook(hook, args, shouldInvokePropsHook) {
          if (shouldInvokePropsHook === void 0) {
            shouldInvokePropsHook = true;
          }

          pluginsHooks.forEach(function (pluginHooks) {
            if (pluginHooks[hook]) {
              pluginHooks[hook].apply(pluginHooks, args);
            }
          });

          if (shouldInvokePropsHook) {
            var _instance$props;

            (_instance$props = instance.props)[hook].apply(
              _instance$props,
              args
            );
          }
        }

        function handleAriaContentAttribute() {
          var aria = instance.props.aria;

          if (!aria.content) {
            return;
          }

          var attr = "aria-" + aria.content;
          var id = popper.id;
          var nodes = normalizeToArray(
            instance.props.triggerTarget || reference
          );
          nodes.forEach(function (node) {
            var currentValue = node.getAttribute(attr);

            if (instance.state.isVisible) {
              node.setAttribute(
                attr,
                currentValue ? currentValue + " " + id : id
              );
            } else {
              var nextValue =
                currentValue && currentValue.replace(id, "").trim();

              if (nextValue) {
                node.setAttribute(attr, nextValue);
              } else {
                node.removeAttribute(attr);
              }
            }
          });
        }

        function handleAriaExpandedAttribute() {
          if (hasAriaExpanded || !instance.props.aria.expanded) {
            return;
          }

          var nodes = normalizeToArray(
            instance.props.triggerTarget || reference
          );
          nodes.forEach(function (node) {
            if (instance.props.interactive) {
              node.setAttribute(
                "aria-expanded",
                instance.state.isVisible && node === getCurrentTarget()
                  ? "true"
                  : "false"
              );
            } else {
              node.removeAttribute("aria-expanded");
            }
          });
        }

        function cleanupInteractiveMouseListeners() {
          getDocument().removeEventListener("mousemove", debouncedOnMouseMove);
          mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
            return listener !== debouncedOnMouseMove;
          });
        }

        function onDocumentPress(event) {
          // Moved finger to scroll instead of an intentional tap outside
          if (currentInput.isTouch) {
            if (didTouchMove || event.type === "mousedown") {
              return;
            }
          }

          var actualTarget =
            (event.composedPath && event.composedPath()[0]) || event.target; // Clicked on interactive popper

          if (
            instance.props.interactive &&
            actualContains(popper, actualTarget)
          ) {
            return;
          } // Clicked on the event listeners target

          if (
            normalizeToArray(instance.props.triggerTarget || reference).some(
              function (el) {
                return actualContains(el, actualTarget);
              }
            )
          ) {
            if (currentInput.isTouch) {
              return;
            }

            if (
              instance.state.isVisible &&
              instance.props.trigger.indexOf("click") >= 0
            ) {
              return;
            }
          } else {
            invokeHook("onClickOutside", [instance, event]);
          }

          if (instance.props.hideOnClick === true) {
            instance.clearDelayTimeouts();
            instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
            // currentTarget. This lets a tippy with `focus` trigger know that it
            // should not show

            didHideDueToDocumentMouseDown = true;
            setTimeout(function () {
              didHideDueToDocumentMouseDown = false;
            }); // The listener gets added in `scheduleShow()`, but this may be hiding it
            // before it shows, and hide()'s early bail-out behavior can prevent it
            // from being cleaned up

            if (!instance.state.isMounted) {
              removeDocumentPress();
            }
          }
        }

        function onTouchMove() {
          didTouchMove = true;
        }

        function onTouchStart() {
          didTouchMove = false;
        }

        function addDocumentPress() {
          var doc = getDocument();
          doc.addEventListener("mousedown", onDocumentPress, true);
          doc.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
          doc.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
          doc.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
        }

        function removeDocumentPress() {
          var doc = getDocument();
          doc.removeEventListener("mousedown", onDocumentPress, true);
          doc.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
          doc.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
          doc.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
        }

        function onTransitionedOut(duration, callback) {
          onTransitionEnd(duration, function () {
            if (
              !instance.state.isVisible &&
              popper.parentNode &&
              popper.parentNode.contains(popper)
            ) {
              callback();
            }
          });
        }

        function onTransitionedIn(duration, callback) {
          onTransitionEnd(duration, callback);
        }

        function onTransitionEnd(duration, callback) {
          var box = getDefaultTemplateChildren().box;

          function listener(event) {
            if (event.target === box) {
              updateTransitionEndListener(box, "remove", listener);
              callback();
            }
          } // Make callback synchronous if duration is 0
          // `transitionend` won't fire otherwise

          if (duration === 0) {
            return callback();
          }

          updateTransitionEndListener(
            box,
            "remove",
            currentTransitionEndListener
          );
          updateTransitionEndListener(box, "add", listener);
          currentTransitionEndListener = listener;
        }

        function on(eventType, handler, options) {
          if (options === void 0) {
            options = false;
          }

          var nodes = normalizeToArray(
            instance.props.triggerTarget || reference
          );
          nodes.forEach(function (node) {
            node.addEventListener(eventType, handler, options);
            listeners.push({
              node: node,
              eventType: eventType,
              handler: handler,
              options: options,
            });
          });
        }

        function addListeners() {
          if (getIsCustomTouchBehavior()) {
            on("touchstart", onTrigger, {
              passive: true,
            });
            on("touchend", onMouseLeave, {
              passive: true,
            });
          }

          splitBySpaces(instance.props.trigger).forEach(function (eventType) {
            if (eventType === "manual") {
              return;
            }

            on(eventType, onTrigger);

            switch (eventType) {
              case "mouseenter":
                on("mouseleave", onMouseLeave);
                break;

              case "focus":
                on(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
                break;

              case "focusin":
                on("focusout", onBlurOrFocusOut);
                break;
            }
          });
        }

        function removeListeners() {
          listeners.forEach(function (_ref) {
            var node = _ref.node,
              eventType = _ref.eventType,
              handler = _ref.handler,
              options = _ref.options;
            node.removeEventListener(eventType, handler, options);
          });
          listeners = [];
        }

        function onTrigger(event) {
          var _lastTriggerEvent;

          var shouldScheduleClickHide = false;

          if (
            !instance.state.isEnabled ||
            isEventListenerStopped(event) ||
            didHideDueToDocumentMouseDown
          ) {
            return;
          }

          var wasFocused =
            ((_lastTriggerEvent = lastTriggerEvent) == null
              ? void 0
              : _lastTriggerEvent.type) === "focus";
          lastTriggerEvent = event;
          currentTarget = event.currentTarget;
          handleAriaExpandedAttribute();

          if (!instance.state.isVisible && isMouseEvent(event)) {
            // If scrolling, `mouseenter` events can be fired if the cursor lands
            // over a new target, but `mousemove` events don't get fired. This
            // causes interactive tooltips to get stuck open until the cursor is
            // moved
            mouseMoveListeners.forEach(function (listener) {
              return listener(event);
            });
          } // Toggle show/hide when clicking click-triggered tooltips

          if (
            event.type === "click" &&
            (instance.props.trigger.indexOf("mouseenter") < 0 ||
              isVisibleFromClick) &&
            instance.props.hideOnClick !== false &&
            instance.state.isVisible
          ) {
            shouldScheduleClickHide = true;
          } else {
            scheduleShow(event);
          }

          if (event.type === "click") {
            isVisibleFromClick = !shouldScheduleClickHide;
          }

          if (shouldScheduleClickHide && !wasFocused) {
            scheduleHide(event);
          }
        }

        function onMouseMove(event) {
          var target = event.target;
          var isCursorOverReferenceOrPopper =
            getCurrentTarget().contains(target) || popper.contains(target);

          if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
            return;
          }

          var popperTreeData = getNestedPopperTree()
            .concat(popper)
            .map(function (popper) {
              var _instance$popperInsta;

              var instance = popper._tippy;
              var state =
                (_instance$popperInsta = instance.popperInstance) == null
                  ? void 0
                  : _instance$popperInsta.state;

              if (state) {
                return {
                  popperRect: popper.getBoundingClientRect(),
                  popperState: state,
                  props: props,
                };
              }

              return null;
            })
            .filter(Boolean);

          if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
            cleanupInteractiveMouseListeners();
            scheduleHide(event);
          }
        }

        function onMouseLeave(event) {
          var shouldBail =
            isEventListenerStopped(event) ||
            (instance.props.trigger.indexOf("click") >= 0 &&
              isVisibleFromClick);

          if (shouldBail) {
            return;
          }

          if (instance.props.interactive) {
            instance.hideWithInteractivity(event);
            return;
          }

          scheduleHide(event);
        }

        function onBlurOrFocusOut(event) {
          if (
            instance.props.trigger.indexOf("focusin") < 0 &&
            event.target !== getCurrentTarget()
          ) {
            return;
          } // If focus was moved to within the popper

          if (
            instance.props.interactive &&
            event.relatedTarget &&
            popper.contains(event.relatedTarget)
          ) {
            return;
          }

          scheduleHide(event);
        }

        function isEventListenerStopped(event) {
          return currentInput.isTouch
            ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0
            : false;
        }

        function createPopperInstance() {
          destroyPopperInstance();
          var _instance$props2 = instance.props,
            popperOptions = _instance$props2.popperOptions,
            placement = _instance$props2.placement,
            offset = _instance$props2.offset,
            getReferenceClientRect = _instance$props2.getReferenceClientRect,
            moveTransition = _instance$props2.moveTransition;
          var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
          var computedReference = getReferenceClientRect
            ? {
                getBoundingClientRect: getReferenceClientRect,
                contextElement:
                  getReferenceClientRect.contextElement || getCurrentTarget(),
              }
            : reference;
          var tippyModifier = {
            name: "$$tippy",
            enabled: true,
            phase: "beforeWrite",
            requires: ["computeStyles"],
            fn: function fn(_ref2) {
              var state = _ref2.state;

              if (getIsDefaultRenderFn()) {
                var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                  box = _getDefaultTemplateCh.box;

                ["placement", "reference-hidden", "escaped"].forEach(function (
                  attr
                ) {
                  if (attr === "placement") {
                    box.setAttribute("data-placement", state.placement);
                  } else {
                    if (state.attributes.popper["data-popper-" + attr]) {
                      box.setAttribute("data-" + attr, "");
                    } else {
                      box.removeAttribute("data-" + attr);
                    }
                  }
                });
                state.attributes.popper = {};
              }
            },
          };
          var modifiers = [
            {
              name: "offset",
              options: {
                offset: offset,
              },
            },
            {
              name: "preventOverflow",
              options: {
                padding: {
                  top: 2,
                  bottom: 2,
                  left: 5,
                  right: 5,
                },
              },
            },
            {
              name: "flip",
              options: {
                padding: 5,
              },
            },
            {
              name: "computeStyles",
              options: {
                adaptive: !moveTransition,
              },
            },
            tippyModifier,
          ];

          if (getIsDefaultRenderFn() && arrow) {
            modifiers.push({
              name: "arrow",
              options: {
                element: arrow,
                padding: 3,
              },
            });
          }

          modifiers.push.apply(
            modifiers,
            (popperOptions == null ? void 0 : popperOptions.modifiers) || []
          );
          instance.popperInstance = popper_createPopper(
            computedReference,
            popper,
            Object.assign({}, popperOptions, {
              placement: placement,
              onFirstUpdate: onFirstUpdate,
              modifiers: modifiers,
            })
          );
        }

        function destroyPopperInstance() {
          if (instance.popperInstance) {
            instance.popperInstance.destroy();
            instance.popperInstance = null;
          }
        }

        function mount() {
          var appendTo = instance.props.appendTo;
          var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
          // it's directly after the reference element so the elements inside the
          // tippy can be tabbed to
          // If there are clipping issues, the user can specify a different appendTo
          // and ensure focus management is handled correctly manually

          var node = getCurrentTarget();

          if (
            (instance.props.interactive &&
              appendTo === TIPPY_DEFAULT_APPEND_TO) ||
            appendTo === "parent"
          ) {
            parentNode = node.parentNode;
          } else {
            parentNode = invokeWithArgsOrReturn(appendTo, [node]);
          } // The popper element needs to exist on the DOM before its position can be
          // updated as Popper needs to read its dimensions

          if (!parentNode.contains(popper)) {
            parentNode.appendChild(popper);
          }

          instance.state.isMounted = true;
          createPopperInstance();
          /* istanbul ignore else */

          if (false) {
          }
        }

        function getNestedPopperTree() {
          return arrayFrom(popper.querySelectorAll("[data-tippy-root]"));
        }

        function scheduleShow(event) {
          instance.clearDelayTimeouts();

          if (event) {
            invokeHook("onTrigger", [instance, event]);
          }

          addDocumentPress();
          var delay = getDelay(true);

          var _getNormalizedTouchSe = getNormalizedTouchSettings(),
            touchValue = _getNormalizedTouchSe[0],
            touchDelay = _getNormalizedTouchSe[1];

          if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
            delay = touchDelay;
          }

          if (delay) {
            showTimeout = setTimeout(function () {
              instance.show();
            }, delay);
          } else {
            instance.show();
          }
        }

        function scheduleHide(event) {
          instance.clearDelayTimeouts();
          invokeHook("onUntrigger", [instance, event]);

          if (!instance.state.isVisible) {
            removeDocumentPress();
            return;
          } // For interactive tippies, scheduleHide is added to a document.body handler
          // from onMouseLeave so must intercept scheduled hides from mousemove/leave
          // events when trigger contains mouseenter and click, and the tip is
          // currently shown as a result of a click.

          if (
            instance.props.trigger.indexOf("mouseenter") >= 0 &&
            instance.props.trigger.indexOf("click") >= 0 &&
            ["mouseleave", "mousemove"].indexOf(event.type) >= 0 &&
            isVisibleFromClick
          ) {
            return;
          }

          var delay = getDelay(false);

          if (delay) {
            hideTimeout = setTimeout(function () {
              if (instance.state.isVisible) {
                instance.hide();
              }
            }, delay);
          } else {
            // Fixes a `transitionend` problem when it fires 1 frame too
            // late sometimes, we don't want hide() to be called.
            scheduleHideAnimationFrame = requestAnimationFrame(function () {
              instance.hide();
            });
          }
        } // ===========================================================================
        // 🔑 Public methods
        // ===========================================================================

        function enable() {
          instance.state.isEnabled = true;
        }

        function disable() {
          // Disabling the instance should also hide it
          // https://github.com/atomiks/tippy.js-react/issues/106
          instance.hide();
          instance.state.isEnabled = false;
        }

        function clearDelayTimeouts() {
          clearTimeout(showTimeout);
          clearTimeout(hideTimeout);
          cancelAnimationFrame(scheduleHideAnimationFrame);
        }

        function setProps(partialProps) {
          /* istanbul ignore else */
          if (false) {
          }

          if (instance.state.isDestroyed) {
            return;
          }

          invokeHook("onBeforeUpdate", [instance, partialProps]);
          removeListeners();
          var prevProps = instance.props;
          var nextProps = evaluateProps(
            reference,
            Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
              ignoreAttributes: true,
            })
          );
          instance.props = nextProps;
          addListeners();

          if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
            cleanupInteractiveMouseListeners();
            debouncedOnMouseMove = tippy_esm_debounce(
              onMouseMove,
              nextProps.interactiveDebounce
            );
          } // Ensure stale aria-expanded attributes are removed

          if (prevProps.triggerTarget && !nextProps.triggerTarget) {
            normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
              node.removeAttribute("aria-expanded");
            });
          } else if (nextProps.triggerTarget) {
            reference.removeAttribute("aria-expanded");
          }

          handleAriaExpandedAttribute();
          handleStyles();

          if (onUpdate) {
            onUpdate(prevProps, nextProps);
          }

          if (instance.popperInstance) {
            createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
            // and the nested ones get re-rendered first.
            // https://github.com/atomiks/tippyjs-react/issues/177
            // TODO: find a cleaner / more efficient solution(!)

            getNestedPopperTree().forEach(function (nestedPopper) {
              // React (and other UI libs likely) requires a rAF wrapper as it flushes
              // its work in one
              requestAnimationFrame(
                nestedPopper._tippy.popperInstance.forceUpdate
              );
            });
          }

          invokeHook("onAfterUpdate", [instance, partialProps]);
        }

        function setContent(content) {
          instance.setProps({
            content: content,
          });
        }

        function show() {
          /* istanbul ignore else */
          if (false) {
          } // Early bail-out

          var isAlreadyVisible = instance.state.isVisible;
          var isDestroyed = instance.state.isDestroyed;
          var isDisabled = !instance.state.isEnabled;
          var isTouchAndTouchDisabled =
            currentInput.isTouch && !instance.props.touch;
          var duration = getValueAtIndexOrReturn(
            instance.props.duration,
            0,
            defaultProps.duration
          );

          if (
            isAlreadyVisible ||
            isDestroyed ||
            isDisabled ||
            isTouchAndTouchDisabled
          ) {
            return;
          } // Normalize `disabled` behavior across browsers.
          // Firefox allows events on disabled elements, but Chrome doesn't.
          // Using a wrapper element (i.e. <span>) is recommended.

          if (getCurrentTarget().hasAttribute("disabled")) {
            return;
          }

          invokeHook("onShow", [instance], false);

          if (instance.props.onShow(instance) === false) {
            return;
          }

          instance.state.isVisible = true;

          if (getIsDefaultRenderFn()) {
            popper.style.visibility = "visible";
          }

          handleStyles();
          addDocumentPress();

          if (!instance.state.isMounted) {
            popper.style.transition = "none";
          } // If flipping to the opposite side after hiding at least once, the
          // animation will use the wrong placement without resetting the duration

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
              box = _getDefaultTemplateCh2.box,
              content = _getDefaultTemplateCh2.content;

            setTransitionDuration([box, content], 0);
          }

          onFirstUpdate = function onFirstUpdate() {
            var _instance$popperInsta2;

            if (!instance.state.isVisible || ignoreOnFirstUpdate) {
              return;
            }

            ignoreOnFirstUpdate = true; // reflow

            void popper.offsetHeight;
            popper.style.transition = instance.props.moveTransition;

            if (getIsDefaultRenderFn() && instance.props.animation) {
              var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
                _box = _getDefaultTemplateCh3.box,
                _content = _getDefaultTemplateCh3.content;

              setTransitionDuration([_box, _content], duration);
              setVisibilityState([_box, _content], "visible");
            }

            handleAriaContentAttribute();
            handleAriaExpandedAttribute();
            pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
            // popper has been positioned for the first time

            (_instance$popperInsta2 = instance.popperInstance) == null
              ? void 0
              : _instance$popperInsta2.forceUpdate();
            invokeHook("onMount", [instance]);

            if (instance.props.animation && getIsDefaultRenderFn()) {
              onTransitionedIn(duration, function () {
                instance.state.isShown = true;
                invokeHook("onShown", [instance]);
              });
            }
          };

          mount();
        }

        function hide() {
          /* istanbul ignore else */
          if (false) {
          } // Early bail-out

          var isAlreadyHidden = !instance.state.isVisible;
          var isDestroyed = instance.state.isDestroyed;
          var isDisabled = !instance.state.isEnabled;
          var duration = getValueAtIndexOrReturn(
            instance.props.duration,
            1,
            defaultProps.duration
          );

          if (isAlreadyHidden || isDestroyed || isDisabled) {
            return;
          }

          invokeHook("onHide", [instance], false);

          if (instance.props.onHide(instance) === false) {
            return;
          }

          instance.state.isVisible = false;
          instance.state.isShown = false;
          ignoreOnFirstUpdate = false;
          isVisibleFromClick = false;

          if (getIsDefaultRenderFn()) {
            popper.style.visibility = "hidden";
          }

          cleanupInteractiveMouseListeners();
          removeDocumentPress();
          handleStyles(true);

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
              box = _getDefaultTemplateCh4.box,
              content = _getDefaultTemplateCh4.content;

            if (instance.props.animation) {
              setTransitionDuration([box, content], duration);
              setVisibilityState([box, content], "hidden");
            }
          }

          handleAriaContentAttribute();
          handleAriaExpandedAttribute();

          if (instance.props.animation) {
            if (getIsDefaultRenderFn()) {
              onTransitionedOut(duration, instance.unmount);
            }
          } else {
            instance.unmount();
          }
        }

        function hideWithInteractivity(event) {
          /* istanbul ignore else */
          if (false) {
          }

          getDocument().addEventListener("mousemove", debouncedOnMouseMove);
          pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
          debouncedOnMouseMove(event);
        }

        function unmount() {
          /* istanbul ignore else */
          if (false) {
          }

          if (instance.state.isVisible) {
            instance.hide();
          }

          if (!instance.state.isMounted) {
            return;
          }

          destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
          // tree by default. This seems mainly for interactive tippies, but we should
          // find a workaround if possible

          getNestedPopperTree().forEach(function (nestedPopper) {
            nestedPopper._tippy.unmount();
          });

          if (popper.parentNode) {
            popper.parentNode.removeChild(popper);
          }

          mountedInstances = mountedInstances.filter(function (i) {
            return i !== instance;
          });
          instance.state.isMounted = false;
          invokeHook("onHidden", [instance]);
        }

        function destroy() {
          /* istanbul ignore else */
          if (false) {
          }

          if (instance.state.isDestroyed) {
            return;
          }

          instance.clearDelayTimeouts();
          instance.unmount();
          removeListeners();
          delete reference._tippy;
          instance.state.isDestroyed = true;
          invokeHook("onDestroy", [instance]);
        }
      }

      function tippy(targets, optionalProps) {
        if (optionalProps === void 0) {
          optionalProps = {};
        }

        var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
        /* istanbul ignore else */

        if (false) {
        }

        bindGlobalEventListeners();
        var passedProps = Object.assign({}, optionalProps, {
          plugins: plugins,
        });
        var elements = getArrayOfElements(targets);
        /* istanbul ignore else */

        if (false) {
          var isMoreThanOneReferenceElement, isSingleContentElement;
        }

        var instances = elements.reduce(function (acc, reference) {
          var instance = reference && createTippy(reference, passedProps);

          if (instance) {
            acc.push(instance);
          }

          return acc;
        }, []);
        return tippy_esm_isElement(targets) ? instances[0] : instances;
      }

      tippy.defaultProps = defaultProps;
      tippy.setDefaultProps = setDefaultProps;
      tippy.currentInput = currentInput;
      var hideAll = function hideAll(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
          excludedReferenceOrInstance = _ref.exclude,
          duration = _ref.duration;

        mountedInstances.forEach(function (instance) {
          var isExcluded = false;

          if (excludedReferenceOrInstance) {
            isExcluded = isReferenceElement(excludedReferenceOrInstance)
              ? instance.reference === excludedReferenceOrInstance
              : instance.popper === excludedReferenceOrInstance.popper;
          }

          if (!isExcluded) {
            var originalDuration = instance.props.duration;
            instance.setProps({
              duration: duration,
            });
            instance.hide();

            if (!instance.state.isDestroyed) {
              instance.setProps({
                duration: originalDuration,
              });
            }
          }
        });
      };

      // every time the popper is destroyed (i.e. a new target), removing the styles
      // and causing transitions to break for singletons when the console is open, but
      // most notably for non-transform styles being used, `gpuAcceleration: false`.

      var applyStylesModifier = Object.assign({}, modifiers_applyStyles, {
        effect: function effect(_ref) {
          var state = _ref.state;
          var initialStyles = {
            popper: {
              position: state.options.strategy,
              left: "0",
              top: "0",
              margin: "0",
            },
            arrow: {
              position: "absolute",
            },
            reference: {},
          };
          Object.assign(state.elements.popper.style, initialStyles.popper);
          state.styles = initialStyles;

          if (state.elements.arrow) {
            Object.assign(state.elements.arrow.style, initialStyles.arrow);
          } // intentionally return no cleanup function
          // return () => { ... }
        },
      });

      var createSingleton = function createSingleton(
        tippyInstances,
        optionalProps
      ) {
        var _optionalProps$popper;

        if (optionalProps === void 0) {
          optionalProps = {};
        }

        /* istanbul ignore else */
        if (false) {
        }

        var individualInstances = tippyInstances;
        var references = [];
        var triggerTargets = [];
        var currentTarget;
        var overrides = optionalProps.overrides;
        var interceptSetPropsCleanups = [];
        var shownOnCreate = false;

        function setTriggerTargets() {
          triggerTargets = individualInstances
            .map(function (instance) {
              return normalizeToArray(
                instance.props.triggerTarget || instance.reference
              );
            })
            .reduce(function (acc, item) {
              return acc.concat(item);
            }, []);
        }

        function setReferences() {
          references = individualInstances.map(function (instance) {
            return instance.reference;
          });
        }

        function enableInstances(isEnabled) {
          individualInstances.forEach(function (instance) {
            if (isEnabled) {
              instance.enable();
            } else {
              instance.disable();
            }
          });
        }

        function interceptSetProps(singleton) {
          return individualInstances.map(function (instance) {
            var originalSetProps = instance.setProps;

            instance.setProps = function (props) {
              originalSetProps(props);

              if (instance.reference === currentTarget) {
                singleton.setProps(props);
              }
            };

            return function () {
              instance.setProps = originalSetProps;
            };
          });
        } // have to pass singleton, as it maybe undefined on first call

        function prepareInstance(singleton, target) {
          var index = triggerTargets.indexOf(target); // bail-out

          if (target === currentTarget) {
            return;
          }

          currentTarget = target;
          var overrideProps = (overrides || [])
            .concat("content")
            .reduce(function (acc, prop) {
              acc[prop] = individualInstances[index].props[prop];
              return acc;
            }, {});
          singleton.setProps(
            Object.assign({}, overrideProps, {
              getReferenceClientRect:
                typeof overrideProps.getReferenceClientRect === "function"
                  ? overrideProps.getReferenceClientRect
                  : function () {
                      var _references$index;

                      return (_references$index = references[index]) == null
                        ? void 0
                        : _references$index.getBoundingClientRect();
                    },
            })
          );
        }

        enableInstances(false);
        setReferences();
        setTriggerTargets();
        var plugin = {
          fn: function fn() {
            return {
              onDestroy: function onDestroy() {
                enableInstances(true);
              },
              onHidden: function onHidden() {
                currentTarget = null;
              },
              onClickOutside: function onClickOutside(instance) {
                if (instance.props.showOnCreate && !shownOnCreate) {
                  shownOnCreate = true;
                  currentTarget = null;
                }
              },
              onShow: function onShow(instance) {
                if (instance.props.showOnCreate && !shownOnCreate) {
                  shownOnCreate = true;
                  prepareInstance(instance, references[0]);
                }
              },
              onTrigger: function onTrigger(instance, event) {
                prepareInstance(instance, event.currentTarget);
              },
            };
          },
        };
        var singleton = tippy(
          div(),
          Object.assign({}, removeProperties(optionalProps, ["overrides"]), {
            plugins: [plugin].concat(optionalProps.plugins || []),
            triggerTarget: triggerTargets,
            popperOptions: Object.assign({}, optionalProps.popperOptions, {
              modifiers: [].concat(
                ((_optionalProps$popper = optionalProps.popperOptions) == null
                  ? void 0
                  : _optionalProps$popper.modifiers) || [],
                [applyStylesModifier]
              ),
            }),
          })
        );
        var originalShow = singleton.show;

        singleton.show = function (target) {
          originalShow(); // first time, showOnCreate or programmatic call with no params
          // default to showing first instance

          if (!currentTarget && target == null) {
            return prepareInstance(singleton, references[0]);
          } // triggered from event (do nothing as prepareInstance already called by onTrigger)
          // programmatic call with no params when already visible (do nothing again)

          if (currentTarget && target == null) {
            return;
          } // target is index of instance

          if (typeof target === "number") {
            return (
              references[target] &&
              prepareInstance(singleton, references[target])
            );
          } // target is a child tippy instance

          if (individualInstances.indexOf(target) >= 0) {
            var ref = target.reference;
            return prepareInstance(singleton, ref);
          } // target is a ReferenceElement

          if (references.indexOf(target) >= 0) {
            return prepareInstance(singleton, target);
          }
        };

        singleton.showNext = function () {
          var first = references[0];

          if (!currentTarget) {
            return singleton.show(0);
          }

          var index = references.indexOf(currentTarget);
          singleton.show(references[index + 1] || first);
        };

        singleton.showPrevious = function () {
          var last = references[references.length - 1];

          if (!currentTarget) {
            return singleton.show(last);
          }

          var index = references.indexOf(currentTarget);
          var target = references[index - 1] || last;
          singleton.show(target);
        };

        var originalSetProps = singleton.setProps;

        singleton.setProps = function (props) {
          overrides = props.overrides || overrides;
          originalSetProps(props);
        };

        singleton.setInstances = function (nextInstances) {
          enableInstances(true);
          interceptSetPropsCleanups.forEach(function (fn) {
            return fn();
          });
          individualInstances = nextInstances;
          enableInstances(false);
          setReferences();
          setTriggerTargets();
          interceptSetPropsCleanups = interceptSetProps(singleton);
          singleton.setProps({
            triggerTarget: triggerTargets,
          });
        };

        interceptSetPropsCleanups = interceptSetProps(singleton);
        return singleton;
      };

      var BUBBLING_EVENTS_MAP = {
        mouseover: "mouseenter",
        focusin: "focus",
        click: "click",
      };
      /**
       * Creates a delegate instance that controls the creation of tippy instances
       * for child elements (`target` CSS selector).
       */

      function delegate(targets, props) {
        /* istanbul ignore else */
        if (false) {
        }

        var listeners = [];
        var childTippyInstances = [];
        var disabled = false;
        var target = props.target;
        var nativeProps = removeProperties(props, ["target"]);
        var parentProps = Object.assign({}, nativeProps, {
          trigger: "manual",
          touch: false,
        });
        var childProps = Object.assign(
          {
            touch: defaultProps.touch,
          },
          nativeProps,
          {
            showOnCreate: true,
          }
        );
        var returnValue = tippy(targets, parentProps);
        var normalizedReturnValue = normalizeToArray(returnValue);

        function onTrigger(event) {
          if (!event.target || disabled) {
            return;
          }

          var targetNode = event.target.closest(target);

          if (!targetNode) {
            return;
          } // Get relevant trigger with fallbacks:
          // 1. Check `data-tippy-trigger` attribute on target node
          // 2. Fallback to `trigger` passed to `delegate()`
          // 3. Fallback to `defaultProps.trigger`

          var trigger =
            targetNode.getAttribute("data-tippy-trigger") ||
            props.trigger ||
            defaultProps.trigger; // @ts-ignore

          if (targetNode._tippy) {
            return;
          }

          if (
            event.type === "touchstart" &&
            typeof childProps.touch === "boolean"
          ) {
            return;
          }

          if (
            event.type !== "touchstart" &&
            trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0
          ) {
            return;
          }

          var instance = tippy(targetNode, childProps);

          if (instance) {
            childTippyInstances = childTippyInstances.concat(instance);
          }
        }

        function on(node, eventType, handler, options) {
          if (options === void 0) {
            options = false;
          }

          node.addEventListener(eventType, handler, options);
          listeners.push({
            node: node,
            eventType: eventType,
            handler: handler,
            options: options,
          });
        }

        function addEventListeners(instance) {
          var reference = instance.reference;
          on(reference, "touchstart", onTrigger, TOUCH_OPTIONS);
          on(reference, "mouseover", onTrigger);
          on(reference, "focusin", onTrigger);
          on(reference, "click", onTrigger);
        }

        function removeEventListeners() {
          listeners.forEach(function (_ref) {
            var node = _ref.node,
              eventType = _ref.eventType,
              handler = _ref.handler,
              options = _ref.options;
            node.removeEventListener(eventType, handler, options);
          });
          listeners = [];
        }

        function applyMutations(instance) {
          var originalDestroy = instance.destroy;
          var originalEnable = instance.enable;
          var originalDisable = instance.disable;

          instance.destroy = function (shouldDestroyChildInstances) {
            if (shouldDestroyChildInstances === void 0) {
              shouldDestroyChildInstances = true;
            }

            if (shouldDestroyChildInstances) {
              childTippyInstances.forEach(function (instance) {
                instance.destroy();
              });
            }

            childTippyInstances = [];
            removeEventListeners();
            originalDestroy();
          };

          instance.enable = function () {
            originalEnable();
            childTippyInstances.forEach(function (instance) {
              return instance.enable();
            });
            disabled = false;
          };

          instance.disable = function () {
            originalDisable();
            childTippyInstances.forEach(function (instance) {
              return instance.disable();
            });
            disabled = true;
          };

          addEventListeners(instance);
        }

        normalizedReturnValue.forEach(applyMutations);
        return returnValue;
      }

      var animateFill = {
        name: "animateFill",
        defaultValue: false,
        fn: function fn(instance) {
          var _instance$props$rende;

          // @ts-ignore
          if (
            !(
              (_instance$props$rende = instance.props.render) != null &&
              _instance$props$rende.$$tippy
            )
          ) {
            if (false) {
            }

            return {};
          }

          var _getChildren = getChildren(instance.popper),
            box = _getChildren.box,
            content = _getChildren.content;

          var backdrop = instance.props.animateFill
            ? createBackdropElement()
            : null;
          return {
            onCreate: function onCreate() {
              if (backdrop) {
                box.insertBefore(backdrop, box.firstElementChild);
                box.setAttribute("data-animatefill", "");
                box.style.overflow = "hidden";
                instance.setProps({
                  arrow: false,
                  animation: "shift-away",
                });
              }
            },
            onMount: function onMount() {
              if (backdrop) {
                var transitionDuration = box.style.transitionDuration;
                var duration = Number(transitionDuration.replace("ms", "")); // The content should fade in after the backdrop has mostly filled the
                // tooltip element. `clip-path` is the other alternative but is not
                // well-supported and is buggy on some devices.

                content.style.transitionDelay =
                  Math.round(duration / 10) + "ms";
                backdrop.style.transitionDuration = transitionDuration;
                setVisibilityState([backdrop], "visible");
              }
            },
            onShow: function onShow() {
              if (backdrop) {
                backdrop.style.transitionDuration = "0ms";
              }
            },
            onHide: function onHide() {
              if (backdrop) {
                setVisibilityState([backdrop], "hidden");
              }
            },
          };
        },
      };

      function createBackdropElement() {
        var backdrop = div();
        backdrop.className = BACKDROP_CLASS;
        setVisibilityState([backdrop], "hidden");
        return backdrop;
      }

      var mouseCoords = {
        clientX: 0,
        clientY: 0,
      };
      var activeInstances = [];

      function storeMouseCoords(_ref) {
        var clientX = _ref.clientX,
          clientY = _ref.clientY;
        mouseCoords = {
          clientX: clientX,
          clientY: clientY,
        };
      }

      function addMouseCoordsListener(doc) {
        doc.addEventListener("mousemove", storeMouseCoords);
      }

      function removeMouseCoordsListener(doc) {
        doc.removeEventListener("mousemove", storeMouseCoords);
      }

      var followCursor = {
        name: "followCursor",
        defaultValue: false,
        fn: function fn(instance) {
          var reference = instance.reference;
          var doc = getOwnerDocument(instance.props.triggerTarget || reference);
          var isInternalUpdate = false;
          var wasFocusEvent = false;
          var isUnmounted = true;
          var prevProps = instance.props;

          function getIsInitialBehavior() {
            return (
              instance.props.followCursor === "initial" &&
              instance.state.isVisible
            );
          }

          function addListener() {
            doc.addEventListener("mousemove", onMouseMove);
          }

          function removeListener() {
            doc.removeEventListener("mousemove", onMouseMove);
          }

          function unsetGetReferenceClientRect() {
            isInternalUpdate = true;
            instance.setProps({
              getReferenceClientRect: null,
            });
            isInternalUpdate = false;
          }

          function onMouseMove(event) {
            // If the instance is interactive, avoid updating the position unless it's
            // over the reference element
            var isCursorOverReference = event.target
              ? reference.contains(event.target)
              : true;
            var followCursor = instance.props.followCursor;
            var clientX = event.clientX,
              clientY = event.clientY;
            var rect = reference.getBoundingClientRect();
            var relativeX = clientX - rect.left;
            var relativeY = clientY - rect.top;

            if (isCursorOverReference || !instance.props.interactive) {
              instance.setProps({
                // @ts-ignore - unneeded DOMRect properties
                getReferenceClientRect: function getReferenceClientRect() {
                  var rect = reference.getBoundingClientRect();
                  var x = clientX;
                  var y = clientY;

                  if (followCursor === "initial") {
                    x = rect.left + relativeX;
                    y = rect.top + relativeY;
                  }

                  var top = followCursor === "horizontal" ? rect.top : y;
                  var right = followCursor === "vertical" ? rect.right : x;
                  var bottom = followCursor === "horizontal" ? rect.bottom : y;
                  var left = followCursor === "vertical" ? rect.left : x;
                  return {
                    width: right - left,
                    height: bottom - top,
                    top: top,
                    right: right,
                    bottom: bottom,
                    left: left,
                  };
                },
              });
            }
          }

          function create() {
            if (instance.props.followCursor) {
              activeInstances.push({
                instance: instance,
                doc: doc,
              });
              addMouseCoordsListener(doc);
            }
          }

          function destroy() {
            activeInstances = activeInstances.filter(function (data) {
              return data.instance !== instance;
            });

            if (
              activeInstances.filter(function (data) {
                return data.doc === doc;
              }).length === 0
            ) {
              removeMouseCoordsListener(doc);
            }
          }

          return {
            onCreate: create,
            onDestroy: destroy,
            onBeforeUpdate: function onBeforeUpdate() {
              prevProps = instance.props;
            },
            onAfterUpdate: function onAfterUpdate(_, _ref2) {
              var followCursor = _ref2.followCursor;

              if (isInternalUpdate) {
                return;
              }

              if (
                followCursor !== undefined &&
                prevProps.followCursor !== followCursor
              ) {
                destroy();

                if (followCursor) {
                  create();

                  if (
                    instance.state.isMounted &&
                    !wasFocusEvent &&
                    !getIsInitialBehavior()
                  ) {
                    addListener();
                  }
                } else {
                  removeListener();
                  unsetGetReferenceClientRect();
                }
              }
            },
            onMount: function onMount() {
              if (instance.props.followCursor && !wasFocusEvent) {
                if (isUnmounted) {
                  onMouseMove(mouseCoords);
                  isUnmounted = false;
                }

                if (!getIsInitialBehavior()) {
                  addListener();
                }
              }
            },
            onTrigger: function onTrigger(_, event) {
              if (isMouseEvent(event)) {
                mouseCoords = {
                  clientX: event.clientX,
                  clientY: event.clientY,
                };
              }

              wasFocusEvent = event.type === "focus";
            },
            onHidden: function onHidden() {
              if (instance.props.followCursor) {
                unsetGetReferenceClientRect();
                removeListener();
                isUnmounted = true;
              }
            },
          };
        },
      };

      function getProps(props, modifier) {
        var _props$popperOptions;

        return {
          popperOptions: Object.assign({}, props.popperOptions, {
            modifiers: [].concat(
              (
                ((_props$popperOptions = props.popperOptions) == null
                  ? void 0
                  : _props$popperOptions.modifiers) || []
              ).filter(function (_ref) {
                var name = _ref.name;
                return name !== modifier.name;
              }),
              [modifier]
            ),
          }),
        };
      }

      var inlinePositioning = {
        name: "inlinePositioning",
        defaultValue: false,
        fn: function fn(instance) {
          var reference = instance.reference;

          function isEnabled() {
            return !!instance.props.inlinePositioning;
          }

          var placement;
          var cursorRectIndex = -1;
          var isInternalUpdate = false;
          var triedPlacements = [];
          var modifier = {
            name: "tippyInlinePositioning",
            enabled: true,
            phase: "afterWrite",
            fn: function fn(_ref2) {
              var state = _ref2.state;

              if (isEnabled()) {
                if (triedPlacements.indexOf(state.placement) !== -1) {
                  triedPlacements = [];
                }

                if (
                  placement !== state.placement &&
                  triedPlacements.indexOf(state.placement) === -1
                ) {
                  triedPlacements.push(state.placement);
                  instance.setProps({
                    // @ts-ignore - unneeded DOMRect properties
                    getReferenceClientRect: function getReferenceClientRect() {
                      return _getReferenceClientRect(state.placement);
                    },
                  });
                }

                placement = state.placement;
              }
            },
          };

          function _getReferenceClientRect(placement) {
            return getInlineBoundingClientRect(
              tippy_esm_getBasePlacement(placement),
              reference.getBoundingClientRect(),
              arrayFrom(reference.getClientRects()),
              cursorRectIndex
            );
          }

          function setInternalProps(partialProps) {
            isInternalUpdate = true;
            instance.setProps(partialProps);
            isInternalUpdate = false;
          }

          function addModifier() {
            if (!isInternalUpdate) {
              setInternalProps(getProps(instance.props, modifier));
            }
          }

          return {
            onCreate: addModifier,
            onAfterUpdate: addModifier,
            onTrigger: function onTrigger(_, event) {
              if (isMouseEvent(event)) {
                var rects = arrayFrom(instance.reference.getClientRects());
                var cursorRect = rects.find(function (rect) {
                  return (
                    rect.left - 2 <= event.clientX &&
                    rect.right + 2 >= event.clientX &&
                    rect.top - 2 <= event.clientY &&
                    rect.bottom + 2 >= event.clientY
                  );
                });
                var index = rects.indexOf(cursorRect);
                cursorRectIndex = index > -1 ? index : cursorRectIndex;
              }
            },
            onHidden: function onHidden() {
              cursorRectIndex = -1;
            },
          };
        },
      };
      function getInlineBoundingClientRect(
        currentBasePlacement,
        boundingRect,
        clientRects,
        cursorRectIndex
      ) {
        // Not an inline element, or placement is not yet known
        if (clientRects.length < 2 || currentBasePlacement === null) {
          return boundingRect;
        } // There are two rects and they are disjoined

        if (
          clientRects.length === 2 &&
          cursorRectIndex >= 0 &&
          clientRects[0].left > clientRects[1].right
        ) {
          return clientRects[cursorRectIndex] || boundingRect;
        }

        switch (currentBasePlacement) {
          case "top":
          case "bottom": {
            var firstRect = clientRects[0];
            var lastRect = clientRects[clientRects.length - 1];
            var isTop = currentBasePlacement === "top";
            var top = firstRect.top;
            var bottom = lastRect.bottom;
            var left = isTop ? firstRect.left : lastRect.left;
            var right = isTop ? firstRect.right : lastRect.right;
            var width = right - left;
            var height = bottom - top;
            return {
              top: top,
              bottom: bottom,
              left: left,
              right: right,
              width: width,
              height: height,
            };
          }

          case "left":
          case "right": {
            var minLeft = Math.min.apply(
              Math,
              clientRects.map(function (rects) {
                return rects.left;
              })
            );
            var maxRight = Math.max.apply(
              Math,
              clientRects.map(function (rects) {
                return rects.right;
              })
            );
            var measureRects = clientRects.filter(function (rect) {
              return currentBasePlacement === "left"
                ? rect.left === minLeft
                : rect.right === maxRight;
            });
            var _top = measureRects[0].top;
            var _bottom = measureRects[measureRects.length - 1].bottom;
            var _left = minLeft;
            var _right = maxRight;

            var _width = _right - _left;

            var _height = _bottom - _top;

            return {
              top: _top,
              bottom: _bottom,
              left: _left,
              right: _right,
              width: _width,
              height: _height,
            };
          }

          default: {
            return boundingRect;
          }
        }
      }

      var sticky = {
        name: "sticky",
        defaultValue: false,
        fn: function fn(instance) {
          var reference = instance.reference,
            popper = instance.popper;

          function getReference() {
            return instance.popperInstance
              ? instance.popperInstance.state.elements.reference
              : reference;
          }

          function shouldCheck(value) {
            return (
              instance.props.sticky === true || instance.props.sticky === value
            );
          }

          var prevRefRect = null;
          var prevPopRect = null;

          function updatePosition() {
            var currentRefRect = shouldCheck("reference")
              ? getReference().getBoundingClientRect()
              : null;
            var currentPopRect = shouldCheck("popper")
              ? popper.getBoundingClientRect()
              : null;

            if (
              (currentRefRect &&
                areRectsDifferent(prevRefRect, currentRefRect)) ||
              (currentPopRect && areRectsDifferent(prevPopRect, currentPopRect))
            ) {
              if (instance.popperInstance) {
                instance.popperInstance.update();
              }
            }

            prevRefRect = currentRefRect;
            prevPopRect = currentPopRect;

            if (instance.state.isMounted) {
              requestAnimationFrame(updatePosition);
            }
          }

          return {
            onMount: function onMount() {
              if (instance.props.sticky) {
                updatePosition();
              }
            },
          };
        },
      };

      function areRectsDifferent(rectA, rectB) {
        if (rectA && rectB) {
          return (
            rectA.top !== rectB.top ||
            rectA.right !== rectB.right ||
            rectA.bottom !== rectB.bottom ||
            rectA.left !== rectB.left
          );
        }

        return true;
      }

      tippy.setDefaultProps({
        render: tippy_esm_render,
      });

      /* harmony default export */ var tippy_esm = tippy;

      //# sourceMappingURL=tippy.esm.js.map

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Diagram.vue?vue&type=script&lang=ts&
      function Diagramvue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (Diagramvue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          Diagramvue_type_script_lang_ts_typeof(obj)
        );
      }

      function Diagramvue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Diagramvue_type_script_lang_ts_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Diagramvue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          Diagramvue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          Diagramvue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function Diagramvue_type_script_lang_ts_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass)
          Diagramvue_type_script_lang_ts_setPrototypeOf(subClass, superClass);
      }

      function Diagramvue_type_script_lang_ts_setPrototypeOf(o, p) {
        Diagramvue_type_script_lang_ts_setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return Diagramvue_type_script_lang_ts_setPrototypeOf(o, p);
      }

      function Diagramvue_type_script_lang_ts_createSuper(Derived) {
        var hasNativeReflectConstruct = Diagramvue_type_script_lang_ts_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = Diagramvue_type_script_lang_ts_getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = Diagramvue_type_script_lang_ts_getPrototypeOf(this)
              .constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return Diagramvue_type_script_lang_ts_possibleConstructorReturn(
            this,
            result
          );
        };
      }

      function Diagramvue_type_script_lang_ts_possibleConstructorReturn(
        self,
        call
      ) {
        if (
          call &&
          (Diagramvue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return Diagramvue_type_script_lang_ts_assertThisInitialized(self);
      }

      function Diagramvue_type_script_lang_ts_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function Diagramvue_type_script_lang_ts_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function Diagramvue_type_script_lang_ts_getPrototypeOf(o) {
        Diagramvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return Diagramvue_type_script_lang_ts_getPrototypeOf(o);
      }

      var Diagramvue_type_script_lang_ts_Diagram = /*#__PURE__*/ (function (
        _Vue
      ) {
        Diagramvue_type_script_lang_ts_inherits(Diagram, _Vue);

        var _super = Diagramvue_type_script_lang_ts_createSuper(Diagram);

        function Diagram() {
          var _this;

          Diagramvue_type_script_lang_ts_classCallCheck(this, Diagram);

          _this = _super.apply(this, arguments);
          _this.selected = null; // The main plan + init plans (all flatten)

          _this.plans = [[]];
          _this.lodash = lodash;
          _this.nodeProps = NodeProp;
          _this.metrics = Metric;
          _this.bufferLocations = BufferLocation;
          _this.estimateDirections = EstimateDirection;
          _this.centerModes = CenterMode;
          _this.highlightModes = HighlightMode;
          _this.highlightedNode = null;
          _this.tippyInstances = [];
          _this.viewOptions = {
            metric: Metric.time,
            buffersMetric: BufferLocation.shared,
          };
          return _this;
        }

        Diagramvue_type_script_lang_ts_createClass(Diagram, [
          {
            key: "created",
            value: function created() {
              var _this2 = this;

              var savedOptions = localStorage.getItem("diagramViewOptions");

              if (savedOptions) {
                lodash["assignIn"](this.viewOptions, JSON.parse(savedOptions));
              }

              this.flatten(this.plans[0], 0, this.plan.content.Plan, true, []);

              lodash["each"](this.plan.ctes, function (cte) {
                var flat = [];

                _this2.flatten(flat, 0, cte, true, []);

                _this2.plans.push(flat);
              });

              this.eventBus.$on("mouseovernode", function (node) {
                _this2.highlightedNode = node;
              });
              this.eventBus.$on("mouseoutnode", function () {
                _this2.highlightedNode = null;
              }); // switch to the first buffers tab if data not available for the currently
              // chosen one

              var planBufferLocations = lodash["keys"](
                this.plan.planStats.maxBlocks
              );

              if (
                lodash["indexOf"](
                  planBufferLocations,
                  this.viewOptions.buffersMetric
                ) === -1
              ) {
                this.viewOptions.buffersMetric = lodash["min"](
                  planBufferLocations
                );
              }
            },
          },
          {
            key: "mounted",
            value: function mounted() {
              this.loadTooltips();
            },
          },
          {
            key: "onViewOptionsChanged",
            value: function onViewOptionsChanged(val, oldVal) {
              localStorage.setItem(
                "diagramViewOptions",
                JSON.stringify(this.viewOptions)
              );
              external_commonjs_vue_commonjs2_vue_root_Vue_default.a.nextTick(
                this.loadTooltips
              );
            },
          },
          {
            key: "loadTooltips",
            value: function loadTooltips() {
              if (this.tippySingleton) {
                this.tippySingleton.destroy();
              }

              lodash["each"](this.tippyInstances, function (instance) {
                instance.destroy();
              });

              this.tippyInstances = tippy_esm(".diagram tr.node");
              this.tippySingleton = createSingleton(this.tippyInstances, {
                delay: 100,
                allowHTML: true,
              });
            },
          },
          {
            key: "getTooltipContent",
            value: function getTooltipContent(node) {
              var content = "";

              switch (this.viewOptions.metric) {
                case Metric.time:
                  content += this.timeTooltip(node);
                  break;

                case Metric.rows:
                  content += this.rowsTooltip(node);
                  break;

                case Metric.estimate_factor:
                  content += this.estimateFactorTooltip(node);
                  break;

                case Metric.cost:
                  content += this.costTooltip(node);
                  break;

                case Metric.buffers:
                  content += this.buffersTooltip(node);
                  break;
              }

              if (node[NodeProp.CTE_NAME]) {
                content += "<br><em>CTE " + node[NodeProp.CTE_NAME] + "</em>";
              }

              return content;
            },
          },
          {
            key: "timeTooltip",
            value: function timeTooltip(node) {
              return [
                "Duration: <br>Exclusive: ",
                filters_duration(node[NodeProp.EXCLUSIVE_DURATION]),
                ", Total: ",
                filters_duration(node[NodeProp.ACTUAL_TOTAL_TIME]),
              ].join("");
            },
          },
          {
            key: "rowsTooltip",
            value: function rowsTooltip(node) {
              return ["Rows: ", rows(node[NodeProp.ACTUAL_ROWS_REVISED])].join(
                ""
              );
            },
          },
          {
            key: "estimateFactorTooltip",
            value: function estimateFactorTooltip(node) {
              var estimateFactor = node[NodeProp.PLANNER_ESTIMATE_FACTOR];
              var estimateDirection = node[NodeProp.PLANNER_ESTIMATE_DIRECTION];
              var text = "";

              if (
                estimateFactor === undefined ||
                estimateDirection === undefined
              ) {
                return "N/A";
              }

              switch (estimateDirection) {
                case EstimateDirection.over:
                  text += '<i class="fa fa-arrow-up"></i> over';
                  break;

                case EstimateDirection.under:
                  text += '<i class="fa fa-arrow-down"></i> under';
                  break;

                default:
                  text += "Correctly";
              }

              text += " estimated";
              text +=
                estimateFactor !== 1
                  ? " by <b>" + factor(estimateFactor) + "</b>"
                  : "";
              text += "<br>";
              text += "Planned: " + node[NodeProp.PLAN_ROWS_REVISED];
              text += " 🡒 Actual: " + node[NodeProp.ACTUAL_ROWS_REVISED];
              return text;
            },
          },
          {
            key: "costTooltip",
            value: function costTooltip(node) {
              return ["Cost: ", rows(node[NodeProp.EXCLUSIVE_COST])].join("");
            },
          },
          {
            key: "buffersTooltip",
            value: function buffersTooltip(node) {
              var text = "";
              var hit;
              var read;
              var written;
              var dirtied;

              switch (this.viewOptions.buffersMetric) {
                case BufferLocation.shared:
                  hit = node[NodeProp.EXCLUSIVE_SHARED_HIT_BLOCKS];
                  read = node[NodeProp.EXCLUSIVE_SHARED_READ_BLOCKS];
                  dirtied = node[NodeProp.EXCLUSIVE_SHARED_DIRTIED_BLOCKS];
                  written = node[NodeProp.EXCLUSIVE_SHARED_WRITTEN_BLOCKS];
                  break;

                case BufferLocation.temp:
                  read = node[NodeProp.EXCLUSIVE_TEMP_READ_BLOCKS];
                  written = node[NodeProp.EXCLUSIVE_TEMP_WRITTEN_BLOCKS];
                  break;

                case BufferLocation.local:
                  hit = node[NodeProp.EXCLUSIVE_LOCAL_HIT_BLOCKS];
                  read = node[NodeProp.EXCLUSIVE_LOCAL_READ_BLOCKS];
                  dirtied = node[NodeProp.EXCLUSIVE_LOCAL_DIRTIED_BLOCKS];
                  written = node[NodeProp.EXCLUSIVE_LOCAL_WRITTEN_BLOCKS];
                  break;
              }

              text +=
                '<table class="table text-white table-sm table-borderless mb-0">';
              text += hit
                ? '<tr><td>Hit:</td><td class="text-right">' +
                  blocks(hit) +
                  "</td></tr>"
                : "";
              text += read
                ? '<tr><td>Read:</td><td class="text-right">' +
                  blocks(read) +
                  "</td></tr>"
                : "";
              text += dirtied
                ? '<tr><td>Dirtied:</td><td class="text-right">' +
                  blocks(dirtied) +
                  "</td></tr>"
                : "";
              text += written
                ? '<tr><td>Written:</td><td class="text-right">' +
                  blocks(written) +
                  "</td></tr>"
                : "";
              text += "</table>";

              if (!hit && !read && !dirtied && !written) {
                text = " N/A";
              }

              switch (this.viewOptions.buffersMetric) {
                case BufferLocation.shared:
                  text = "Shared Blocks:" + text;
                  break;

                case BufferLocation.temp:
                  text = "Temp Blocks:" + text;
                  break;

                case BufferLocation.local:
                  text = "Local Blocks:" + text;
                  break;
              }

              return text;
            },
          },
          {
            key: "nodeType",
            value: function nodeType(row) {
              return row[1][NodeProp.NODE_TYPE];
            },
          },
          {
            key: "flatten",
            value: function flatten(output, level, node, isLast, branches) {
              var _this3 = this;

              // [level, node, isLastSibbling, branches]
              output.push([
                level,
                node,
                isLast,
                lodash["concat"]([], branches),
              ]);

              if (!isLast) {
                branches.push(level);
              }

              lodash["each"](node.Plans, function (subnode) {
                _this3.flatten(
                  output,
                  level + 1,
                  subnode,
                  subnode === lodash["last"](node.Plans),
                  branches
                );
              });

              if (!isLast) {
                branches.pop();
              }
            },
          },
          {
            key: "estimateFactorPercent",
            value: function estimateFactorPercent(row) {
              var node = row[1];

              if (node[NodeProp.PLANNER_ESTIMATE_FACTOR] === Infinity) {
                return 100;
              }

              return (
                ((node[NodeProp.PLANNER_ESTIMATE_FACTOR] || 0) /
                  this.maxEstimateFactor) *
                100
              );
            },
          },
          {
            key: "maxEstimateFactor",
            get: function get() {
              var max = lodash["max"](
                lodash["map"](this.plans, function (plan) {
                  return lodash["max"](
                    lodash["map"](plan, function (row) {
                      var f = row[1][NodeProp.PLANNER_ESTIMATE_FACTOR];

                      if (f !== Infinity) {
                        return f;
                      }
                    })
                  );
                })
              );

              return max * 2 || 1;
            },
          },
          {
            key: "dataAvailable",
            get: function get() {
              if (this.viewOptions.metric === this.metrics.buffers) {
                // if current metrics is buffers, view options for buffers should be
                // undefined if there's no buffer data
                return this.viewOptions.buffersMetric;
              }

              return true;
            },
          },
          {
            key: "isCTE",
            value: function isCTE(node) {
              return lodash["startsWith"](node[NodeProp.SUBPLAN_NAME], "CTE");
            },
          },
          {
            key: "onSelectedNodeChange",
            value: function onSelectedNodeChange(newVal) {
              var el = this.$refs["node_" + newVal][0];
              var parent = this.$refs.container;
              scrollChildIntoParentView(parent, el, false);
            },
          },
        ]);

        return Diagram;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop()],
        Diagramvue_type_script_lang_ts_Diagram.prototype,
        "plan",
        void 0
      );

      __decorate(
        [Prop()],
        Diagramvue_type_script_lang_ts_Diagram.prototype,
        "eventBus",
        void 0
      );

      __decorate(
        [
          Watch("viewOptions", {
            deep: true,
          }),
        ],
        Diagramvue_type_script_lang_ts_Diagram.prototype,
        "onViewOptionsChanged",
        null
      );

      __decorate(
        [Watch("selected")],
        Diagramvue_type_script_lang_ts_Diagram.prototype,
        "onSelectedNodeChange",
        null
      );

      Diagramvue_type_script_lang_ts_Diagram = __decorate(
        [
          vue_class_component_esm({
            filters: {
              durationClass: durationClass,
            },
          }),
        ],
        Diagramvue_type_script_lang_ts_Diagram
      );
      /* harmony default export */ var Diagramvue_type_script_lang_ts_ = Diagramvue_type_script_lang_ts_Diagram;
      // CONCATENATED MODULE: ./src/components/Diagram.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_Diagramvue_type_script_lang_ts_ = Diagramvue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./src/components/Diagram.vue

      /* normalize component */

      var Diagram_component = normalizeComponent(
        components_Diagramvue_type_script_lang_ts_,
        Diagramvue_type_template_id_17c767c6_render,
        Diagramvue_type_template_id_17c767c6_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_Diagram =
        Diagram_component.exports;
      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Stats.vue?vue&type=template&id=63899183&
      var Statsvue_type_template_id_63899183_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { staticClass: "p-2 small stats" },
          [
            _c("h6", { staticClass: "mt-2" }, [_vm._v("Per table stats")]),
            _vm._v(" "),
            _c(
              "sorted-table",
              {
                ref: "table",
                staticClass:
                  "table table-nonfluid table-sm table-bordered align-top",
                attrs: {
                  values: _vm.perTable,
                  ascIcon: "<span> ▲</span>",
                  descIcon: "<span> ▼</span>",
                  sort: "time",
                  dir: "desc",
                },
                scopedSlots: _vm._u([
                  {
                    key: "body",
                    fn: function (sort) {
                      return [
                        _vm._l(sort.values, function (value) {
                          return [
                            _c("stats-table-item", {
                              attrs: {
                                value: value,
                                executionTime: _vm.executionTime,
                              },
                            }),
                          ];
                        }),
                      ];
                    },
                  },
                ]),
              },
              [
                _c("thead", { staticClass: "thead-dark" }, [
                  _c("tr", [
                    _c(
                      "th",
                      { attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "name" },
                          },
                          [_vm._v("Table")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      { staticClass: "text-right", attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "count" },
                          },
                          [_vm._v("Count")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      {
                        staticClass: "text-right",
                        attrs: { scope: "col", colspan: "2" },
                      },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "time" },
                          },
                          [_vm._v("Time")]
                        ),
                      ],
                      1
                    ),
                  ]),
                ]),
                _vm._v(" "),
                _vm._v(" "),
                !_vm.perTable.length
                  ? _c("tbody", [
                      _c("tr", [
                        _c(
                          "td",
                          {
                            staticClass: "text-center font-italic",
                            attrs: { colspan: "3" },
                          },
                          [_vm._v("No tables used")]
                        ),
                      ]),
                    ])
                  : _vm._e(),
              ]
            ),
            _vm._v(" "),
            _c("h6", [_vm._v("Per node type stats")]),
            _vm._v(" "),
            _c(
              "sorted-table",
              {
                staticClass:
                  "table table-nonfluid table-sm table-bordered align-top",
                attrs: {
                  values: _vm.perNodeType,
                  ascIcon: "<span> ▲</span>",
                  descIcon: "<span> ▼</span>",
                  sort: "time",
                  dir: "desc",
                },
                scopedSlots: _vm._u([
                  {
                    key: "body",
                    fn: function (sort) {
                      return [
                        _vm._l(sort.values, function (value) {
                          return [
                            _c("stats-table-item", {
                              attrs: {
                                value: value,
                                executionTime: _vm.executionTime,
                              },
                            }),
                          ];
                        }),
                      ];
                    },
                  },
                ]),
              },
              [
                _c("thead", { staticClass: "thead-dark" }, [
                  _c("tr", [
                    _c(
                      "th",
                      { attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "name" },
                          },
                          [_vm._v("Node Type")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      { staticClass: "text-right", attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "count" },
                          },
                          [_vm._v("Count")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      {
                        staticClass: "text-right",
                        attrs: { scope: "col", colspan: "2" },
                      },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "time" },
                          },
                          [_vm._v("Time")]
                        ),
                      ],
                      1
                    ),
                  ]),
                ]),
              ]
            ),
            _vm._v(" "),
            _c("h6", [_vm._v("Per index stats")]),
            _vm._v(" "),
            _c(
              "sorted-table",
              {
                staticClass:
                  "table table-nonfluid table-sm table-bordered align-top",
                attrs: {
                  values: _vm.perIndex,
                  ascIcon: "<span> ▲</span>",
                  descIcon: "<span> ▼</span>",
                  sort: "time",
                  dir: "desc",
                },
                scopedSlots: _vm._u([
                  {
                    key: "body",
                    fn: function (sort) {
                      return [
                        _vm._l(sort.values, function (value) {
                          return [
                            _c("stats-table-item", {
                              attrs: {
                                value: value,
                                executionTime: _vm.executionTime,
                              },
                            }),
                          ];
                        }),
                      ];
                    },
                  },
                ]),
              },
              [
                _c("thead", { staticClass: "thead-dark" }, [
                  _c("tr", [
                    _c(
                      "th",
                      { attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "name" },
                          },
                          [_vm._v("Index Name")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      { staticClass: "text-right", attrs: { scope: "col" } },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "count" },
                          },
                          [_vm._v("Count")]
                        ),
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "th",
                      {
                        staticClass: "text-right",
                        attrs: { scope: "col", colspan: "2" },
                      },
                      [
                        _c(
                          "sort-link",
                          {
                            staticClass: "text-white",
                            attrs: { name: "time" },
                          },
                          [_vm._v("Time")]
                        ),
                      ],
                      1
                    ),
                  ]),
                ]),
                _vm._v(" "),
                _vm._v(" "),
                !_vm.perIndex.length
                  ? _c("tbody", [
                      _c("tr", [
                        _c(
                          "td",
                          {
                            staticClass: "text-center font-italic",
                            attrs: { colspan: "3" },
                          },
                          [_vm._v("No index used")]
                        ),
                      ]),
                    ])
                  : _vm._e(),
              ]
            ),
          ],
          1
        );
      };
      var Statsvue_type_template_id_63899183_staticRenderFns = [];

      // CONCATENATED MODULE: ./src/components/Stats.vue?vue&type=template&id=63899183&

      // EXTERNAL MODULE: ./node_modules/vue-sorted-table/dist/vue-sorted-table.common.js
      var vue_sorted_table_common = __webpack_require__("9871");

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"7f729237-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/StatsTableItem.vue?vue&type=template&id=296620a3&
      var StatsTableItemvue_type_template_id_296620a3_render = function () {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("fragment", [
          _c("thead", { staticClass: "thead-light" }, [
            _c(
              "tr",
              {
                staticClass: "user-select-none",
                attrs: { role: "button" },
                on: {
                  click: function ($event) {
                    $event.preventDefault();
                    _vm.expanded = !_vm.expanded;
                  },
                },
              },
              [
                _c("th", [
                  _c("i", {
                    staticClass: "fa fa-fw",
                    class: {
                      "fa-chevron-right": !_vm.expanded,
                      "fa-chevron-down": _vm.expanded,
                    },
                  }),
                  _vm._v("\n        " + _vm._s(_vm.value.name) + "\n      "),
                ]),
                _vm._v(" "),
                _c("th", { staticClass: "text-right" }, [
                  _vm._v(_vm._s(_vm.value.count)),
                ]),
                _vm._v(" "),
                _c("th", { staticClass: "text-right" }, [
                  _c(
                    "span",
                    {
                      staticClass: "alert p-0 px-1",
                      class: _vm.$options.filters.durationClass(
                        _vm.value.timePercent * 100
                      ),
                    },
                    [
                      _vm._v(
                        "\n          " +
                          _vm._s(_vm._f("duration")(_vm.value.time, true)) +
                          "\n        "
                      ),
                    ]
                  ),
                ]),
                _vm._v(" "),
                _c("th", { staticClass: "text-right" }, [
                  _vm._v(_vm._s(_vm._f("percent")(_vm.value.timePercent))),
                ]),
              ]
            ),
          ]),
          _vm._v(" "),
          _c(
            "tbody",
            { class: _vm.expanded ? "" : "d-none" },
            _vm._l(
              _vm.lodash.reverse(
                _vm.lodash.sortBy(
                  _vm.value.nodes,
                  _vm.nodeProps.EXCLUSIVE_DURATION
                )
              ),
              function (node) {
                return _c("tr", { staticStyle: { "font-size": "smaller" } }, [
                  _c("td", { staticClass: "pl-3" }, [
                    _c(
                      "a",
                      {
                        staticClass: "mr-1",
                        attrs: { href: "#plan/node/" + node.nodeId },
                      },
                      [_vm._v("#" + _vm._s(node.nodeId))]
                    ),
                    _vm._v(
                      " " + _vm._s(node[_vm.nodeProps.NODE_TYPE]) + "\n      "
                    ),
                  ]),
                  _vm._v(" "),
                  _c("td", { staticClass: "text-right" }),
                  _vm._v(" "),
                  _c("td", { staticClass: "text-right" }, [
                    _c("span", { staticClass: "px-1" }, [
                      _vm._v(
                        "\n          " +
                          _vm._s(
                            _vm._f("duration")(
                              node[_vm.nodeProps.EXCLUSIVE_DURATION],
                              true
                            )
                          ) +
                          "\n        "
                      ),
                    ]),
                  ]),
                  _vm._v(" "),
                  _c("td", { staticClass: "text-right" }, [
                    _vm._v(
                      "\n        " +
                        _vm._s(_vm._f("percent")(_vm.durationPercent(node))) +
                        "\n      "
                    ),
                  ]),
                ]);
              }
            ),
            0
          ),
        ]);
      };
      var StatsTableItemvue_type_template_id_296620a3_staticRenderFns = [];

      // CONCATENATED MODULE: ./src/components/StatsTableItem.vue?vue&type=template&id=296620a3&

      // CONCATENATED MODULE: ./node_modules/vue-fragment/dist/vue-fragment.esm.js
      function vue_fragment_esm_defineProperty(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = n),
          e
        );
      }
      function vue_fragment_esm_objectSpread(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {},
            r = Object.keys(n);
          "function" == typeof Object.getOwnPropertySymbols &&
            (r = r.concat(
              Object.getOwnPropertySymbols(n).filter(function (e) {
                return Object.getOwnPropertyDescriptor(n, e).enumerable;
              })
            )),
            r.forEach(function (t) {
              vue_fragment_esm_defineProperty(e, t, n[t]);
            });
        }
        return e;
      }
      var freeze = function (e, t, n) {
          Object.defineProperty(e, t, {
            configurable: !0,
            get: function () {
              return n;
            },
            set: function (e) {
              console.warn(
                "tried to set frozen property ".concat(t, " with ").concat(e)
              );
            },
          });
        },
        vue_fragment_esm_component = {
          abstract: !0,
          name: "Fragment",
          props: {
            name: {
              type: String,
              default: function () {
                return Math.floor(Date.now() * Math.random()).toString(16);
              },
            },
            html: { type: String, default: null },
          },
          mounted: function () {
            var e = this.$el,
              t = e.parentNode;
            (e.__isFragment = !0), (e.__isMounted = !1);
            var n = document.createComment(
                "fragment#".concat(this.name, "#head")
              ),
              r = document.createComment(
                "fragment#".concat(this.name, "#tail")
              );
            (e.__head = n), (e.__tail = r);
            var o = document.createDocumentFragment();
            if (
              (o.appendChild(n),
              Array.from(e.childNodes).forEach(function (t) {
                var n = !t.hasOwnProperty("__isFragmentChild__");
                o.appendChild(t),
                  n &&
                    (freeze(t, "parentNode", e),
                    freeze(t, "__isFragmentChild__", !0));
              }),
              o.appendChild(r),
              this.html)
            ) {
              var a = document.createElement("template");
              (a.innerHTML = this.html),
                Array.from(a.content.childNodes).forEach(function (e) {
                  o.appendChild(e);
                });
            }
            var i = e.nextSibling;
            t.insertBefore(o, e, !0),
              t.removeChild(e),
              freeze(e, "parentNode", t),
              freeze(e, "nextSibling", i),
              i && freeze(i, "previousSibling", e),
              (e.__isMounted = !0);
          },
          render: function (e) {
            var t = this,
              n = this.$slots.default;
            return (
              n &&
                n.length &&
                n.forEach(function (e) {
                  return (e.data = vue_fragment_esm_objectSpread({}, e.data, {
                    attrs: vue_fragment_esm_objectSpread(
                      { fragment: t.name },
                      (e.data || {}).attrs
                    ),
                  }));
                }),
              e("div", { attrs: { fragment: this.name } }, n)
            );
          },
        };
      function ssr(e, t) {
        false && false;
      }
      var Fragment = vue_fragment_esm_component,
        SSR = ssr,
        Plugin = {
          install: function (e) {
            e.component("fragment", vue_fragment_esm_component);
          },
        },
        vue_fragment_esm_index = {
          Fragment: vue_fragment_esm_component,
          Plugin: Plugin,
          SSR: ssr,
        };
      /* harmony default export */ var vue_fragment_esm = vue_fragment_esm_index;

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/StatsTableItem.vue?vue&type=script&lang=ts&
      function StatsTableItemvue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (StatsTableItemvue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          StatsTableItemvue_type_script_lang_ts_typeof(obj)
        );
      }

      function StatsTableItemvue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function StatsTableItemvue_type_script_lang_ts_defineProperties(
        target,
        props
      ) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function StatsTableItemvue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          StatsTableItemvue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          StatsTableItemvue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function StatsTableItemvue_type_script_lang_ts_inherits(
        subClass,
        superClass
      ) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass)
          StatsTableItemvue_type_script_lang_ts_setPrototypeOf(
            subClass,
            superClass
          );
      }

      function StatsTableItemvue_type_script_lang_ts_setPrototypeOf(o, p) {
        StatsTableItemvue_type_script_lang_ts_setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return StatsTableItemvue_type_script_lang_ts_setPrototypeOf(o, p);
      }

      function StatsTableItemvue_type_script_lang_ts_createSuper(Derived) {
        var hasNativeReflectConstruct = StatsTableItemvue_type_script_lang_ts_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = StatsTableItemvue_type_script_lang_ts_getPrototypeOf(
              Derived
            ),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = StatsTableItemvue_type_script_lang_ts_getPrototypeOf(
              this
            ).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return StatsTableItemvue_type_script_lang_ts_possibleConstructorReturn(
            this,
            result
          );
        };
      }

      function StatsTableItemvue_type_script_lang_ts_possibleConstructorReturn(
        self,
        call
      ) {
        if (
          call &&
          (StatsTableItemvue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return StatsTableItemvue_type_script_lang_ts_assertThisInitialized(
          self
        );
      }

      function StatsTableItemvue_type_script_lang_ts_assertThisInitialized(
        self
      ) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function StatsTableItemvue_type_script_lang_ts_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function StatsTableItemvue_type_script_lang_ts_getPrototypeOf(o) {
        StatsTableItemvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return StatsTableItemvue_type_script_lang_ts_getPrototypeOf(o);
      }

      var StatsTableItemvue_type_script_lang_ts_StatsTableItem = /*#__PURE__*/ (function (
        _Vue
      ) {
        StatsTableItemvue_type_script_lang_ts_inherits(StatsTableItem, _Vue);

        var _super = StatsTableItemvue_type_script_lang_ts_createSuper(
          StatsTableItem
        );

        function StatsTableItem() {
          var _this;

          StatsTableItemvue_type_script_lang_ts_classCallCheck(
            this,
            StatsTableItem
          );

          _this = _super.apply(this, arguments);
          _this.expanded = false;
          _this.lodash = lodash;
          _this.nodeProps = NodeProp;
          return _this;
        }

        StatsTableItemvue_type_script_lang_ts_createClass(StatsTableItem, [
          {
            key: "durationPercent",
            value: function durationPercent(node) {
              return node[NodeProp.EXCLUSIVE_DURATION] / this.executionTime;
            },
          },
        ]);

        return StatsTableItem;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop()],
        StatsTableItemvue_type_script_lang_ts_StatsTableItem.prototype,
        "value",
        void 0
      );

      __decorate(
        [Prop()],
        StatsTableItemvue_type_script_lang_ts_StatsTableItem.prototype,
        "executionTime",
        void 0
      );

      StatsTableItemvue_type_script_lang_ts_StatsTableItem = __decorate(
        [
          vue_class_component_esm({
            filters: {
              duration: filters_duration,
              durationClass: durationClass,
              percent: percent,
            },
            components: {
              Fragment: Fragment,
            },
          }),
        ],
        StatsTableItemvue_type_script_lang_ts_StatsTableItem
      );
      /* harmony default export */ var StatsTableItemvue_type_script_lang_ts_ = StatsTableItemvue_type_script_lang_ts_StatsTableItem;
      // CONCATENATED MODULE: ./src/components/StatsTableItem.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_StatsTableItemvue_type_script_lang_ts_ = StatsTableItemvue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./src/components/StatsTableItem.vue

      /* normalize component */

      var StatsTableItem_component = normalizeComponent(
        components_StatsTableItemvue_type_script_lang_ts_,
        StatsTableItemvue_type_template_id_296620a3_render,
        StatsTableItemvue_type_template_id_296620a3_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_StatsTableItem =
        StatsTableItem_component.exports;
      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Stats.vue?vue&type=script&lang=ts&
      function Statsvue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (Statsvue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          Statsvue_type_script_lang_ts_typeof(obj)
        );
      }

      function Statsvue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Statsvue_type_script_lang_ts_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Statsvue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          Statsvue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          Statsvue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function Statsvue_type_script_lang_ts_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass)
          Statsvue_type_script_lang_ts_setPrototypeOf(subClass, superClass);
      }

      function Statsvue_type_script_lang_ts_setPrototypeOf(o, p) {
        Statsvue_type_script_lang_ts_setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return Statsvue_type_script_lang_ts_setPrototypeOf(o, p);
      }

      function Statsvue_type_script_lang_ts_createSuper(Derived) {
        var hasNativeReflectConstruct = Statsvue_type_script_lang_ts_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = Statsvue_type_script_lang_ts_getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = Statsvue_type_script_lang_ts_getPrototypeOf(this)
              .constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return Statsvue_type_script_lang_ts_possibleConstructorReturn(
            this,
            result
          );
        };
      }

      function Statsvue_type_script_lang_ts_possibleConstructorReturn(
        self,
        call
      ) {
        if (
          call &&
          (Statsvue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return Statsvue_type_script_lang_ts_assertThisInitialized(self);
      }

      function Statsvue_type_script_lang_ts_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function Statsvue_type_script_lang_ts_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function Statsvue_type_script_lang_ts_getPrototypeOf(o) {
        Statsvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return Statsvue_type_script_lang_ts_getPrototypeOf(o);
      }

      var Statsvue_type_script_lang_ts_Stats = /*#__PURE__*/ (function (_Vue) {
        Statsvue_type_script_lang_ts_inherits(Stats, _Vue);

        var _super = Statsvue_type_script_lang_ts_createSuper(Stats);

        function Stats() {
          var _this;

          Statsvue_type_script_lang_ts_classCallCheck(this, Stats);

          _this = _super.apply(this, arguments);
          _this.nodes = [];
          _this.nodeProps = NodeProp;
          _this.executionTime = 0;
          return _this;
        }

        Statsvue_type_script_lang_ts_createClass(Stats, [
          {
            key: "created",
            value: function created() {
              var _this2 = this;

              this.executionTime =
                this.plan.planStats.executionTime ||
                this.plan.content.Plan[NodeProp.ACTUAL_TOTAL_TIME];
              var root = this.plan.content.Plan;
              this.flatten(this.nodes, root);

              lodash["each"](this.plan.ctes, function (cte) {
                _this2.flatten(_this2.nodes, cte);
              });
            },
          },
          {
            key: "flatten",
            value: function flatten(output, node) {
              var _this3 = this;

              // [level, node, isLastSibbling, branches]
              output.push(node);

              lodash["each"](node.Plans, function (subnode) {
                _this3.flatten(output, subnode);
              });
            },
          },
          {
            key: "durationPercent",
            value: function durationPercent(nodes) {
              return (
                lodash["sumBy"](nodes, NodeProp.EXCLUSIVE_DURATION) /
                this.executionTime
              );
            },
          },
          {
            key: "perTable",
            get: function get() {
              var _this4 = this;

              var tables = lodash["groupBy"](
                lodash["filter"](this.nodes, function (n) {
                  return n[NodeProp.RELATION_NAME] !== undefined;
                }),
                NodeProp.RELATION_NAME
              );

              var values = [];

              lodash["each"](tables, function (nodes, tableName) {
                values.push({
                  name: tableName,
                  count: nodes.length,
                  time: lodash["sumBy"](nodes, NodeProp.EXCLUSIVE_DURATION),
                  timePercent: _this4.durationPercent(nodes),
                  nodes: nodes,
                });
              });

              return values;
            },
          },
          {
            key: "perNodeType",
            get: function get() {
              var _this5 = this;

              var nodeTypes = lodash["groupBy"](this.nodes, NodeProp.NODE_TYPE);

              var values = [];

              lodash["each"](nodeTypes, function (nodes, nodeType) {
                values.push({
                  name: nodeType,
                  count: nodes.length,
                  time: lodash["sumBy"](nodes, NodeProp.EXCLUSIVE_DURATION),
                  timePercent: _this5.durationPercent(nodes),
                  nodes: nodes,
                });
              });

              return values;
            },
          },
          {
            key: "perIndex",
            get: function get() {
              var _this6 = this;

              var indexes = lodash["groupBy"](
                lodash["filter"](this.nodes, function (n) {
                  return n[NodeProp.INDEX_NAME] !== undefined;
                }),
                NodeProp.INDEX_NAME
              );

              var values = [];

              lodash["each"](indexes, function (nodes, indexName) {
                values.push({
                  name: indexName,
                  count: nodes.length,
                  time: lodash["sumBy"](nodes, NodeProp.EXCLUSIVE_DURATION),
                  timePercent: _this6.durationPercent(nodes),
                  nodes: nodes,
                });
              });

              return values;
            },
          },
        ]);

        return Stats;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop()],
        Statsvue_type_script_lang_ts_Stats.prototype,
        "plan",
        void 0
      );

      Statsvue_type_script_lang_ts_Stats = __decorate(
        [
          vue_class_component_esm({
            components: {
              SortedTable: vue_sorted_table_common["SortedTable"],
              SortLink: vue_sorted_table_common["SortLink"],
              StatsTableItem: components_StatsTableItem,
            },
          }),
        ],
        Statsvue_type_script_lang_ts_Stats
      );
      /* harmony default export */ var Statsvue_type_script_lang_ts_ = Statsvue_type_script_lang_ts_Stats;
      // CONCATENATED MODULE: ./src/components/Stats.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_Statsvue_type_script_lang_ts_ = Statsvue_type_script_lang_ts_;
      // CONCATENATED MODULE: ./src/components/Stats.vue

      /* normalize component */

      var Stats_component = normalizeComponent(
        components_Statsvue_type_script_lang_ts_,
        Statsvue_type_template_id_63899183_render,
        Statsvue_type_template_id_63899183_staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_Stats =
        Stats_component.exports;
      // CONCATENATED MODULE: ./src/inode.ts
      function inode_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function inode_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          inode_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) inode_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function inode_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      // Class to create nodes when parsing text

      var inode_Node = /*#__PURE__*/ inode_createClass(function Node(type) {
        inode_classCallCheck(this, Node);

        this[NodeProp.NODE_TYPE] = type; // tslint:disable-next-line:max-line-length

        var scanMatches = /^((?:Parallel\s+)?(?:Seq\sScan|Tid.*Scan|Bitmap\s+Heap\s+Scan|(?:Async\s+)?Foreign\s+Scan|Update|Insert|Delete))\son\s(\S+)(?:\s+(\S+))?$/.exec(
          type
        );
        var bitmapMatches = /^(Bitmap\s+Index\s+Scan)\son\s(\S+)$/.exec(type); // tslint:disable-next-line:max-line-length

        var indexMatches = /^((?:Parallel\s+)?Index(?:\sOnly)?\sScan(?:\sBackward)?)\susing\s(\S+)\son\s(\S+)(?:\s+(\S+))?$/.exec(
          type
        );
        var cteMatches = /^(CTE\sScan)\son\s(\S+)(?:\s+(\S+))?$/.exec(type);
        var functionMatches = /^(Function\sScan)\son\s(\S+)(?:\s+(\S+))?$/.exec(
          type
        );
        var subqueryMatches = /^(Subquery\sScan)\son\s(.+)$/.exec(type);

        if (scanMatches) {
          this[NodeProp.NODE_TYPE] = scanMatches[1];
          this[NodeProp.RELATION_NAME] = scanMatches[2];

          if (scanMatches[3]) {
            this[NodeProp.ALIAS] = scanMatches[3];
          }
        } else if (bitmapMatches) {
          this[NodeProp.NODE_TYPE] = bitmapMatches[1];
          this[NodeProp.INDEX_NAME] = bitmapMatches[2];
        } else if (indexMatches) {
          this[NodeProp.NODE_TYPE] = indexMatches[1];
          this[NodeProp.INDEX_NAME] = indexMatches[2];
          this[NodeProp.RELATION_NAME] = indexMatches[3];

          if (indexMatches[4]) {
            this[NodeProp.ALIAS] = indexMatches[4];
          }
        } else if (cteMatches) {
          this[NodeProp.NODE_TYPE] = cteMatches[1];
          this[NodeProp.CTE_NAME] = cteMatches[2];

          if (cteMatches[3]) {
            this[NodeProp.ALIAS] = cteMatches[3];
          }
        } else if (functionMatches) {
          this[NodeProp.NODE_TYPE] = functionMatches[1];
          this[NodeProp.FUNCTION_NAME] = functionMatches[2];

          if (functionMatches[3]) {
            this[NodeProp.ALIAS] = functionMatches[3];
          }
        } else if (subqueryMatches) {
          this[NodeProp.NODE_TYPE] = subqueryMatches[1]; // this[NodeProp.SUBQUERY_NAME] = subqueryMatches[2].replace
        }

        var parallelMatches = /^(Parallel\s+)(.*)/.exec(
          this[NodeProp.NODE_TYPE]
        );

        if (parallelMatches) {
          this[NodeProp.NODE_TYPE] = parallelMatches[2];
          this[NodeProp.PARALLEL_AWARE] = true;
        }

        var joinMatches = /(.*)\sJoin$/.exec(this[NodeProp.NODE_TYPE]);
        var joinModifierMatches = /(.*)\s+(Full|Left|Right|Anti)/.exec(
          this[NodeProp.NODE_TYPE]
        );

        if (joinMatches) {
          this[NodeProp.NODE_TYPE] = joinMatches[1];

          if (joinModifierMatches) {
            this[NodeProp.NODE_TYPE] = joinModifierMatches[1];
            this[NodeProp.JOIN_TYPE] = joinModifierMatches[2];
          }

          this[NodeProp.NODE_TYPE] += " Join";
        }
      });

      // CONCATENATED MODULE: ./src/iworker.ts
      function iworker_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function iworker_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          iworker_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) iworker_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function iworker_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      // Class to create workers when parsing text

      var iworker_Worker = /*#__PURE__*/ iworker_createClass(function Worker(
        workerNumber
      ) {
        iworker_classCallCheck(this, Worker);

        this[WorkerProp.WORKER_NUMBER] = workerNumber;
      });

      // EXTERNAL MODULE: ./node_modules/clarinet/clarinet.js
      var clarinet = __webpack_require__("3c66");
      var clarinet_default = /*#__PURE__*/ __webpack_require__.n(clarinet);

      // CONCATENATED MODULE: ./src/services/plan-service.ts
      function plan_service_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      function plan_service_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function plan_service_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function plan_service_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          plan_service_defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          plan_service_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      var plan_service_PlanService = /*#__PURE__*/ (function () {
        function PlanService() {
          plan_service_classCallCheck(this, PlanService);

          this.nodeId = 0;
        }

        plan_service_createClass(PlanService, [
          {
            key: "createPlan",
            value: function createPlan(planName, planContent, planQuery) {
              // remove any extra white spaces in the middle of query
              // (\S) start match after any non-whitespace character => group 1
              // (?!$) don't start match after end of line
              // (\s{2,}) group of 2 or more white spaces
              // '$1 ' reuse group 1 and and a single space
              planQuery = planQuery.replace(/(\S)(?!$)(\s{2,})/gm, "$1 ");
              var plan = {
                id: NodeProp.PEV_PLAN_TAG + new Date().getTime().toString(),
                name:
                  planName ||
                  "plan created on " + moment_default()().format("LLL"),
                createdOn: new Date(),
                content: planContent,
                query: planQuery,
                planStats: {},
                ctes: [],
                isAnalyze: lodash["has"](
                  planContent.Plan,
                  NodeProp.ACTUAL_ROWS
                ),
                isVerbose: this.findOutputProperty(planContent.Plan),
              };
              this.nodeId = 1;
              this.processNode(plan.content.Plan, plan);
              this.calculateMaximums(plan.content);
              return plan;
            },
          },
          {
            key: "isCTE",
            value: function isCTE(node) {
              return (
                node[NodeProp.PARENT_RELATIONSHIP] === "InitPlan" &&
                lodash["startsWith"](node[NodeProp.SUBPLAN_NAME], "CTE")
              );
            }, // recursively walk down the plan to compute various metrics
          },
          {
            key: "processNode",
            value: function processNode(node, plan) {
              var _this = this;

              node.nodeId = this.nodeId++;
              this.calculatePlannerEstimate(node);

              lodash["each"](node[NodeProp.PLANS], function (child) {
                // Disseminate workers planned info to parallel nodes (ie. Gather children)
                if (
                  !_this.isCTE(child) &&
                  child[NodeProp.PARENT_RELATIONSHIP] !== "InitPlan" &&
                  child[NodeProp.PARENT_RELATIONSHIP] !== "SubPlan"
                ) {
                  child[NodeProp.WORKERS_PLANNED_BY_GATHER] =
                    node[NodeProp.WORKERS_PLANNED] ||
                    node[NodeProp.WORKERS_PLANNED_BY_GATHER];
                }

                if (_this.isCTE(child)) {
                  plan.ctes.push(child);
                }

                _this.processNode(child, plan);
              });

              lodash["remove"](node[NodeProp.PLANS], function (child) {
                return _this.isCTE(child);
              }); // calculate actuals after processing child nodes so that actual duration
              // takes loops into account

              this.calculateActuals(node);
              this.calculateExclusives(node);
            },
          },
          {
            key: "calculateMaximums",
            value: function calculateMaximums(content) {
              function recurse(nodes) {
                return lodash["map"](nodes, function (node) {
                  return [node, recurse(node[NodeProp.PLANS])];
                });
              }

              var flat = lodash["flattenDeep"](recurse([content.Plan]));

              var largest = lodash["maxBy"](flat, NodeProp.ACTUAL_ROWS);

              if (largest) {
                content.maxRows = largest[NodeProp.ACTUAL_ROWS];
              }

              var costliest = lodash["maxBy"](flat, NodeProp.EXCLUSIVE_COST);

              if (costliest) {
                content.maxCost = costliest[NodeProp.EXCLUSIVE_COST];
              }

              var totalCostliest = lodash["maxBy"](flat, NodeProp.TOTAL_COST);

              if (totalCostliest) {
                content.maxTotalCost = totalCostliest[NodeProp.TOTAL_COST];
              }

              var slowest = lodash["maxBy"](flat, NodeProp.EXCLUSIVE_DURATION);

              if (slowest) {
                content.maxDuration = slowest[NodeProp.EXCLUSIVE_DURATION];
              }

              if (!content.maxBlocks) {
                content.maxBlocks = {};
              }

              function sumShared(o) {
                return (
                  o[NodeProp.EXCLUSIVE_SHARED_HIT_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_SHARED_READ_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_SHARED_DIRTIED_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_SHARED_WRITTEN_BLOCKS]
                );
              }

              var highestShared = lodash["maxBy"](flat, function (o) {
                return sumShared(o);
              });

              if (highestShared && sumShared(highestShared)) {
                content.maxBlocks[BufferLocation.shared] = sumShared(
                  highestShared
                );
              }

              function sumTemp(o) {
                return (
                  o[NodeProp.EXCLUSIVE_TEMP_READ_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_TEMP_WRITTEN_BLOCKS]
                );
              }

              var highestTemp = lodash["maxBy"](flat, function (o) {
                return sumTemp(o);
              });

              if (highestTemp && sumTemp(highestTemp)) {
                content.maxBlocks[BufferLocation.temp] = sumTemp(highestTemp);
              }

              function sumLocal(o) {
                return (
                  o[NodeProp.EXCLUSIVE_LOCAL_HIT_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_LOCAL_READ_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_LOCAL_DIRTIED_BLOCKS] +
                  o[NodeProp.EXCLUSIVE_LOCAL_WRITTEN_BLOCKS]
                );
              }

              var highestLocal = lodash["maxBy"](flat, function (o) {
                return sumLocal(o);
              });

              if (highestLocal && sumLocal(highestLocal)) {
                content.maxBlocks[BufferLocation.local] = sumLocal(
                  highestLocal
                );
              }
            }, // actual duration and actual cost are calculated by subtracting child values from the total
          },
          {
            key: "calculateActuals",
            value: function calculateActuals(node) {
              if (!lodash["isUndefined"](node[NodeProp.ACTUAL_TOTAL_TIME])) {
                // since time is reported for an invidual loop, actual duration must be adjusted by number of loops
                // number of workers is also taken into account
                var workers =
                  (node[NodeProp.WORKERS_PLANNED_BY_GATHER] || 0) + 1;
                node[NodeProp.ACTUAL_TOTAL_TIME] =
                  (node[NodeProp.ACTUAL_TOTAL_TIME] *
                    node[NodeProp.ACTUAL_LOOPS]) /
                  workers;
                node[NodeProp.ACTUAL_STARTUP_TIME] =
                  (node[NodeProp.ACTUAL_STARTUP_TIME] *
                    node[NodeProp.ACTUAL_LOOPS]) /
                  workers;
                node[NodeProp.EXCLUSIVE_DURATION] =
                  node[NodeProp.ACTUAL_TOTAL_TIME];
                var duration =
                  node[NodeProp.EXCLUSIVE_DURATION] -
                  this.childrenDuration(node, 0);
                node[NodeProp.EXCLUSIVE_DURATION] = duration > 0 ? duration : 0;
              }

              if (node[NodeProp.TOTAL_COST]) {
                node[NodeProp.EXCLUSIVE_COST] = node[NodeProp.TOTAL_COST];
              }

              lodash["each"](node[NodeProp.PLANS], function (subPlan) {
                if (
                  subPlan[NodeProp.PARENT_RELATIONSHIP] !== "InitPlan" &&
                  subPlan[NodeProp.TOTAL_COST]
                ) {
                  node[NodeProp.EXCLUSIVE_COST] =
                    node[NodeProp.EXCLUSIVE_COST] -
                    subPlan[NodeProp.TOTAL_COST];
                }
              });

              if (node[NodeProp.EXCLUSIVE_COST] < 0) {
                node[NodeProp.EXCLUSIVE_COST] = 0;
              }

              lodash["each"](
                [
                  "ACTUAL_ROWS",
                  "PLAN_ROWS",
                  "ROWS_REMOVED_BY_FILTER",
                  "ROWS_REMOVED_BY_JOIN_FILTER",
                ],
                function (prop) {
                  if (!lodash["isUndefined"](node[NodeProp[prop]])) {
                    var revisedProp = prop + "_REVISED";
                    var loops = node[NodeProp.ACTUAL_LOOPS] || 1;
                    node[NodeProp[revisedProp]] = node[NodeProp[prop]] * loops;
                  }
                }
              );
            }, // recursive function to get the sum of actual durations of a a node children
          },
          {
            key: "childrenDuration",
            value: function childrenDuration(node, duration) {
              var _this2 = this;

              lodash["each"](node[NodeProp.PLANS], function (child) {
                // Subtract sub plans duration from this node except for InitPlans
                // (ie. CTE)
                if (child[NodeProp.PARENT_RELATIONSHIP] !== "InitPlan") {
                  duration += child[NodeProp.EXCLUSIVE_DURATION] || 0; // Duration may not be set

                  duration = _this2.childrenDuration(child, duration);
                }
              });

              return duration;
            }, // figure out order of magnitude by which the planner mis-estimated how many rows would be
            // invloved in this node
          },
          {
            key: "calculatePlannerEstimate",
            value: function calculatePlannerEstimate(node) {
              if (node[NodeProp.ACTUAL_ROWS] === undefined) {
                return;
              }

              node[NodeProp.PLANNER_ESTIMATE_FACTOR] =
                node[NodeProp.ACTUAL_ROWS] / node[NodeProp.PLAN_ROWS];
              node[NodeProp.PLANNER_ESTIMATE_DIRECTION] =
                EstimateDirection.none;

              if (node[NodeProp.ACTUAL_ROWS] > node[NodeProp.PLAN_ROWS]) {
                node[NodeProp.PLANNER_ESTIMATE_DIRECTION] =
                  EstimateDirection.under;
              }

              if (node[NodeProp.ACTUAL_ROWS] < node[NodeProp.PLAN_ROWS]) {
                node[NodeProp.PLANNER_ESTIMATE_DIRECTION] =
                  EstimateDirection.over;
                node[NodeProp.PLANNER_ESTIMATE_FACTOR] =
                  node[NodeProp.PLAN_ROWS] / node[NodeProp.ACTUAL_ROWS];
              }
            },
          },
          {
            key: "cleanupSource",
            value: function cleanupSource(source) {
              // Remove frames around, handles |, ║,
              source = source.replace(/^(\||║|│)(.*)\1\r?\n/gm, "$2\n"); // Remove separator lines from various types of borders

              source = source.replace(/^\+-+\+\r?\n/gm, "");
              source = source.replace(/^(-|─|═)\1+\r?\n/gm, "");
              source = source.replace(/^(├|╟|╠|╞)(─|═)\2*(┤|╢|╣|╡)\r?\n/gm, ""); // Remove more horizontal lines

              source = source.replace(/^\+-+\+\r?\n/gm, "");
              source = source.replace(/^└(─)+┘\r?\n/gm, "");
              source = source.replace(/^╚(═)+╝\r?\n/gm, "");
              source = source.replace(/^┌(─)+┐\r?\n/gm, "");
              source = source.replace(/^╔(═)+╗\r?\n/gm, ""); // Remove quotes around lines, both ' and "

              source = source.replace(/^(["'])(.*)\1\r?\n/gm, "$2\n"); // Remove "+" line continuations

              source = source.replace(/\s*\+\r?\n/g, "\n"); // Remove "↵" line continuations

              source = source.replace(/↵\r?/gm, "\n"); // Remove "query plan" header

              source = source.replace(/^\s*QUERY PLAN\s*\r?\n/m, ""); // Remove rowcount
              // example: (8 rows)
              // Note: can be translated
              // example: (8 lignes)

              source = source.replace(/^\(\d+\s+[a-z]*s?\)(\r?\n|$)/gm, "\n");
              return source;
            },
          },
          {
            key: "fromSource",
            value: function fromSource(source) {
              source = this.cleanupSource(source);
              var isJson = false;

              try {
                isJson = JSON.parse(source);
              } catch (error) {
                // continue
              }

              if (isJson) {
                return this.parseJson(source);
              } else if (
                /^([\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*)(\[|\{)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\n[\s\S]*?\1(\]|\})[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/gm.exec(
                  source
                )
              ) {
                return this.fromJson(source);
              }

              return this.fromText(source);
            },
          },
          {
            key: "fromJson",
            value: function fromJson(source) {
              // We need to remove things before and/or after explain
              // To do this, first - split explain into lines...
              var sourceLines = source.split(/[\r\n]+/); // Now, find first line of explain, and cache it's prefix (some spaces ...)

              var prefix = "";
              var firstLineIndex = 0;

              lodash["each"](sourceLines, function (l, index) {
                var matches = /^(\s*)(\[|\{)\s*$/.exec(l);

                if (matches) {
                  prefix = matches[1];
                  firstLineIndex = index;
                  return false;
                }
              }); // now find last line

              var lastLineIndex = 0;

              lodash["each"](sourceLines, function (l, index) {
                var matches = new RegExp("^" + prefix + "(]|})s*$").exec(l);

                if (matches) {
                  lastLineIndex = index;
                  return false;
                }
              });

              var useSource = sourceLines
                .slice(firstLineIndex, lastLineIndex + 1)
                .join("\n");
              return this.parseJson(useSource);
            }, // Stream parse JSON as it can contain duplicate keys (workers)
          },
          {
            key: "parseJson",
            value: function parseJson(source) {
              var parser = clarinet_default.a.parser();
              var elements = [];
              var root = null; // Store the level and duplicated object|array

              var duplicated = null;

              parser.onvalue = function (v) {
                var current = elements[elements.length - 1];

                if (lodash["isArray"](current)) {
                  current.push(v);
                } else {
                  var keys = Object.keys(current);
                  var lastKey = keys[keys.length - 1];
                  current[lastKey] = v;
                }
              };

              parser.onopenobject = function (key) {
                var o = {};
                o[key] = null;
                elements.push(o);
              };

              parser.onkey = function (key) {
                var current = elements[elements.length - 1];
                var keys = Object.keys(current);

                if (keys.indexOf(key) !== -1) {
                  duplicated = [elements.length - 1, current[key]];
                } else {
                  current[key] = null;
                }
              };

              parser.onopenarray = function () {
                elements.push([]);
              };

              parser.oncloseobject = parser.onclosearray = function () {
                var popped = elements.pop();

                if (!elements.length) {
                  root = popped;
                } else {
                  var current = elements[elements.length - 1];

                  if (duplicated && duplicated[0] === elements.length - 1) {
                    lodash["merge"](duplicated[1], popped);

                    duplicated = null;
                  } else {
                    if (lodash["isArray"](current)) {
                      current.push(popped);
                    } else {
                      var keys = Object.keys(current);
                      var lastKey = keys[keys.length - 1];
                      current[lastKey] = popped;
                    }
                  }
                }
              };

              parser.write(source).close();

              if (root instanceof Array) {
                root = root[0];
              }

              return root;
            },
          },
          {
            key: "splitIntoLines",
            value: function splitIntoLines(text) {
              // Splits source into lines, while fixing (well, trying to fix)
              // cases where input has been force-wrapped to some length.
              var out = [];
              var lines = text.split(/\r?\n/);

              var countChar = function countChar(str, ch) {
                return (str.match(ch) || []).length;
              };

              lodash["each"](lines, function (line) {
                if (countChar(line, /\)/g) > countChar(line, /\(/g)) {
                  // if there more closing parenthesis this means that it's the
                  // continuation of a previous line
                  out[out.length - 1] += line;
                } else if (
                  line.match(
                    /^(?:Total\s+runtime|Planning\s+time|Execution\s+time|Time|Filter|Output|JIT)/i
                  )
                ) {
                  out.push(line);
                } else if (
                  line.match(/^\S/) || // doesn't start with a blank space (allowed only for the first node)
                  line.match(/^\s*\(/) // first non-blank character is an opening parenthesis
                ) {
                  if (0 < out.length) {
                    out[out.length - 1] += line;
                  } else {
                    out.push(line);
                  }
                } else {
                  out.push(line);
                }
              });

              return out;
            },
          },
          {
            key: "fromText",
            value: function fromText(text) {
              var _this3 = this;

              var lines = this.splitIntoLines(text);
              var root = {};
              root.Plan = null; // Array to keep reference to previous nodes with there depth

              var elementsAtDepth = [];

              lodash["each"](lines, function (line) {
                // Remove any trailing "
                line = line.replace(/"\s*$/, ""); // Remove any begining "

                line = line.replace(/^\s*"/, ""); // Replace tabs with 4 spaces

                line = line.replace(/\t/gm, "    ");
                var indentationRegex = /^\s*/;
                var depth = line.match(indentationRegex)[0].length; // remove indentation

                line = line.replace(indentationRegex, "");
                var emptyLineRegex = "^s*$";
                var headerRegex = "^\\s*(QUERY|---|#).*$";
                var prefixRegex = "^(\\s*->\\s*|\\s*)";
                var typeRegex = "([^\\r\\n\\t\\f\\v\\:\\(]*?)"; // tslint:disable-next-line:max-line-length

                var estimationRegex =
                  "\\(cost=(\\d+\\.\\d+)\\.\\.(\\d+\\.\\d+)\\s+rows=(\\d+)\\s+width=(\\d+)\\)";
                var nonCapturingGroupOpen = "(?:";
                var nonCapturingGroupClose = ")";
                var openParenthesisRegex = "\\(";
                var closeParenthesisRegex = "\\)"; // tslint:disable-next-line:max-line-length

                var actualRegex =
                  "(?:actual\\stime=(\\d+\\.\\d+)\\.\\.(\\d+\\.\\d+)\\srows=(\\d+)\\sloops=(\\d+)|actual\\srows=(\\d+)\\sloops=(\\d+)|(never\\s+executed))";
                var optionalGroup = "?";
                var emptyLineMatches = new RegExp(emptyLineRegex).exec(line);
                var headerMatches = new RegExp(headerRegex).exec(line);
                /*
                 * Groups
                 * 1: prefix
                 * 2: type
                 * 3: estimated_startup_cost
                 * 4: estimated_total_cost
                 * 5: estimated_rows
                 * 6: estimated_row_width
                 * 7: actual_time_first
                 * 8: actual_time_last
                 * 9: actual_rows
                 * 10: actual_loops
                 * 11: actual_rows_
                 * 12: actual_loops_
                 * 13: never_executed
                 * 14: estimated_startup_cost
                 * 15: estimated_total_cost
                 * 16: estimated_rows
                 * 17: estimated_row_width
                 * 18: actual_time_first
                 * 19: actual_time_last
                 * 20: actual_rows
                 * 21: actual_loops
                 */

                var nodeRegex = new RegExp(
                  prefixRegex +
                    typeRegex +
                    "\\s*" +
                    nonCapturingGroupOpen +
                    (nonCapturingGroupOpen +
                      estimationRegex +
                      "\\s+" +
                      openParenthesisRegex +
                      actualRegex +
                      closeParenthesisRegex +
                      nonCapturingGroupClose) +
                    "|" +
                    nonCapturingGroupOpen +
                    estimationRegex +
                    nonCapturingGroupClose +
                    "|" +
                    nonCapturingGroupOpen +
                    openParenthesisRegex +
                    actualRegex +
                    closeParenthesisRegex +
                    nonCapturingGroupClose +
                    nonCapturingGroupClose +
                    "\\s*$",
                  "gm"
                );
                var nodeMatches = nodeRegex.exec(line); // tslint:disable-next-line:max-line-length

                var subRegex = /^(\s*)((?:Sub|Init)Plan)\s*(?:\d+\s*)?\s*(?:\(returns.*\)\s*)?$/gm;
                var subMatches = subRegex.exec(line);
                var cteRegex = /^(\s*)CTE\s+(\S+)\s*$/g;
                var cteMatches = cteRegex.exec(line);
                /*
                 * Groups
                 * 2: trigger name
                 * 3: time
                 * 4: calls
                 */

                var triggerRegex = /^(\s*)Trigger\s+(.*):\s+time=(\d+\.\d+)\s+calls=(\d+)\s*$/g;
                var triggerMatches = triggerRegex.exec(line);
                /*
                 * Groups
                 * 2: Worker number
                 * 3: actual_time_first
                 * 4: actual_time_last
                 * 5: actual_rows
                 * 6: actual_loops
                 * 7: actual_rows_
                 * 8: actual_loops_
                 * 9: never_executed
                 * 10: extra
                 */

                var workerRegex = new RegExp(
                  /^(\s*)Worker\s+(\d+):\s+/.source +
                    nonCapturingGroupOpen +
                    actualRegex +
                    nonCapturingGroupClose +
                    optionalGroup +
                    "(.*)" +
                    "\\s*$",
                  "g"
                );
                var workerMatches = workerRegex.exec(line);
                var jitRegex = /^(\s*)JIT:\s*$/g;
                var jitMatches = jitRegex.exec(line);
                var extraRegex = /^(\s*)(\S.*\S)\s*$/g;
                var extraMatches = extraRegex.exec(line);

                if (emptyLineMatches || headerMatches) {
                  return;
                } else if (nodeMatches && !cteMatches && !subMatches) {
                  var prefix = nodeMatches[1];
                  var neverExecuted = nodeMatches[13];
                  var newNode = new inode_Node(nodeMatches[2]);

                  if (
                    (nodeMatches[3] && nodeMatches[4]) ||
                    (nodeMatches[14] && nodeMatches[15])
                  ) {
                    newNode[NodeProp.STARTUP_COST] = parseFloat(
                      nodeMatches[3] || nodeMatches[14]
                    );
                    newNode[NodeProp.TOTAL_COST] = parseFloat(
                      nodeMatches[4] || nodeMatches[15]
                    );
                    newNode[NodeProp.PLAN_ROWS] = parseInt(
                      nodeMatches[5] || nodeMatches[16],
                      0
                    );
                    newNode[NodeProp.PLAN_WIDTH] = parseInt(
                      nodeMatches[6] || nodeMatches[17],
                      0
                    );
                  }

                  if (
                    (nodeMatches[7] && nodeMatches[8]) ||
                    (nodeMatches[18] && nodeMatches[19])
                  ) {
                    newNode[NodeProp.ACTUAL_STARTUP_TIME] = parseFloat(
                      nodeMatches[7] || nodeMatches[18]
                    );
                    newNode[NodeProp.ACTUAL_TOTAL_TIME] = parseFloat(
                      nodeMatches[8] || nodeMatches[19]
                    );
                  }

                  if (
                    (nodeMatches[9] && nodeMatches[10]) ||
                    (nodeMatches[11] && nodeMatches[12]) ||
                    (nodeMatches[20] && nodeMatches[21])
                  ) {
                    newNode[NodeProp.ACTUAL_ROWS] = parseInt(
                      nodeMatches[9] || nodeMatches[11] || nodeMatches[20],
                      0
                    );
                    newNode[NodeProp.ACTUAL_LOOPS] = parseInt(
                      nodeMatches[10] || nodeMatches[12] || nodeMatches[21],
                      0
                    );
                  }

                  if (neverExecuted) {
                    newNode[NodeProp.ACTUAL_LOOPS] = 0;
                    newNode[NodeProp.ACTUAL_ROWS] = 0;
                    newNode[NodeProp.ACTUAL_TOTAL_TIME] = 0;
                  }

                  var element = {
                    node: newNode,
                    subelementType: "subnode",
                  };

                  if (0 === elementsAtDepth.length) {
                    elementsAtDepth.push([depth, element]);
                    root.Plan = newNode;
                    return;
                  } // Remove elements from elementsAtDepth for deeper levels

                  lodash["remove"](elementsAtDepth, function (e) {
                    return e[0] >= depth;
                  }); // ! is for non-null assertion
                  // Prevents the "Object is possibly 'undefined'" linting error

                  var previousElement = lodash["last"](elementsAtDepth)[1];

                  elementsAtDepth.push([depth, element]);

                  if (!previousElement.node[NodeProp.PLANS]) {
                    previousElement.node[NodeProp.PLANS] = [];
                  }

                  if (previousElement.subelementType === "initplan") {
                    newNode[NodeProp.PARENT_RELATIONSHIP] = "InitPlan";
                    newNode[NodeProp.SUBPLAN_NAME] = previousElement.name;
                  } else if (previousElement.subelementType === "subplan") {
                    newNode[NodeProp.PARENT_RELATIONSHIP] = "SubPlan";
                    newNode[NodeProp.SUBPLAN_NAME] = previousElement.name;
                  }

                  previousElement.node.Plans.push(newNode);
                } else if (subMatches) {
                  var _prefix = subMatches[1];
                  var type = subMatches[2]; // Remove elements from elementsAtDepth for deeper levels

                  lodash["remove"](elementsAtDepth, function (e) {
                    return e[0] >= depth;
                  });

                  var _previousElement = lodash["last"](elementsAtDepth)[1];

                  var _element = {
                    node: _previousElement.node,
                    subelementType: type.toLowerCase(),
                    name: subMatches[0],
                  };
                  elementsAtDepth.push([depth, _element]);
                } else if (cteMatches) {
                  var _prefix2 = cteMatches[1];
                  var cteName = cteMatches[2]; // Remove elements from elementsAtDepth for deeper levels

                  lodash["remove"](elementsAtDepth, function (e) {
                    return e[0] >= depth;
                  });

                  var _previousElement2 = lodash["last"](elementsAtDepth)[1];

                  var _element2 = {
                    node: _previousElement2.node,
                    subelementType: "initplan",
                    name: "CTE " + cteName,
                  };
                  elementsAtDepth.push([depth, _element2]);
                } else if (workerMatches) {
                  var _prefix3 = workerMatches[1];
                  var workerNumber = parseInt(workerMatches[2], 0);

                  var _previousElement3 = lodash["last"](elementsAtDepth)[1];

                  if (!_previousElement3.node[NodeProp.WORKERS]) {
                    _previousElement3.node[NodeProp.WORKERS] = [];
                  }

                  var worker = _this3.getWorker(
                    _previousElement3.node,
                    workerNumber
                  );

                  if (!worker) {
                    worker = new iworker_Worker(workerNumber);

                    _previousElement3.node[NodeProp.WORKERS].push(worker);
                  }

                  if (workerMatches[3] && workerMatches[4]) {
                    worker[NodeProp.ACTUAL_STARTUP_TIME] = parseFloat(
                      workerMatches[3]
                    );
                    worker[NodeProp.ACTUAL_TOTAL_TIME] = parseFloat(
                      workerMatches[4]
                    );
                    worker[NodeProp.ACTUAL_ROWS] = parseInt(
                      workerMatches[5],
                      0
                    );
                    worker[NodeProp.ACTUAL_LOOPS] = parseInt(
                      workerMatches[6],
                      0
                    );
                  }

                  if (_this3.parseSort(workerMatches[10], worker)) {
                    return;
                  } // extra info

                  var info = workerMatches[10]
                    .split(/: (.+)/)
                    .filter(function (x) {
                      return x;
                    });

                  if (workerMatches[10]) {
                    if (!info[1]) {
                      return;
                    }

                    var property = lodash["startCase"](info[0]);

                    worker[property] = info[1];
                  }
                } else if (triggerMatches) {
                  var _prefix4 = triggerMatches[1]; // Remove elements from elementsAtDepth for deeper levels

                  lodash["remove"](elementsAtDepth, function (e) {
                    return e[0] >= depth;
                  });

                  root.Triggers = root.Triggers || [];
                  root.Triggers.push({
                    "Trigger Name": triggerMatches[2],
                    Time: _this3.parseTime(triggerMatches[3]),
                    Calls: triggerMatches[4],
                  });
                } else if (jitMatches) {
                  var _element3;

                  if (elementsAtDepth.length === 0) {
                    root.JIT = {};
                    _element3 = {
                      node: root.JIT,
                    };
                    elementsAtDepth.push([1, _element3]);
                  } else {
                    var lastElement = lodash["last"](elementsAtDepth)[1];

                    if (lodash["last"](lastElement.node[NodeProp.WORKERS])) {
                      var _worker = lodash["last"](
                        lastElement.node[NodeProp.WORKERS]
                      );

                      _worker.JIT = {};
                      _element3 = {
                        node: _worker.JIT,
                      };
                      elementsAtDepth.push([depth, _element3]);
                    }
                  }
                } else if (extraMatches) {
                  var _prefix5 = extraMatches[1]; // Remove elements from elementsAtDepth for deeper levels

                  lodash["remove"](elementsAtDepth, function (e) {
                    return e[0] >= depth;
                  });

                  var _element4;

                  if (elementsAtDepth.length === 0) {
                    _element4 = root;
                  } else {
                    _element4 = lodash["last"](elementsAtDepth)[1].node;
                  } // if no node have been found yet and a 'Query Text' has been found
                  // there the line is the part of the query

                  if (!_element4.Plan && _element4["Query Text"]) {
                    _element4["Query Text"] += "\n" + line;
                    return;
                  }

                  var _info = extraMatches[2]
                    .split(/: (.+)/)
                    .filter(function (x) {
                      return x;
                    });

                  if (!_info[1]) {
                    return;
                  }

                  if (_this3.parseSort(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseBuffers(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseWAL(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseIOTimings(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseOptions(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseTiming(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseSettings(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseSortGroups(extraMatches[2], _element4)) {
                    return;
                  }

                  if (_this3.parseSortKey(extraMatches[2], _element4)) {
                    return;
                  } // remove the " ms" unit in case of time

                  var value = _info[1].replace(/(\s*ms)$/, ""); // try to convert to number

                  if (parseFloat(value)) {
                    value = parseFloat(value);
                  }

                  var _property = _info[0];

                  if (
                    _property.indexOf(" runtime") !== -1 ||
                    _property.indexOf(" time") !== -1
                  ) {
                    _property = lodash["startCase"](_property);
                  }

                  _element4[_property] = value;
                }
              });

              if (!root.Plan) {
                throw new Error("Unable to parse plan");
              }

              return root;
            },
          },
          {
            key: "parseSortKey",
            value: function parseSortKey(text, el) {
              var sortRegex = /^\s*((?:Sort|Presorted) Key):\s+(.*)/g;
              var sortMatches = sortRegex.exec(text);

              if (sortMatches) {
                el[sortMatches[1]] = lodash["map"](
                  splitBalanced(sortMatches[2], ","),
                  lodash["trim"]
                );
                return true;
              }

              return false;
            },
          },
          {
            key: "parseSort",
            value: function parseSort(text, el) {
              /*
               * Groups
               * 2: Sort Method
               * 3: Sort Space Type
               * 4: Sort Space Used
               */
              var sortRegex = /^(\s*)Sort Method:\s+(.*)\s+(Memory|Disk):\s+(?:(\S*)kB)\s*$/g;
              var sortMatches = sortRegex.exec(text);

              if (sortMatches) {
                el[NodeProp.SORT_METHOD] = sortMatches[2].trim();
                el[NodeProp.SORT_SPACE_USED] = sortMatches[4];
                el[NodeProp.SORT_SPACE_TYPE] = sortMatches[3];
                return true;
              }

              return false;
            },
          },
          {
            key: "parseBuffers",
            value: function parseBuffers(text, el) {
              var _this4 = this;

              /*
               * Groups
               */
              var buffersRegex = /Buffers:\s+(.*)\s*$/g;
              var buffersMatches = buffersRegex.exec(text);
              /*
               * Groups:
               * 1: type
               * 2: info
               */

              if (buffersMatches) {
                lodash["each"](buffersMatches[1].split(/,\s+/), function (
                  infos
                ) {
                  var bufferInfoRegex = /(shared|temp|local)\s+(.*)$/g;
                  var m = bufferInfoRegex.exec(infos);

                  if (m) {
                    var type = m[1]; // Initiate with default value

                    lodash["each"](
                      ["hit", "read", "written", "dirtied"],
                      function (method) {
                        el[
                          lodash["map"](
                            [type, method, "blocks"],
                            lodash["capitalize"]
                          ).join(" ")
                        ] = 0;
                      }
                    );

                    lodash["each"](m[2].split(/\s+/), function (buffer) {
                      _this4.parseBuffer(buffer, type, el);
                    });
                  }
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseBuffer",
            value: function parseBuffer(text, type, el) {
              var s = text.split(/=/);
              var method = s[0];
              var value = parseInt(s[1], 0);
              el[
                lodash["map"](
                  [type, method, "blocks"],
                  lodash["capitalize"]
                ).join(" ")
              ] = value;
            },
          },
          {
            key: "getWorker",
            value: function getWorker(node, workerNumber) {
              return lodash["find"](node[NodeProp.WORKERS], function (worker) {
                return worker[WorkerProp.WORKER_NUMBER] === workerNumber;
              });
            },
          },
          {
            key: "parseWAL",
            value: function parseWAL(text, el) {
              var WALRegex = /WAL:\s+(.*)\s*$/g;
              var WALMatches = WALRegex.exec(text);

              if (WALMatches) {
                // Initiate with default value
                lodash["each"](["Records", "Bytes", "FPI"], function (type) {
                  el["WAL " + type] = 0;
                });

                lodash["each"](WALMatches[1].split(/\s+/), function (t) {
                  var s = t.split(/=/);
                  var type = s[0];
                  var value = parseInt(s[1], 0);
                  var typeCaps;

                  switch (type) {
                    case "fpi":
                      typeCaps = "FPI";
                      break;

                    default:
                      typeCaps = lodash["capitalize"](type);
                  }

                  el["WAL " + typeCaps] = value;
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseIOTimings",
            value: function parseIOTimings(text, el) {
              /*
               * Groups
               */
              var iotimingsRegex = /I\/O Timings:\s+(.*)\s*$/g;
              var iotimingsMatches = iotimingsRegex.exec(text);
              /*
               * Groups:
               * 1: type
               * 2: info
               */

              if (iotimingsMatches) {
                // Initiate with default value
                el[NodeProp.IO_READ_TIME] = 0;
                el[NodeProp.IO_WRITE_TIME] = 0;

                lodash["each"](iotimingsMatches[1].split(/\s+/), function (
                  timing
                ) {
                  var s = timing.split(/=/);
                  var method = s[0];
                  var value = parseFloat(s[1]);
                  var prop = "IO_" + lodash["upperCase"](method) + "_TIME";
                  el[NodeProp[prop]] = value;
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseOptions",
            value: function parseOptions(text, el) {
              // Parses an options block in JIT block
              // eg. Options: Inlining false, Optimization false, Expressions true, Deforming true

              /*
               * Groups
               */
              var optionsRegex = /^(\s*)Options:\s+(.*)$/g;
              var optionsMatches = optionsRegex.exec(text);

              if (optionsMatches) {
                el.Options = {};
                var options = optionsMatches[2].split(/\s*,\s*/);
                var matches;

                lodash["each"](options, function (option) {
                  var reg = /^(\S*)\s+(.*)$/g;
                  matches = reg.exec(option);
                  el.Options[matches[1]] = JSON.parse(matches[2]);
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseTiming",
            value: function parseTiming(text, el) {
              var _this5 = this;

              // Parses a timing block in JIT block
              // eg. Timing: Generation 0.340 ms, Inlining 0.000 ms, Optimization 0.168 ms, Emission 1.907 ms, Total 2.414 ms

              /*
               * Groups
               */
              var timingRegex = /^(\s*)Timing:\s+(.*)$/g;
              var timingMatches = timingRegex.exec(text);

              if (timingMatches) {
                el.Timing = {};
                var timings = timingMatches[2].split(/\s*,\s*/);
                var matches;

                lodash["each"](timings, function (option) {
                  var reg = /^(\S*)\s+(.*)$/g;
                  matches = reg.exec(option);
                  el.Timing[matches[1]] = _this5.parseTime(matches[2]);
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseTime",
            value: function parseTime(text) {
              return parseFloat(text.replace(/(\s*ms)$/, ""));
            },
          },
          {
            key: "parseSettings",
            value: function parseSettings(text, el) {
              // Parses a settings block
              // eg. Timing: Generation 0.340 ms, Inlining 0.000 ms, Optimization 0.168 ms, Emission 1.907 ms, Total 2.414 ms
              var settingsRegex = /^(\s*)Settings:\s*(.*)$/g;
              var settingsMatches = settingsRegex.exec(text);

              if (settingsMatches) {
                el.Settings = {};
                var settings = settingsMatches[2].split(/\s*,\s*/);
                var matches;

                lodash["each"](settings, function (option) {
                  var reg = /^(\S*)\s+=\s+(.*)$/g;
                  matches = reg.exec(option);
                  el.Settings[matches[1]] = matches[2].replace(/'/g, "");
                });

                return true;
              }

              return false;
            },
          },
          {
            key: "parseSortGroups",
            value: function parseSortGroups(text, el) {
              // Parses a Full-sort Groups block
              // eg. Full-sort Groups: 312500  Sort Method: quicksort  Average Memory: 26kB  Peak Memory: 26kB
              var sortGroupsRegex = /^\s*(Full-sort|Pre-sorted) Groups:\s+([0-9]*)\s+Sort Method[s]*:\s+(.*)\s+Average Memory:\s+(\S*)kB\s+Peak Memory:\s+(\S*)kB.*$/g;
              var matches = sortGroupsRegex.exec(text);

              if (matches) {
                var _SortGroupsProp$SORT_, _groups;

                var groups =
                  ((_groups = {}),
                  plan_service_defineProperty(
                    _groups,
                    SortGroupsProp.GROUP_COUNT,
                    parseInt(matches[2], 0)
                  ),
                  plan_service_defineProperty(
                    _groups,
                    SortGroupsProp.SORT_METHODS_USED,
                    lodash["map"](matches[3].split(","), lodash["trim"])
                  ),
                  plan_service_defineProperty(
                    _groups,
                    SortGroupsProp.SORT_SPACE_MEMORY,
                    ((_SortGroupsProp$SORT_ = {}),
                    plan_service_defineProperty(
                      _SortGroupsProp$SORT_,
                      SortSpaceMemory.AVERAGE_SORT_SPACE_USED,
                      parseInt(matches[4], 0)
                    ),
                    plan_service_defineProperty(
                      _SortGroupsProp$SORT_,
                      SortSpaceMemory.PEAK_SORT_SPACE_USED,
                      parseInt(matches[5], 0)
                    ),
                    _SortGroupsProp$SORT_)
                  ),
                  _groups);

                if (matches[1] === "Full-sort") {
                  el[NodeProp.FULL_SORT_GROUPS] = groups;
                } else if (matches[1] === "Pre-sorted") {
                  el[NodeProp.PRE_SORTED_GROUPS] = groups;
                } else {
                  throw new Error("Unsupported sort groups method");
                }

                return true;
              }

              return false;
            },
          },
          {
            key: "calculateExclusives",
            value: function calculateExclusives(node) {
              // Caculate inclusive value for the current node for the given property
              var properties = [
                "SHARED_HIT_BLOCKS",
                "SHARED_READ_BLOCKS",
                "SHARED_DIRTIED_BLOCKS",
                "SHARED_WRITTEN_BLOCKS",
                "TEMP_READ_BLOCKS",
                "TEMP_WRITTEN_BLOCKS",
                "LOCAL_HIT_BLOCKS",
                "LOCAL_READ_BLOCKS",
                "LOCAL_DIRTIED_BLOCKS",
                "LOCAL_WRITTEN_BLOCKS",
                "IO_READ_TIME",
                "IO_WRITE_TIME",
              ];

              lodash["each"](properties, function (property) {
                var sum = lodash["sumBy"](node[NodeProp.PLANS], function (
                  child
                ) {
                  return child[NodeProp[property]] || 0;
                });

                var exclusivePropertyString = "EXCLUSIVE_" + property;
                node[NodeProp[exclusivePropertyString]] =
                  node[NodeProp[property]] - sum;
              });
            },
          },
          {
            key: "findOutputProperty",
            value: function findOutputProperty(node) {
              var _this6 = this;

              // resursively look for an "Output" property
              var children = node.Plans;

              if (!children) {
                return false;
              }

              return lodash["some"](children, function (child) {
                return (
                  lodash["has"](child, NodeProp.OUTPUT) ||
                  _this6.findOutputProperty(child)
                );
              });
            },
          },
        ]);

        return PlanService;
      })();
      // CONCATENATED MODULE: ./src/dragscroll.ts
      function dragscroll_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function dragscroll_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function dragscroll_createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          dragscroll_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) dragscroll_defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      var Dragscroll = /*#__PURE__*/ (function () {
        function Dragscroll(element) {
          var _this = this;

          dragscroll_classCallCheck(this, Dragscroll);

          this.element = element;
          this.listener = true;
          this.start = false;
          this.startMousePositionX = 0;
          this.startMousePositionY = 0;
          this.startScrollPositionX = 0;
          this.startScrollPositionY = 0;
          this.element.addEventListener("mousedown", function (e) {
            if (e.target.closest(".plan-node-body")) {
              return;
            }

            e.preventDefault();

            _this.clearSelection();

            _this.startMousePositionX = e.screenX;
            _this.startMousePositionY = e.screenY;
            _this.startScrollPositionX = _this.element.scrollLeft;
            _this.startScrollPositionY = _this.element.scrollTop;
            _this.start = true;
          });
          document.documentElement.addEventListener("mouseup", function (e) {
            e.preventDefault();
            _this.startMousePositionX = 0;
            _this.startMousePositionY = 0;
            _this.startScrollPositionX = 0;
            _this.startScrollPositionY = 0;
            _this.start = false;
          });
          this.element.addEventListener("mousemove", function (e) {
            if (_this.listener && _this.start) {
              e.preventDefault();

              _this.element.scrollTo(
                _this.startScrollPositionX +
                  (_this.startMousePositionX - e.screenX),
                _this.startScrollPositionY +
                  (_this.startMousePositionY - e.screenY)
              );
            }
          });
        }

        dragscroll_createClass(Dragscroll, [
          {
            key: "clearSelection",
            value: function clearSelection() {
              if (window.getSelection) {
                var sel = window.getSelection();

                if (sel) {
                  sel.removeAllRanges();
                }
              }
            },
          },
        ]);

        return Dragscroll;
      })();

      // EXTERNAL MODULE: ./node_modules/vue-tippy/dist/vue-tippy.esm.js
      var vue_tippy_esm = __webpack_require__("6018");

      // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Plan.vue?vue&type=script&lang=ts&
      function Planvue_type_script_lang_ts_typeof(obj) {
        "@babel/helpers - typeof";
        return (
          (Planvue_type_script_lang_ts_typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (obj) {
                  return typeof obj;
                }
              : function (obj) {
                  return obj &&
                    "function" == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? "symbol"
                    : typeof obj;
                }),
          Planvue_type_script_lang_ts_typeof(obj)
        );
      }

      function Planvue_type_script_lang_ts_classCallCheck(
        instance,
        Constructor
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Planvue_type_script_lang_ts_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Planvue_type_script_lang_ts_createClass(
        Constructor,
        protoProps,
        staticProps
      ) {
        if (protoProps)
          Planvue_type_script_lang_ts_defineProperties(
            Constructor.prototype,
            protoProps
          );
        if (staticProps)
          Planvue_type_script_lang_ts_defineProperties(
            Constructor,
            staticProps
          );
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }

      function Planvue_type_script_lang_ts_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError(
            "Super expression must either be null or a function"
          );
        }
        Object.defineProperty(subClass, "prototype", {
          value: Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          }),
          writable: false,
        });
        if (superClass)
          Planvue_type_script_lang_ts_setPrototypeOf(subClass, superClass);
      }

      function Planvue_type_script_lang_ts_setPrototypeOf(o, p) {
        Planvue_type_script_lang_ts_setPrototypeOf =
          Object.setPrototypeOf ||
          function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
        return Planvue_type_script_lang_ts_setPrototypeOf(o, p);
      }

      function Planvue_type_script_lang_ts_createSuper(Derived) {
        var hasNativeReflectConstruct = Planvue_type_script_lang_ts_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = Planvue_type_script_lang_ts_getPrototypeOf(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = Planvue_type_script_lang_ts_getPrototypeOf(this)
              .constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return Planvue_type_script_lang_ts_possibleConstructorReturn(
            this,
            result
          );
        };
      }

      function Planvue_type_script_lang_ts_possibleConstructorReturn(
        self,
        call
      ) {
        if (
          call &&
          (Planvue_type_script_lang_ts_typeof(call) === "object" ||
            typeof call === "function")
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        }
        return Planvue_type_script_lang_ts_assertThisInitialized(self);
      }

      function Planvue_type_script_lang_ts_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        }
        return self;
      }

      function Planvue_type_script_lang_ts_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          );
          return true;
        } catch (e) {
          return false;
        }
      }

      function Planvue_type_script_lang_ts_getPrototypeOf(o) {
        Planvue_type_script_lang_ts_getPrototypeOf = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
            };
        return Planvue_type_script_lang_ts_getPrototypeOf(o);
      }

      external_commonjs_vue_commonjs2_vue_root_Vue_default.a.use(
        vue_tippy_esm["b" /* default */]
      );
      external_commonjs_vue_commonjs2_vue_root_Vue_default.a.component(
        "tippy",
        vue_tippy_esm["a" /* TippyComponent */]
      );

      var Planvue_type_script_lang_ts_Plan = /*#__PURE__*/ (function (_Vue) {
        Planvue_type_script_lang_ts_inherits(Plan, _Vue);

        var _super = Planvue_type_script_lang_ts_createSuper(Plan);

        function Plan() {
          var _this;

          Planvue_type_script_lang_ts_classCallCheck(this, Plan);

          _this = _super.apply(this, arguments);
          _this.flat = [];
          _this.menuHidden = true;
          _this.validationMessage = "";
          _this.showTriggers = false;
          _this.showSettings = false;
          _this.activeTab = "";
          _this.rawCopied = false;
          _this.helpService = new HelpService();
          _this.lodash = lodash;
          _this.eventBus = new external_commonjs_vue_commonjs2_vue_root_Vue_default.a();
          _this.viewOptions = {
            menuHidden: true,
            showHighlightBar: false,
            showPlanStats: true,
            highlightType: HighlightType.NONE,
            viewMode: ViewMode.FULL,
            orientation: Orientation.TWOD,
            showDiagram: true,
            diagramWidth: 20,
          };
          _this.highlightTypes = HighlightType;
          _this.viewModes = ViewMode;
          _this.orientations = Orientation;
          _this.planService = new plan_service_PlanService();
          _this.nodeProps = NodeProp;
          _this.selectedNode = null;
          return _this;
        }

        Planvue_type_script_lang_ts_createClass(Plan, [
          {
            key: "selectNode",
            value: function selectNode(nodeId) {
              this.selectedNode = nodeId;
              this.centerNode(
                nodeId,
                CenterMode.visible,
                HighlightMode.highlight
              );
            },
          },
          {
            key: "mounted",
            value: function mounted() {
              this.handleScroll();
              this.eventBus.$on("mouseovernode", this.onMouseOverNode);
              this.eventBus.$on("mouseoutnode", this.onMouseOutNode);
              this.eventBus.$on("clickcte", this.centerCTE);
            },
          },
          {
            key: "handleScroll",
            value: function handleScroll() {
              var el = this.$refs.plan.$el;
              var scroll = new Dragscroll(el);
            },
          },
          {
            key: "created",
            value: function created() {
              var _this2 = this;

              var savedOptions = localStorage.getItem("viewOptions");

              if (savedOptions) {
                lodash["assignIn"](this.viewOptions, JSON.parse(savedOptions));
              }

              var planJson;

              try {
                planJson = this.planService.fromSource(this.planSource);
                this.validationMessage = "";
                this.setActiveTab("plan");
              } catch (e) {
                this.validationMessage = "Couldn't parse plan";
                this.plan = null;
                return;
              }

              this.rootNode = planJson.Plan;
              this.queryText = planJson["Query Text"] || this.planQuery;
              this.plan = this.planService.createPlan(
                "",
                planJson,
                this.queryText
              );
              var content = this.plan.content;
              this.plan.planStats = {
                executionTime:
                  content["Execution Time"] || content["Total Runtime"] || null,
                planningTime: content["Planning Time"] || null,
                maxRows: content.maxRows || null,
                maxCost: content.maxCost || null,
                maxDuration: content.maxDuration || null,
                maxBlocks: content.maxBlocks || null,
                triggers: content.Triggers || [],
                jitTime:
                  (content.JIT &&
                    content.JIT.Timing &&
                    content.JIT.Timing.Total) ||
                  null,
                settings: content.Settings,
              };
              external_commonjs_vue_commonjs2_vue_root_Vue_default.a.nextTick(
                function () {
                  var node = 1;
                  var highlightMode = HighlightMode.flash;

                  if (_this2.zoomTo) {
                    node = _this2.zoomTo; // tslint:disable-next-line:no-bitwise

                    highlightMode =
                      HighlightMode.highlight | HighlightMode.showdetails;
                  }

                  _this2.centerNode(node, CenterMode.visible, highlightMode); // build the diagram structure
                  // with level and reference to PlanNode components for interaction

                  if (!_this2.plan) {
                    return;
                  }

                  _this2.onHashChange();
                }
              );
              window.addEventListener("hashchange", this.onHashChange);
            },
          },
          {
            key: "beforeDestroy",
            value: function beforeDestroy() {
              window.removeEventListener("hashchange", this.onHashChange);
            },
          },
          {
            key: "onHashChange",
            value: function onHashChange() {
              var _this3 = this;

              var reg = /#([a-zA-Z]*)(\/node\/([0-9]*))*/;
              var matches = reg.exec(window.location.hash);

              if (matches) {
                var tab = matches[1] || "plan";
                this.setActiveTab(tab);
                var nodeId = matches[3];

                if (nodeId !== undefined) {
                  // Delayed to make sure the tab has changed before recentering
                  setTimeout(function () {
                    _this3.selectNode(parseInt(nodeId, 0));
                  }, 1);
                }
              }
            },
          },
          {
            key: "onViewOptionsChanged",
            value: function onViewOptionsChanged(val, oldVal) {
              localStorage.setItem(
                "viewOptions",
                JSON.stringify(this.viewOptions)
              );
            },
          },
          {
            key: "showHideMenu",
            value: function showHideMenu() {
              this.viewOptions.menuHidden = !this.viewOptions.menuHidden;
            },
          },
          {
            key: "getHelpMessage",
            value: function getHelpMessage(message) {
              return this.helpService.getHelpMessage(message);
            },
          },
          {
            key: "centerNode",
            value: function centerNode(nodeId, centerMode, highlightMode) {
              var cmp = this.findPlanNode(function (o) {
                return o.node.nodeId === nodeId;
              });

              if (cmp) {
                this.highlightEl(
                  cmp.$el.querySelector(".plan-node"),
                  centerMode,
                  highlightMode
                ); // tslint:disable-next-line:no-bitwise

                if (highlightMode & HighlightMode.showdetails) {
                  cmp.setShowDetails(true);
                }
              }
            },
          },
          {
            key: "highlightEl",
            value: function highlightEl(el, centerMode, highlightMode) {
              if (!el) {
                return;
              }

              var parent = this.$refs.plan.$el;

              if (centerMode !== CenterMode.none) {
                scrollChildIntoParentView(
                  parent,
                  el,
                  centerMode === CenterMode.center,
                  function () {
                    // tslint:disable-next-line:no-bitwise
                    if (highlightMode & HighlightMode.flash) {
                      el.classList.add("flash");
                      setTimeout(function () {
                        el.classList.remove("flash");
                      }, 1000);
                    } // tslint:disable-next-line:no-bitwise

                    if (highlightMode & HighlightMode.highlight) {
                      el.classList.add("highlight");
                    }
                  }
                );
              }
            },
          },
          {
            key: "highlightNode",
            value: function highlightNode(nodeId, highlight) {
              var _this4 = this;

              var highlighted = this.$el.querySelector(".plan-node.highlight");

              if (highlighted) {
                highlighted.classList.remove("highlight");
              }

              window.clearTimeout(this.highlightTimeout);
              this.highlightTimeout = window.setTimeout(
                function () {
                  var cmp = _this4.findPlanNode(function (o) {
                    return o.node.nodeId === nodeId;
                  });

                  if (cmp) {
                    var el = cmp.$el.querySelector(".plan-node");
                    el.classList.toggle("highlight", highlight);
                  }
                }.bind(this),
                50
              );
            },
          },
          {
            key: "centerCTE",
            value: function centerCTE(cteName) {
              var cmp = this.findPlanNode(function (c) {
                return c.node[NodeProp.SUBPLAN_NAME] === cteName;
              });

              if (!cmp) {
                return;
              }

              this.highlightEl(
                cmp.$el,
                CenterMode.visible,
                HighlightMode.flash
              );
            },
          },
          {
            key: "totalTriggerDurationPercent",
            get: function get() {
              var plan = this.plan;
              var planStats = this.plan && this.plan.planStats;
              var executionTime =
                (this.plan && this.plan.planStats.executionTime) || 0;
              var totalDuration = this.triggersTotalDuration || 0;
              return lodash["round"]((totalDuration / executionTime) * 100);
            },
          },
          {
            key: "triggerDurationPercent",
            value: function triggerDurationPercent(trigger) {
              var plan = this.plan;
              var planStats = this.plan && this.plan.planStats;
              var executionTime =
                (this.plan && this.plan.planStats.executionTime) || 0;
              var time = trigger.Time;
              return lodash["round"]((time / executionTime) * 100);
            },
          },
          {
            key: "toggleDiagram",
            value: function toggleDiagram() {
              this.viewOptions.showDiagram = !this.viewOptions.showDiagram;
            },
          },
          {
            key: "planningTimeClass",
            value: function planningTimeClass(percent) {
              var c;

              if (percent > 90) {
                c = 4;
              } else if (percent > 40) {
                c = 3;
              } else if (percent > 10) {
                c = 2;
              }

              if (c) {
                return "c-" + c;
              }

              return false;
            },
          },
          {
            key: "triggersTotalDuration",
            get: function get() {
              if (!this.plan) {
                return;
              }

              return lodash["sumBy"](this.plan.planStats.triggers, function (
                o
              ) {
                return o.Time;
              });
            },
          },
          {
            key: "onMouseOverNode",
            value: function onMouseOverNode(nodeId) {
              this.highlightNode(nodeId, true);
            },
          },
          {
            key: "onMouseOutNode",
            value: function onMouseOutNode(nodeId) {
              this.highlightNode(nodeId, false);
            },
          },
          {
            key: "setActiveTab",
            value: function setActiveTab(tab) {
              this.activeTab = tab;
            },
          },
          {
            key: "findPlanNode",
            value: function findPlanNode(predicate) {
              var found = null;
              this.$refs.plan.$children.some(function iter(child) {
                if (child instanceof components_PlanNode) {
                  if (predicate(child)) {
                    found = child;
                    return true;
                  }

                  return child.$children.some(iter);
                }
              });
              return found;
            },
          },
          {
            key: "onSelectedNodeChange",
            value: function onSelectedNodeChange(newVal, oldVal) {
              var cmp = this.findPlanNode(function (o) {
                return o.node.nodeId === newVal;
              });

              if (cmp) {
                cmp.selected = true;
              }

              this.$refs.diagram.selected = newVal;
              cmp = this.findPlanNode(function (o) {
                return o.node.nodeId === oldVal;
              });

              if (cmp) {
                cmp.selected = false;
              }
            },
          },
        ]);

        return Plan;
      })(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);

      __decorate(
        [Prop(String)],
        Planvue_type_script_lang_ts_Plan.prototype,
        "planSource",
        void 0
      );

      __decorate(
        [Prop(String)],
        Planvue_type_script_lang_ts_Plan.prototype,
        "planQuery",
        void 0
      );

      __decorate(
        [Prop(Number)],
        Planvue_type_script_lang_ts_Plan.prototype,
        "zoomTo",
        void 0
      );

      __decorate(
        [
          Watch("viewOptions", {
            deep: true,
          }),
        ],
        Planvue_type_script_lang_ts_Plan.prototype,
        "onViewOptionsChanged",
        null
      );

      __decorate(
        [Watch("selectedNode")],
        Planvue_type_script_lang_ts_Plan.prototype,
        "onSelectedNodeChange",
        null
      );

      Planvue_type_script_lang_ts_Plan = __decorate(
        [
          vue_class_component_esm({
            name: "plan",
            components: {
              Copy: components_Copy,
              Diagram: components_Diagram,
              Pane: splitpanes_common["Pane"],
              PlanNode: components_PlanNode,
              Splitpanes: splitpanes_common["Splitpanes"],
              Stats: components_Stats,
            },
            directives: {},
            filters: {
              cost: cost,
              duration: filters_duration,
              durationClass: durationClass,
              json: filters_json,
              pgsql: filters_pgsql,
              rows: rows,
            },
          }),
        ],
        Planvue_type_script_lang_ts_Plan
      );
      /* harmony default export */ var Planvue_type_script_lang_ts_ = Planvue_type_script_lang_ts_Plan;
      // CONCATENATED MODULE: ./src/components/Plan.vue?vue&type=script&lang=ts&
      /* harmony default export */ var components_Planvue_type_script_lang_ts_ = Planvue_type_script_lang_ts_;
      // EXTERNAL MODULE: ./src/components/Plan.vue?vue&type=style&index=0&lang=scss&
      var Planvue_type_style_index_0_lang_scss_ = __webpack_require__("44bc");

      // CONCATENATED MODULE: ./src/components/Plan.vue

      /* normalize component */

      var Plan_component = normalizeComponent(
        components_Planvue_type_script_lang_ts_,
        render,
        staticRenderFns,
        false,
        null,
        null,
        null
      );

      /* harmony default export */ var components_Plan = Plan_component.exports;
      // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

      /* harmony default export */ var entry_lib = (__webpack_exports__[
        "default"
      ] = components_Plan);

      /***/
    },

    /******/
  }
)["default"];
